{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\n/** @constructor */\n\nexport class ClefNote extends Note {\n  static get CATEGORY() {\n    return 'clefnote';\n  }\n\n  constructor(type, size, annotation) {\n    super({\n      duration: 'b'\n    });\n    this.setAttribute('type', 'ClefNote');\n    this.setType(type, size, annotation); // Note properties\n\n    this.ignore_ticks = true;\n  }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getClef() {\n    return this.clef;\n  }\n\n  setContext(context) {\n    this.context = context;\n    this.glyph.setContext(this.context);\n    return this;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  getCategory() {\n    return ClefNote.CATEGORY;\n  }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x); // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n\n      if (!attachment.getContext()) {\n        attachment.setContext(this.context);\n      }\n\n      attachment.setStave(this.stave);\n      attachment.setYShift(this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/clefnote.js"],"names":["Vex","Note","Clef","Glyph","ClefNote","CATEGORY","constructor","type","size","annotation","duration","setAttribute","setType","ignore_ticks","clef_obj","clef","glyph","code","point","setWidth","getMetrics","width","getClef","setContext","context","getBoundingBox","addToModifierContext","getCategory","preFormat","setPreFormatted","draw","stave","RERR","getContext","setRendered","abs_x","getAbsoluteX","setStave","setYShift","getYForLine","line","getYForGlyphs","renderToStave","undefined","attachment","setXShift","x_shift"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\n\n/** @constructor */\nexport class ClefNote extends Note {\n  static get CATEGORY() { return 'clefnote'; }\n\n  constructor(type, size, annotation) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'ClefNote');\n\n    this.setType(type, size, annotation);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getClef() {\n    return this.clef;\n  }\n\n  setContext(context) {\n    this.context = context;\n    this.glyph.setContext(this.context);\n    return this;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  getCategory() { return ClefNote.CATEGORY; }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(\n      this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.context);\n      }\n      attachment.setStave(this.stave);\n      attachment.setYShift(\n        this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
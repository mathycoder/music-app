{"ast":null,"code":"var _jsxFileName = \"/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport Vex from 'vexflow';\nimport { connect } from 'react-redux';\n\nconst MusicNotation = ({\n  currentNote\n}) => {\n  const [VF, setVF] = useState(Vex.Flow);\n  const [renderer, _setRenderer] = useState(null);\n  const rendererRef = useRef(renderer);\n\n  const setRenderer = data => {\n    rendererRef.current = data;\n\n    _setRenderer(data);\n  };\n\n  useEffect(() => {\n    const div = document.getElementById(\"music-canvas\");\n    setRenderer(new VF.Renderer(div, VF.Renderer.Backends.SVG));\n    const context = rendererRef.current.getContext();\n    rendererRef.current.resize(400, 400); // Create a stave at position 10, 40 of width 400 on the canvas.\n\n    var stave = new VF.Stave(10, 0, 500); // Add a clef and time signature.\n\n    stave.addClef(\"treble\").addTimeSignature(\"4/4\"); // Connect it to the rendering context and draw!\n\n    stave.setContext(context).draw();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"music-canvas\",\n    style: styles.canvasStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  });\n};\n\nconst styles = {\n  canvasStyle: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  };\n};\n\nexport default connect(mapStateToProps, null)(MusicNotation);","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js"],"names":["React","useRef","useEffect","useState","Vex","connect","MusicNotation","currentNote","VF","setVF","Flow","renderer","_setRenderer","rendererRef","setRenderer","data","current","div","document","getElementById","Renderer","Backends","SVG","context","getContext","resize","stave","Stave","addClef","addTimeSignature","setContext","draw","styles","canvasStyle","flex","backgroundColor","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,GAAP,MAAgB,SAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACzC,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcN,QAAQ,CAACC,GAAG,CAACM,IAAL,CAA5B;AACA,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BT,QAAQ,CAAC,IAAD,CAAzC;AAEA,QAAMU,WAAW,GAAGZ,MAAM,CAACU,QAAD,CAA1B;;AACA,QAAMG,WAAW,GAAGC,IAAI,IAAI;AAC1BF,IAAAA,WAAW,CAACG,OAAZ,GAAsBD,IAAtB;;AACAH,IAAAA,YAAY,CAACG,IAAD,CAAZ;AACD,GAHD;;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAZ;AACAL,IAAAA,WAAW,CAAC,IAAIN,EAAE,CAACY,QAAP,CAAgBH,GAAhB,EAAqBT,EAAE,CAACY,QAAH,CAAYC,QAAZ,CAAqBC,GAA1C,CAAD,CAAX;AACA,UAAMC,OAAO,GAAGV,WAAW,CAACG,OAAZ,CAAoBQ,UAApB,EAAhB;AACAX,IAAAA,WAAW,CAACG,OAAZ,CAAoBS,MAApB,CAA2B,GAA3B,EAA+B,GAA/B,EAJc,CAKd;;AACA,QAAIC,KAAK,GAAG,IAAIlB,EAAE,CAACmB,KAAP,CAAa,EAAb,EAAiB,CAAjB,EAAoB,GAApB,CAAZ,CANc,CAQd;;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwBC,gBAAxB,CAAyC,KAAzC,EATc,CAWd;;AACAH,IAAAA,KAAK,CAACI,UAAN,CAAiBP,OAAjB,EAA0BQ,IAA1B;AACD,GAbQ,EAaN,EAbM,CAAT;AAmBA,sBACE;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,KAAK,EAAEC,MAAM,CAACC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CAhCD;;AAkCA,MAAMD,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,CADK;AAEXC,IAAAA,eAAe,EAAE;AAFN;AADA,CAAf;;AAOA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACL9B,IAAAA,WAAW,EAAE8B,KAAK,CAAC9B;AADd,GAAP;AAGD,CAJD;;AAMA,eAAeF,OAAO,CAAC+B,eAAD,EAAkB,IAAlB,CAAP,CAA+B9B,aAA/B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport Vex from 'vexflow'\nimport { connect } from 'react-redux'\n\nconst MusicNotation = ({ currentNote }) => {\n  const [VF, setVF] = useState(Vex.Flow)\n  const [renderer, _setRenderer] = useState(null)\n\n  const rendererRef = useRef(renderer)\n  const setRenderer = data => {\n    rendererRef.current = data\n    _setRenderer(data)\n  }\n\n  useEffect(() => {\n    const div = document.getElementById(\"music-canvas\")\n    setRenderer(new VF.Renderer(div, VF.Renderer.Backends.SVG))\n    const context = rendererRef.current.getContext()\n    rendererRef.current.resize(400,400)\n    // Create a stave at position 10, 40 of width 400 on the canvas.\n    var stave = new VF.Stave(10, 0, 500);\n\n    // Add a clef and time signature.\n    stave.addClef(\"treble\").addTimeSignature(\"4/4\");\n\n    // Connect it to the rendering context and draw!\n    stave.setContext(context).draw();\n  }, [])\n\n\n\n\n\n  return (\n    <div id=\"music-canvas\" style={styles.canvasStyle}></div>\n  )\n}\n\nconst styles = {\n  canvasStyle: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  }\n}\n\nexport default connect(mapStateToProps, null)(MusicNotation)\n"]},"metadata":{},"sourceType":"module"}
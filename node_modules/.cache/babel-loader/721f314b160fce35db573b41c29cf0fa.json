{"ast":null,"code":"var _jsxFileName = \"/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport Vex from 'vexflow';\nimport { connect } from 'react-redux';\n\nconst MusicNotation = ({\n  currentNote\n}) => {\n  const [currNote, _setCurrNote] = useState('C#5/w');\n  const vf = useRef();\n  const score = useRef();\n  const system = useRef();\n  const notesRef = useRef(currNote);\n\n  const setCurrNote = data => {\n    notesRef.current = data;\n\n    _setCurrNote(data);\n  };\n\n  useEffect(() => {\n    vf.current = new Vex.Flow.Factory({\n      renderer: {\n        elementId: 'music-canvas'\n      }\n    });\n    score.current = vf.current.EasyScore();\n    system.current = vf.current.System();\n    system.current.addStave({\n      voices: [score.current.voice(score.current.notes(notesRef.current))]\n    }).addClef('treble').addTimeSignature('4/4');\n    vf.current.draw();\n  }, []);\n  useEffect(() => {\n    if (currentNote) {\n      // vf.current = new Vex.Flow.Factory({renderer: {elementId: 'music-canvas'}});\n      // score.current = vf.current.EasyScore();\n      // system.current = vf.current.System();\n      setCurrNote(`${currentNote}/w`); // system.current.addStave({\n      //   voices: [score.current.voice(score.current.notes(notesRef.current))]\n      // }).addClef('treble').addTimeSignature('4/4');\n\n      vf.current.draw();\n    }\n  }, [currentNote]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"music-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  };\n};\n\nexport default connect(mapStateToProps, null)(MusicNotation);","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js"],"names":["React","useRef","useEffect","useState","Vex","connect","MusicNotation","currentNote","currNote","_setCurrNote","vf","score","system","notesRef","setCurrNote","data","current","Flow","Factory","renderer","elementId","EasyScore","System","addStave","voices","voice","notes","addClef","addTimeSignature","draw","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,GAAP,MAAgB,SAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACzC,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BN,QAAQ,CAAC,OAAD,CAAzC;AACA,QAAMO,EAAE,GAAGT,MAAM,EAAjB;AACA,QAAMU,KAAK,GAAGV,MAAM,EAApB;AACA,QAAMW,MAAM,GAAGX,MAAM,EAArB;AAEA,QAAMY,QAAQ,GAAGZ,MAAM,CAACO,QAAD,CAAvB;;AACA,QAAMM,WAAW,GAAGC,IAAI,IAAI;AAC1BF,IAAAA,QAAQ,CAACG,OAAT,GAAmBD,IAAnB;;AACAN,IAAAA,YAAY,CAACM,IAAD,CAAZ;AACD,GAHD;;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,EAAE,CAACM,OAAH,GAAa,IAAIZ,GAAG,CAACa,IAAJ,CAASC,OAAb,CAAqB;AAACC,MAAAA,QAAQ,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ;AAAX,KAArB,CAAb;AACAT,IAAAA,KAAK,CAACK,OAAN,GAAgBN,EAAE,CAACM,OAAH,CAAWK,SAAX,EAAhB;AACAT,IAAAA,MAAM,CAACI,OAAP,GAAiBN,EAAE,CAACM,OAAH,CAAWM,MAAX,EAAjB;AAEAV,IAAAA,MAAM,CAACI,OAAP,CAAeO,QAAf,CAAwB;AACtBC,MAAAA,MAAM,EAAE,CAACb,KAAK,CAACK,OAAN,CAAcS,KAAd,CAAoBd,KAAK,CAACK,OAAN,CAAcU,KAAd,CAAoBb,QAAQ,CAACG,OAA7B,CAApB,CAAD;AADc,KAAxB,EAEGW,OAFH,CAEW,QAFX,EAEqBC,gBAFrB,CAEsC,KAFtC;AAIAlB,IAAAA,EAAE,CAACM,OAAH,CAAWa,IAAX;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,WAAJ,EAAgB;AACd;AACA;AACA;AAEAO,MAAAA,WAAW,CAAE,GAAEP,WAAY,IAAhB,CAAX,CALc,CAMd;AACA;AACA;;AAEAG,MAAAA,EAAE,CAACM,OAAH,CAAWa,IAAX;AACD;AACF,GAbQ,EAaN,CAACtB,WAAD,CAbM,CAAT;AAeA,sBACE;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CA1CD;;AA4CA,MAAMuB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLxB,IAAAA,WAAW,EAAEwB,KAAK,CAACxB;AADd,GAAP;AAGD,CAJD;;AAMA,eAAeF,OAAO,CAACyB,eAAD,EAAkB,IAAlB,CAAP,CAA+BxB,aAA/B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport Vex from 'vexflow'\nimport { connect } from 'react-redux'\n\nconst MusicNotation = ({ currentNote }) => {\n  const [currNote, _setCurrNote] = useState('C#5/w')\n  const vf = useRef()\n  const score = useRef()\n  const system = useRef()\n\n  const notesRef = useRef(currNote)\n  const setCurrNote = data => {\n    notesRef.current = data;\n    _setCurrNote(data);\n  };\n\n  useEffect(() => {\n    vf.current = new Vex.Flow.Factory({renderer: {elementId: 'music-canvas'}});\n    score.current = vf.current.EasyScore();\n    system.current = vf.current.System();\n\n    system.current.addStave({\n      voices: [score.current.voice(score.current.notes(notesRef.current))]\n    }).addClef('treble').addTimeSignature('4/4');\n\n    vf.current.draw();\n  }, [])\n\n  useEffect(() => {\n    if (currentNote){\n      // vf.current = new Vex.Flow.Factory({renderer: {elementId: 'music-canvas'}});\n      // score.current = vf.current.EasyScore();\n      // system.current = vf.current.System();\n\n      setCurrNote(`${currentNote}/w`)\n      // system.current.addStave({\n      //   voices: [score.current.voice(score.current.notes(notesRef.current))]\n      // }).addClef('treble').addTimeSignature('4/4');\n\n      vf.current.draw();\n    }\n  }, [currentNote])\n\n  return (\n    <div id=\"music-canvas\"></div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  }\n}\n\nexport default connect(mapStateToProps, null)(MusicNotation)\n"]},"metadata":{},"sourceType":"module"}
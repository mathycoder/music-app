{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabTie } from './tabtie';\nimport { StaveNote } from './stavenote'; // To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.\n\nfunction L(...args) {\n  if (GraceNoteGroup.DEBUG) Vex.L('Vex.Flow.GraceNoteGroup', args);\n}\n\nexport class GraceNoteGroup extends Modifier {\n  static get CATEGORY() {\n    return 'gracenotegroups';\n  } // Arrange groups inside a `ModifierContext`\n\n\n  static format(gracenote_groups, state) {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = note.getCategory() === StaveNote.CATEGORY;\n      const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n\n        prev_note = note;\n      }\n\n      group_list.push({\n        shift: shiftL,\n        gracenote_group,\n        spacing\n      });\n    } // If first note left shift in case it is displaced\n\n\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  } // ## Prototype Methods\n  //\n  // `GraceNoteGroup` inherits from `Modifier` and is placed inside a\n  // `ModifierContext`.\n\n\n  constructor(grace_notes, show_slur) {\n    super();\n    this.setAttribute('type', 'GraceNoteGroup');\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n    this.preFormatted = false;\n    this.show_slur = show_slur;\n    this.slur = null;\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION\n    }).setStrict(false);\n    this.render_options = {\n      slur_y_shift: 0\n    };\n    this.beams = [];\n    this.voice.addTickables(this.grace_notes);\n    return this;\n  }\n\n  getCategory() {\n    return GraceNoteGroup.CATEGORY;\n  }\n\n  preFormat() {\n    if (this.preFormatted) return;\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes) {\n    grace_notes = grace_notes || this.grace_notes;\n\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setNote(note) {\n    this.note = note;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getGraceNotes() {\n    return this.grace_notes;\n  }\n\n  draw() {\n    this.checkContext();\n    const note = this.getNote();\n    L('Drawing grace note group for:', note);\n\n    if (!(note && this.index !== null)) {\n      throw new Vex.RuntimeError('NoAttachedNote', \"Can't draw grace note without a parent note and parent note index.\");\n    }\n\n    this.setRendered();\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n    // Draw notes\n\n    this.grace_notes.forEach(graceNote => {\n      graceNote.setContext(this.context).draw();\n    }); // Draw beam\n\n    this.beams.forEach(beam => {\n      beam.setContext(this.context).draw();\n    });\n\n    if (this.show_slur) {\n      // Create and draw slur\n      const is_stavenote = this.getNote().getCategory() === StaveNote.CATEGORY;\n      const TieClass = is_stavenote ? StaveTie : TabTie;\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0]\n      });\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(this.context).draw();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/gracenotegroup.js"],"names":["Vex","Flow","Modifier","Formatter","Voice","Beam","StaveTie","TabTie","StaveNote","L","args","GraceNoteGroup","DEBUG","CATEGORY","format","gracenote_groups","state","group_spacing_stave","group_spacing_tab","length","group_list","prev_note","shiftL","i","gracenote_group","note","getNote","is_stavenote","getCategory","spacing","n","keys","Math","max","getLeftDisplacedHeadPx","push","shift","group_shift","formatWidth","preFormat","getWidth","setSpacingFromNextModifier","min","left_shift","constructor","grace_notes","show_slur","setAttribute","index","position","Position","LEFT","width","preFormatted","slur","formatter","voice","num_beats","beat_value","resolution","RESOLUTION","setStrict","render_options","slur_y_shift","beams","addTickables","joinVoices","setWidth","getMinTotalWidth","beamNotes","beam","beam_width","partial_beam_length","setNote","getGraceNotes","draw","checkContext","RuntimeError","setRendered","alignSubNotesWithNote","forEach","graceNote","setContext","context","TieClass","last_note","first_note","first_indices","last_indices","cp2","y_shift"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabTie } from './tabtie';\nimport { StaveNote } from './stavenote';\n\n// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.\nfunction L(...args) { if (GraceNoteGroup.DEBUG) Vex.L('Vex.Flow.GraceNoteGroup', args); }\n\nexport class GraceNoteGroup extends Modifier {\n  static get CATEGORY() { return 'gracenotegroups'; }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(gracenote_groups, state) {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = (note.getCategory() === StaveNote.CATEGORY);\n      const spacing = (is_stavenote ? group_spacing_stave : group_spacing_tab);\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // `GraceNoteGroup` inherits from `Modifier` and is placed inside a\n  // `ModifierContext`.\n  constructor(grace_notes, show_slur) {\n    super();\n    this.setAttribute('type', 'GraceNoteGroup');\n\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.preFormatted = false;\n\n    this.show_slur = show_slur;\n    this.slur = null;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  getCategory() { return GraceNoteGroup.CATEGORY; }\n\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes) {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setNote(note) {\n    this.note = note;\n  }\n  setWidth(width) {\n    this.width = width;\n  }\n  getWidth() {\n    return this.width;\n  }\n  getGraceNotes() {\n    return this.grace_notes;\n  }\n  draw() {\n    this.checkContext();\n\n    const note = this.getNote();\n\n    L('Drawing grace note group for:', note);\n\n    if (!(note && (this.index !== null))) {\n      throw new Vex.RuntimeError('NoAttachedNote',\n        \"Can't draw grace note without a parent note and parent note index.\");\n    }\n\n    this.setRendered();\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw notes\n    this.grace_notes.forEach(graceNote => {\n      graceNote.setContext(this.context).draw();\n    });\n\n    // Draw beam\n    this.beams.forEach(beam => {\n      beam.setContext(this.context).draw();\n    });\n\n    if (this.show_slur) {\n      // Create and draw slur\n      const is_stavenote = (this.getNote().getCategory() === StaveNote.CATEGORY);\n      const TieClass = (is_stavenote ? StaveTie : TabTie);\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(this.context).draw();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
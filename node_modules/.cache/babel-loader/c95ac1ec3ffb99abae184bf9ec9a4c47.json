{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { DefaultFontStack } from './smufl';\nconst Flow = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: 16384,\n  DEFAULT_FONT_STACK: DefaultFontStack,\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true\n};\n\nFlow.clefProperties = clef => {\n  if (!clef) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n  const props = Flow.clefProperties.values[clef];\n  if (!props) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n  return props;\n};\n\nFlow.clefProperties.values = {\n  'treble': {\n    line_shift: 0\n  },\n  'bass': {\n    line_shift: 6\n  },\n  'tenor': {\n    line_shift: 4\n  },\n  'alto': {\n    line_shift: 3\n  },\n  'soprano': {\n    line_shift: 1\n  },\n  'percussion': {\n    line_shift: 0\n  },\n  'mezzo-soprano': {\n    line_shift: 2\n  },\n  'baritone-c': {\n    line_shift: 5\n  },\n  'baritone-f': {\n    line_shift: 5\n  },\n  'subbass': {\n    line_shift: 7\n  },\n  'french': {\n    line_shift: -1\n  }\n};\n/*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n*/\n\nFlow.keyProperties = (key, clef, params) => {\n  if (clef === undefined) {\n    clef = 'treble';\n  }\n\n  const options = {\n    octave_shift: 0\n  };\n\n  if (typeof params === 'object') {\n    Vex.Merge(options, params);\n  }\n\n  const pieces = key.split('/');\n\n  if (pieces.length < 2) {\n    throw new Vex.RERR('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n  }\n\n  const k = pieces[0].toUpperCase();\n  const value = Flow.keyProperties.note_values[k];\n  if (!value) throw new Vex.RERR('BadArguments', 'Invalid key name: ' + k);\n  if (value.octave) pieces[1] = value.octave;\n  let octave = parseInt(pieces[1], 10); // Octave_shift is the shift to compensate for clef 8va/8vb.\n\n  octave += -1 * options.octave_shift;\n  const base_index = octave * 7 - 4 * 7;\n  let line = (base_index + value.index) / 2;\n  line += Flow.clefProperties(clef).line_shift;\n  let stroke = 0;\n  if (line <= 0 && line * 2 % 2 === 0) stroke = 1; // stroke up\n\n  if (line >= 6 && line * 2 % 2 === 0) stroke = -1; // stroke down\n  // Integer value for note arithmetic.\n\n  const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : null;\n  /* Check if the user specified a glyph. */\n\n  const code = value.code;\n  const shift_right = value.shift_right;\n  let extraProps = {};\n\n  if (pieces.length > 2 && pieces[2]) {\n    const glyph_name = pieces[2].toUpperCase();\n    extraProps = Flow.keyProperties.customNoteHeads[glyph_name] || {};\n  }\n\n  return {\n    key: k,\n    octave,\n    line,\n    int_value,\n    accidental: value.accidental,\n    code,\n    stroke,\n    shift_right,\n    displaced: false,\n    ...extraProps\n  };\n};\n\nFlow.keyProperties.note_values = {\n  'C': {\n    index: 0,\n    int_val: 0,\n    accidental: null\n  },\n  'CN': {\n    index: 0,\n    int_val: 0,\n    accidental: 'n'\n  },\n  'C#': {\n    index: 0,\n    int_val: 1,\n    accidental: '#'\n  },\n  'C##': {\n    index: 0,\n    int_val: 2,\n    accidental: '##'\n  },\n  'CB': {\n    index: 0,\n    int_val: -1,\n    accidental: 'b'\n  },\n  'CBB': {\n    index: 0,\n    int_val: -2,\n    accidental: 'bb'\n  },\n  'D': {\n    index: 1,\n    int_val: 2,\n    accidental: null\n  },\n  'DN': {\n    index: 1,\n    int_val: 2,\n    accidental: 'n'\n  },\n  'D#': {\n    index: 1,\n    int_val: 3,\n    accidental: '#'\n  },\n  'D##': {\n    index: 1,\n    int_val: 4,\n    accidental: '##'\n  },\n  'DB': {\n    index: 1,\n    int_val: 1,\n    accidental: 'b'\n  },\n  'DBB': {\n    index: 1,\n    int_val: 0,\n    accidental: 'bb'\n  },\n  'E': {\n    index: 2,\n    int_val: 4,\n    accidental: null\n  },\n  'EN': {\n    index: 2,\n    int_val: 4,\n    accidental: 'n'\n  },\n  'E#': {\n    index: 2,\n    int_val: 5,\n    accidental: '#'\n  },\n  'E##': {\n    index: 2,\n    int_val: 6,\n    accidental: '##'\n  },\n  'EB': {\n    index: 2,\n    int_val: 3,\n    accidental: 'b'\n  },\n  'EBB': {\n    index: 2,\n    int_val: 2,\n    accidental: 'bb'\n  },\n  'F': {\n    index: 3,\n    int_val: 5,\n    accidental: null\n  },\n  'FN': {\n    index: 3,\n    int_val: 5,\n    accidental: 'n'\n  },\n  'F#': {\n    index: 3,\n    int_val: 6,\n    accidental: '#'\n  },\n  'F##': {\n    index: 3,\n    int_val: 7,\n    accidental: '##'\n  },\n  'FB': {\n    index: 3,\n    int_val: 4,\n    accidental: 'b'\n  },\n  'FBB': {\n    index: 3,\n    int_val: 3,\n    accidental: 'bb'\n  },\n  'G': {\n    index: 4,\n    int_val: 7,\n    accidental: null\n  },\n  'GN': {\n    index: 4,\n    int_val: 7,\n    accidental: 'n'\n  },\n  'G#': {\n    index: 4,\n    int_val: 8,\n    accidental: '#'\n  },\n  'G##': {\n    index: 4,\n    int_val: 9,\n    accidental: '##'\n  },\n  'GB': {\n    index: 4,\n    int_val: 6,\n    accidental: 'b'\n  },\n  'GBB': {\n    index: 4,\n    int_val: 5,\n    accidental: 'bb'\n  },\n  'A': {\n    index: 5,\n    int_val: 9,\n    accidental: null\n  },\n  'AN': {\n    index: 5,\n    int_val: 9,\n    accidental: 'n'\n  },\n  'A#': {\n    index: 5,\n    int_val: 10,\n    accidental: '#'\n  },\n  'A##': {\n    index: 5,\n    int_val: 11,\n    accidental: '##'\n  },\n  'AB': {\n    index: 5,\n    int_val: 8,\n    accidental: 'b'\n  },\n  'ABB': {\n    index: 5,\n    int_val: 7,\n    accidental: 'bb'\n  },\n  'B': {\n    index: 6,\n    int_val: 11,\n    accidental: null\n  },\n  'BN': {\n    index: 6,\n    int_val: 11,\n    accidental: 'n'\n  },\n  'B#': {\n    index: 6,\n    int_val: 12,\n    accidental: '#'\n  },\n  'B##': {\n    index: 6,\n    int_val: 13,\n    accidental: '##'\n  },\n  'BB': {\n    index: 6,\n    int_val: 10,\n    accidental: 'b'\n  },\n  'BBB': {\n    index: 6,\n    int_val: 9,\n    accidental: 'bb'\n  },\n  'R': {\n    index: 6,\n    int_val: 9,\n    rest: true\n  },\n  // Rest\n  'X': {\n    index: 6,\n    accidental: '',\n    octave: 4,\n    code: 'noteheadXBlack',\n    shift_right: 5.5\n  }\n};\n\nFlow.integerToNote = integer => {\n  if (typeof integer === 'undefined') {\n    throw new Vex.RERR('BadArguments', 'Undefined integer for integerToNote');\n  }\n\n  if (integer < -2) {\n    throw new Vex.RERR('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n  }\n\n  const noteValue = Flow.integerToNote.table[integer];\n\n  if (!noteValue) {\n    throw new Vex.RERR('BadArguments', `Unknown note value for integer: ${integer}`);\n  }\n\n  return noteValue;\n};\n\nFlow.integerToNote.table = {\n  0: 'C',\n  1: 'C#',\n  2: 'D',\n  3: 'D#',\n  4: 'E',\n  5: 'F',\n  6: 'F#',\n  7: 'G',\n  8: 'G#',\n  9: 'A',\n  10: 'A#',\n  11: 'B'\n};\n\nFlow.tabToGlyph = (fret, scale = 1.0) => {\n  let glyph = null;\n  let width = 0;\n  let shift_y = 0;\n\n  if (fret.toString().toUpperCase() === 'X') {\n    const glyphMetrics = new Glyph('accidentalDoubleSharp', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n    glyph = 'accidentalDoubleSharp';\n    width = glyphMetrics.width;\n    shift_y = -glyphMetrics.height / 2;\n  } else {\n    width = Flow.textWidth(fret.toString());\n  }\n\n  return {\n    text: fret,\n    code: glyph,\n    getWidth: () => width * scale,\n    shift_y\n  };\n};\n\nFlow.textWidth = text => 7 * text.toString().length;\n\nFlow.articulationCodes = artic => Flow.articulationCodes.articulations[artic];\n\nFlow.articulationCodes.articulations = {\n  'a.': {\n    code: 'augmentationDot',\n    between_lines: true\n  },\n  // Staccato\n  'av': {\n    aboveCode: 'articStaccatissimoAbove',\n    belowCode: 'articStaccatissimoBelow',\n    between_lines: true\n  },\n  // Staccatissimo\n  'a>': {\n    aboveCode: 'articAccentAbove',\n    belowCode: 'articAccentBelow',\n    between_lines: true\n  },\n  // Accent\n  'a-': {\n    aboveCode: 'articTenutoAbove',\n    belowCode: 'articTenutoBelow',\n    between_lines: true\n  },\n  // Tenuto\n  'a^': {\n    aboveCode: 'articMarcatoAbove',\n    belowCode: 'articMarcatoBelow',\n    between_lines: false\n  },\n  // Marcato\n  'a+': {\n    code: 'pluckedLeftHandPizzicato',\n    between_lines: false\n  },\n  // Left hand pizzicato\n  'ao': {\n    aboveCode: 'pluckedSnapPizzicatoAbove',\n    belowCode: 'pluckedSnapPizzicatoBelow',\n    between_lines: false\n  },\n  // Snap pizzicato\n  'ah': {\n    code: 'stringsHarmonic',\n    between_lines: false\n  },\n  // Natural harmonic or open note\n  'a@': {\n    aboveCode: 'fermataAbove',\n    belowCode: 'fermataBelow',\n    between_lines: false\n  },\n  // Fermata\n  'a@a': {\n    code: 'fermataAbove',\n    between_lines: false\n  },\n  // Fermata above staff\n  'a@u': {\n    code: 'fermataBelow',\n    between_lines: false\n  },\n  // Fermata below staff\n  'a|': {\n    code: 'stringsUpBow',\n    between_lines: false\n  },\n  // Bow up - up stroke\n  'am': {\n    code: 'stringsDownBow',\n    between_lines: false\n  },\n  // Bow down - down stroke\n  'a,': {\n    code: 'pictChokeCymbal',\n    between_lines: false\n  } // Choked\n\n};\n\nFlow.accidentalCodes = acc => Flow.accidentalCodes.accidentals[acc];\n\nFlow.accidentalCodes.accidentals = {\n  '#': {\n    code: 'accidentalSharp',\n    parenRightPaddingAdjustment: -1\n  },\n  '##': {\n    code: 'accidentalDoubleSharp',\n    parenRightPaddingAdjustment: -1\n  },\n  'b': {\n    code: 'accidentalFlat',\n    parenRightPaddingAdjustment: -2\n  },\n  'bb': {\n    code: 'accidentalDoubleFlat',\n    parenRightPaddingAdjustment: -2\n  },\n  'n': {\n    code: 'accidentalNatural',\n    parenRightPaddingAdjustment: -1\n  },\n  '{': {\n    code: 'accidentalParensLeft',\n    parenRightPaddingAdjustment: -1\n  },\n  '}': {\n    code: 'accidentalParensRight',\n    parenRightPaddingAdjustment: -1\n  },\n  'db': {\n    code: 'accidentalThreeQuarterTonesFlatZimmermann',\n    parenRightPaddingAdjustment: -1\n  },\n  'd': {\n    code: 'accidentalQuarterToneFlatStein',\n    parenRightPaddingAdjustment: 0\n  },\n  '++': {\n    code: 'accidentalThreeQuarterTonesSharpStein',\n    parenRightPaddingAdjustment: -1\n  },\n  '+': {\n    code: 'accidentalQuarterToneSharpStein',\n    parenRightPaddingAdjustment: -1\n  },\n  '+-': {\n    code: 'accidentalKucukMucennebSharp',\n    parenRightPaddingAdjustment: -1\n  },\n  'bs': {\n    code: 'accidentalBakiyeFlat',\n    parenRightPaddingAdjustment: -1\n  },\n  'bss': {\n    code: 'accidentalBuyukMucennebFlat',\n    parenRightPaddingAdjustment: -1\n  },\n  'o': {\n    code: 'accidentalSori',\n    parenRightPaddingAdjustment: -1\n  },\n  'k': {\n    code: 'accidentalKoron',\n    parenRightPaddingAdjustment: -1\n  },\n  'bbs': {\n    code: 'vexAccidentalMicrotonal1',\n    parenRightPaddingAdjustment: -1\n  },\n  '++-': {\n    code: 'vexAccidentalMicrotonal2',\n    parenRightPaddingAdjustment: -1\n  },\n  'ashs': {\n    code: 'vexAccidentalMicrotonal3',\n    parenRightPaddingAdjustment: -1\n  },\n  'afhf': {\n    code: 'vexAccidentalMicrotonal4',\n    parenRightPaddingAdjustment: -1\n  }\n};\nFlow.accidentalColumnsTable = {\n  1: {\n    a: [1],\n    b: [1]\n  },\n  2: {\n    a: [1, 2]\n  },\n  3: {\n    a: [1, 3, 2],\n    b: [1, 2, 1],\n    second_on_bottom: [1, 2, 3]\n  },\n  4: {\n    a: [1, 3, 4, 2],\n    b: [1, 2, 3, 1],\n    spaced_out_tetrachord: [1, 2, 1, 2]\n  },\n  5: {\n    a: [1, 3, 5, 4, 2],\n    b: [1, 2, 4, 3, 1],\n    spaced_out_pentachord: [1, 2, 3, 2, 1],\n    very_spaced_out_pentachord: [1, 2, 1, 2, 1]\n  },\n  6: {\n    a: [1, 3, 5, 6, 4, 2],\n    b: [1, 2, 4, 5, 3, 1],\n    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2]\n  }\n};\n\nFlow.ornamentCodes = acc => Flow.ornamentCodes.ornaments[acc];\n\nFlow.ornamentCodes.ornaments = {\n  'mordent': {\n    code: 'ornamentShortTrill'\n  },\n  'mordent_inverted': {\n    code: 'ornamentMordent'\n  },\n  'turn': {\n    code: 'ornamentTurn'\n  },\n  'turn_inverted': {\n    code: 'ornamentTurnSlash'\n  },\n  'tr': {\n    code: 'ornamentTrill'\n  },\n  'upprall': {\n    code: 'ornamentPrecompSlideTrillDAnglebert'\n  },\n  'downprall': {\n    code: 'ornamentPrecompDoubleCadenceUpperPrefix'\n  },\n  'prallup': {\n    code: 'ornamentPrecompTrillSuffixDandrieu'\n  },\n  'pralldown': {\n    code: 'ornamentPrecompTrillLowerSuffix'\n  },\n  'upmordent': {\n    code: 'ornamentPrecompSlideTrillBach'\n  },\n  'downmordent': {\n    code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn'\n  },\n  'lineprall': {\n    code: 'ornamentPrecompAppoggTrill'\n  },\n  'prallprall': {\n    code: 'ornamentTremblement'\n  }\n};\n\nFlow.keySignature = spec => {\n  const keySpec = Flow.keySignature.keySpecs[spec];\n\n  if (!keySpec) {\n    throw new Vex.RERR('BadKeySignature', `Bad key signature spec: '${spec}'`);\n  }\n\n  if (!keySpec.acc) {\n    return [];\n  }\n\n  const notes = Flow.keySignature.accidentalList(keySpec.acc);\n  const acc_list = [];\n\n  for (let i = 0; i < keySpec.num; ++i) {\n    const line = notes[i];\n    acc_list.push({\n      type: keySpec.acc,\n      line\n    });\n  }\n\n  return acc_list;\n};\n\nFlow.keySignature.keySpecs = {\n  'C': {\n    acc: null,\n    num: 0\n  },\n  'Am': {\n    acc: null,\n    num: 0\n  },\n  'F': {\n    acc: 'b',\n    num: 1\n  },\n  'Dm': {\n    acc: 'b',\n    num: 1\n  },\n  'Bb': {\n    acc: 'b',\n    num: 2\n  },\n  'Gm': {\n    acc: 'b',\n    num: 2\n  },\n  'Eb': {\n    acc: 'b',\n    num: 3\n  },\n  'Cm': {\n    acc: 'b',\n    num: 3\n  },\n  'Ab': {\n    acc: 'b',\n    num: 4\n  },\n  'Fm': {\n    acc: 'b',\n    num: 4\n  },\n  'Db': {\n    acc: 'b',\n    num: 5\n  },\n  'Bbm': {\n    acc: 'b',\n    num: 5\n  },\n  'Gb': {\n    acc: 'b',\n    num: 6\n  },\n  'Ebm': {\n    acc: 'b',\n    num: 6\n  },\n  'Cb': {\n    acc: 'b',\n    num: 7\n  },\n  'Abm': {\n    acc: 'b',\n    num: 7\n  },\n  'G': {\n    acc: '#',\n    num: 1\n  },\n  'Em': {\n    acc: '#',\n    num: 1\n  },\n  'D': {\n    acc: '#',\n    num: 2\n  },\n  'Bm': {\n    acc: '#',\n    num: 2\n  },\n  'A': {\n    acc: '#',\n    num: 3\n  },\n  'F#m': {\n    acc: '#',\n    num: 3\n  },\n  'E': {\n    acc: '#',\n    num: 4\n  },\n  'C#m': {\n    acc: '#',\n    num: 4\n  },\n  'B': {\n    acc: '#',\n    num: 5\n  },\n  'G#m': {\n    acc: '#',\n    num: 5\n  },\n  'F#': {\n    acc: '#',\n    num: 6\n  },\n  'D#m': {\n    acc: '#',\n    num: 6\n  },\n  'C#': {\n    acc: '#',\n    num: 7\n  },\n  'A#m': {\n    acc: '#',\n    num: 7\n  }\n};\nFlow.unicode = {\n  // Unicode accidentals\n  'sharp': String.fromCharCode(parseInt('266F', 16)),\n  'flat': String.fromCharCode(parseInt('266D', 16)),\n  'natural': String.fromCharCode(parseInt('266E', 16)),\n  // Major Chord\n  'triangle': String.fromCharCode(parseInt('25B3', 16)),\n  // half-diminished\n  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),\n  // Diminished\n  'degrees': String.fromCharCode(parseInt('00B0', 16)),\n  'circle': String.fromCharCode(parseInt('25CB', 16))\n};\n\nFlow.keySignature.accidentalList = acc => {\n  const patterns = {\n    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2]\n  };\n  return patterns[acc];\n}; // Used to convert duration aliases to the number based duration.\n// If the input isn't an alias, simply return the input.\n//\n// example: 'q' -> '4', '8' -> '8'\n\n\nFlow.sanitizeDuration = duration => {\n  const alias = Flow.durationAliases[duration];\n\n  if (alias !== undefined) {\n    duration = alias;\n  }\n\n  if (Flow.durationToTicks.durations[duration] === undefined) {\n    throw new Vex.RERR('BadArguments', `The provided duration is not valid: ${duration}`);\n  }\n\n  return duration;\n}; // Convert the `duration` to an fraction\n\n\nFlow.durationToFraction = duration => new Fraction().parse(Flow.sanitizeDuration(duration)); // Convert the `duration` to an number\n\n\nFlow.durationToNumber = duration => Flow.durationToFraction(duration).value(); // Convert the `duration` to total ticks\n\n\nFlow.durationToTicks = duration => {\n  duration = Flow.sanitizeDuration(duration);\n  const ticks = Flow.durationToTicks.durations[duration];\n\n  if (ticks === undefined) {\n    return null;\n  }\n\n  return ticks;\n};\n\nFlow.durationToTicks.durations = {\n  '1/2': Flow.RESOLUTION * 2,\n  '1': Flow.RESOLUTION / 1,\n  '2': Flow.RESOLUTION / 2,\n  '4': Flow.RESOLUTION / 4,\n  '8': Flow.RESOLUTION / 8,\n  '16': Flow.RESOLUTION / 16,\n  '32': Flow.RESOLUTION / 32,\n  '64': Flow.RESOLUTION / 64,\n  '128': Flow.RESOLUTION / 128,\n  '256': Flow.RESOLUTION / 256\n};\nFlow.durationAliases = {\n  'w': '1',\n  'h': '2',\n  'q': '4',\n  // This is the default duration used to render bars (BarNote). Bars no longer\n  // consume ticks, so this should be a no-op.\n  //\n  // TODO(0xfe): This needs to be cleaned up.\n  'b': '256'\n}; // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n\nFlow.getGlyphProps = (duration, type) => {\n  duration = Flow.sanitizeDuration(duration);\n  type = type || 'n'; // default type is a regular note\n  // Lookup duration for default glyph head code\n\n  const code = Flow.getGlyphProps.duration_codes[duration];\n\n  if (code === undefined) {\n    return null;\n  } // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n\n\n  let glyphTypeProperties = code.type[type]; // If this isn't a standard type, then lookup the custom note head map.\n\n  if (glyphTypeProperties === undefined) {\n    // Try and get it from the custom list of note heads\n    const customGlyphTypeProperties = Flow.keyProperties.customNoteHeads[type.toUpperCase()]; // If not, then return with nothing\n\n    if (customGlyphTypeProperties === undefined) {\n      return null;\n    } // Otherwise set it as the code_head value\n\n\n    glyphTypeProperties = {\n      code_head: customGlyphTypeProperties.code,\n      ...customGlyphTypeProperties\n    };\n  } // Merge duration props for 'duration' with the note head properties.\n\n\n  return { ...code.common,\n    ...glyphTypeProperties\n  };\n};\n\nFlow.getGlyphProps.validTypes = {\n  'n': {\n    name: 'note'\n  },\n  'r': {\n    name: 'rest'\n  },\n  'h': {\n    name: 'harmonic'\n  },\n  'm': {\n    name: 'muted'\n  },\n  's': {\n    name: 'slash'\n  }\n}; // Custom note heads\n\nFlow.keyProperties.customNoteHeads = {\n  /* Diamond */\n  'D0': {\n    code: 'noteheadDiamondWhole'\n  },\n  'D1': {\n    code: 'noteheadDiamondHalf'\n  },\n  'D2': {\n    code: 'noteheadDiamondBlack'\n  },\n  'D3': {\n    code: 'noteheadDiamondBlack'\n  },\n\n  /* Triangle */\n  'T0': {\n    code: 'noteheadTriangleUpWhole'\n  },\n  'T1': {\n    code: 'noteheadTriangleUpHalf'\n  },\n  'T2': {\n    code: 'noteheadTriangleUpBlack'\n  },\n  'T3': {\n    code: 'noteheadTriangleUpBlack'\n  },\n\n  /* Cross */\n  'X0': {\n    code: 'noteheadXWhole'\n  },\n  'X1': {\n    code: 'noteheadXHalf'\n  },\n  'X2': {\n    code: 'noteheadXBlack'\n  },\n  'X3': {\n    code: 'noteheadCircleX'\n  },\n\n  /* Square */\n  'S1': {\n    code: 'noteheadSquareWhite'\n  },\n  'S2': {\n    code: 'noteheadSquareBlack'\n  },\n\n  /* Rectangle */\n  'R1': {\n    code: 'vexNoteHeadRectWhite'\n  },\n  // no smufl code\n  'R2': {\n    code: 'vexNoteHeadRectBlack'\n  } // no smufl code\n\n};\nFlow.getGlyphProps.duration_codes = {\n  '1/2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v53', scale).getMetrics().width;\n      },\n\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Breve note\n        code_head: 'noteheadDoubleWhole'\n      },\n      'h': {\n        // Breve note harmonic\n        code_head: 'unpitchedPercussionClef1'\n      },\n      'm': {\n        // Breve note muted -\n        code_head: 'vexNoteHeadMutedBreve',\n        stem_offset: 0\n      },\n      'r': {\n        // Breve rest\n        code_head: 'restDoubleWhole',\n        rest: true,\n        position: 'B/5',\n        dot_shiftY: 0.5\n      },\n      's': {\n        // Breve note slash -\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '1': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v1d', scale).getMetrics().width;\n      },\n\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Whole note\n        code_head: 'noteheadWhole'\n      },\n      'h': {\n        // Whole note harmonic\n        code_head: 'noteheadDiamondWhole'\n      },\n      'm': {\n        // Whole note muted\n        code_head: 'noteheadXWhole',\n        stem_offset: -3\n      },\n      'r': {\n        // Whole rest\n        code_head: 'restWhole',\n        rest: true,\n        position: 'D/5',\n        dot_shiftY: 0.5\n      },\n      's': {\n        // Whole note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadHalf', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Half note\n        code_head: 'noteheadHalf'\n      },\n      'h': {\n        // Half note harmonic\n        code_head: 'noteheadDiamondHalf'\n      },\n      'm': {\n        // Half note muted\n        code_head: 'noteheadXHalf',\n        stem_offset: -3\n      },\n      'r': {\n        // Half rest\n        code_head: 'restHalf',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5\n      },\n      's': {\n        // Half note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '4': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Quarter note\n        code_head: 'noteheadBlack'\n      },\n      'h': {\n        // Quarter harmonic\n        code_head: 'noteheadDiamondBlack'\n      },\n      'm': {\n        // Quarter muted\n        code_head: 'noteheadXBlack'\n      },\n      'r': {\n        // Quarter rest\n        code_head: 'restQuarter',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.5,\n        line_below: 1.5\n      },\n      's': {\n        // Quarter slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '8': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      beam_count: 1,\n      code_flag_upstem: 'flag8thUp',\n      code_flag_downstem: 'flag8thDown',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Eighth note\n        code_head: 'noteheadBlack'\n      },\n      'h': {\n        // Eighth note harmonic\n        code_head: 'noteheadDiamondBlack'\n      },\n      'm': {\n        // Eighth note muted\n        code_head: 'noteheadXBlack'\n      },\n      'r': {\n        // Eighth rest\n        code_head: 'rest8th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 1.0\n      },\n      's': {\n        // Eight slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '16': {\n    common: {\n      beam_count: 2,\n\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag16thUp',\n      code_flag_downstem: 'flag16thDown',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Sixteenth note\n        code_head: 'noteheadBlack'\n      },\n      'h': {\n        // Sixteenth note harmonic\n        code_head: 'noteheadDiamondBlack'\n      },\n      'm': {\n        // Sixteenth note muted\n        code_head: 'noteheadXBlack'\n      },\n      'r': {\n        // Sixteenth rest\n        code_head: 'rest16th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 2.0\n      },\n      's': {\n        // Sixteenth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '32': {\n    common: {\n      beam_count: 3,\n\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag32ndUp',\n      code_flag_downstem: 'flag32ndDown',\n      stem_up_extension: 9,\n      stem_down_extension: 9,\n      tabnote_stem_up_extension: 8,\n      tabnote_stem_down_extension: 5,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Thirty-second note\n        code_head: 'noteheadBlack'\n      },\n      'h': {\n        // Thirty-second harmonic\n        code_head: 'noteheadDiamondBlack'\n      },\n      'm': {\n        // Thirty-second muted\n        code_head: 'noteheadXBlack'\n      },\n      'r': {\n        // Thirty-second rest\n        code_head: 'rest32nd',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 2.0\n      },\n      's': {\n        // Thirty-second slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '64': {\n    common: {\n      beam_count: 4,\n\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag64thUp',\n      code_flag_downstem: 'flag64thDown',\n      stem_up_extension: 13,\n      stem_down_extension: 13,\n      tabnote_stem_up_extension: 12,\n      tabnote_stem_down_extension: 9,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Sixty-fourth note\n        code_head: 'noteheadBlack'\n      },\n      'h': {\n        // Sixty-fourth harmonic\n        code_head: 'noteheadDiamondBlack'\n      },\n      'm': {\n        // Sixty-fourth muted\n        code_head: 'noteheadXBlack'\n      },\n      'r': {\n        // Sixty-fourth rest\n        code_head: 'rest64th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 3.0\n      },\n      's': {\n        // Sixty-fourth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  },\n  '128': {\n    common: {\n      beam_count: 5,\n\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag128thUp',\n      code_flag_downstem: 'flag128thDown',\n      stem_up_extension: 22,\n      stem_down_extension: 22,\n      tabnote_stem_up_extension: 21,\n      tabnote_stem_down_extension: 18,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      'n': {\n        // Hundred-twenty-eight note\n        code_head: 'noteheadBlack'\n      },\n      'h': {\n        // Hundred-twenty-eight harmonic\n        code_head: 'noteheadDiamondBlack'\n      },\n      'm': {\n        // Hundred-twenty-eight muted\n        code_head: 'noteheadXBlack'\n      },\n      'r': {\n        // Hundred-twenty-eight rest\n        code_head: 'rest128th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: 1.5,\n        line_above: 3.0,\n        line_below: 3.0\n      },\n      's': {\n        // Hundred-twenty-eight rest\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4'\n      }\n    }\n  }\n}; // Some defaults\n\nFlow.TIME4_4 = {\n  num_beats: 4,\n  beat_value: 4,\n  resolution: Flow.RESOLUTION\n};\nexport { Flow };","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/tables.js"],"names":["Vex","Fraction","Glyph","DefaultFontStack","Flow","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","RESOLUTION","DEFAULT_FONT_STACK","DEFAULT_NOTATION_FONT_SCALE","DEFAULT_TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","TEXT_HEIGHT_OFFSET_HACK","IsKerned","clefProperties","clef","RERR","props","values","line_shift","keyProperties","key","params","undefined","options","octave_shift","Merge","pieces","split","length","k","toUpperCase","value","note_values","octave","parseInt","base_index","line","index","stroke","int_value","int_val","code","shift_right","extraProps","glyph_name","customNoteHeads","accidental","displaced","rest","integerToNote","integer","noteValue","table","tabToGlyph","fret","scale","glyph","width","shift_y","toString","glyphMetrics","getMetrics","height","textWidth","text","getWidth","articulationCodes","artic","articulations","between_lines","aboveCode","belowCode","accidentalCodes","acc","accidentals","parenRightPaddingAdjustment","accidentalColumnsTable","a","b","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","ornamentCodes","ornaments","keySignature","spec","keySpec","keySpecs","notes","accidentalList","acc_list","i","num","push","type","unicode","String","fromCharCode","patterns","sanitizeDuration","duration","alias","durationAliases","durationToTicks","durations","durationToFraction","parse","durationToNumber","ticks","getGlyphProps","duration_codes","glyphTypeProperties","customGlyphTypeProperties","code_head","common","validTypes","name","stem","stem_offset","flag","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","position","beam_count","code_flag_upstem","code_flag_downstem","TIME4_4","num_beats","beat_value","resolution"],"mappings":"AAAA;;AAEA;AAEA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,UAAU,EAAE,GADD;AAEXC,EAAAA,WAAW,EAAE,EAFF;AAGXC,EAAAA,oBAAoB,EAAE,CAHX;AAIXC,EAAAA,UAAU,EAAE,KAJD;AAMXC,EAAAA,kBAAkB,EAAEN,gBANT;AAOXO,EAAAA,2BAA2B,EAAE,EAPlB;AAQXC,EAAAA,4BAA4B,EAAE,EARnB;AASXC,EAAAA,oBAAoB,EAAE,EATX;AAWX;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,uBAAuB,EAAE,CAlBd;;AAoBX;AACAC,EAAAA,QAAQ,EAAE;AArBC,CAAb;;AAyBAV,IAAI,CAACW,cAAL,GAAsBC,IAAI,IAAI;AAC5B,MAAI,CAACA,IAAL,EAAW,MAAM,IAAIhB,GAAG,CAACiB,IAAR,CAAa,aAAb,EAA4B,mBAAmBD,IAA/C,CAAN;AAEX,QAAME,KAAK,GAAGd,IAAI,CAACW,cAAL,CAAoBI,MAApB,CAA2BH,IAA3B,CAAd;AACA,MAAI,CAACE,KAAL,EAAY,MAAM,IAAIlB,GAAG,CAACiB,IAAR,CAAa,aAAb,EAA4B,mBAAmBD,IAA/C,CAAN;AAEZ,SAAOE,KAAP;AACD,CAPD;;AASAd,IAAI,CAACW,cAAL,CAAoBI,MAApB,GAA6B;AAC3B,YAAU;AAAEC,IAAAA,UAAU,EAAE;AAAd,GADiB;AAE3B,UAAQ;AAAEA,IAAAA,UAAU,EAAE;AAAd,GAFmB;AAG3B,WAAS;AAAEA,IAAAA,UAAU,EAAE;AAAd,GAHkB;AAI3B,UAAQ;AAAEA,IAAAA,UAAU,EAAE;AAAd,GAJmB;AAK3B,aAAW;AAAEA,IAAAA,UAAU,EAAE;AAAd,GALgB;AAM3B,gBAAc;AAAEA,IAAAA,UAAU,EAAE;AAAd,GANa;AAO3B,mBAAiB;AAAEA,IAAAA,UAAU,EAAE;AAAd,GAPU;AAQ3B,gBAAc;AAAEA,IAAAA,UAAU,EAAE;AAAd,GARa;AAS3B,gBAAc;AAAEA,IAAAA,UAAU,EAAE;AAAd,GATa;AAU3B,aAAW;AAAEA,IAAAA,UAAU,EAAE;AAAd,GAVgB;AAW3B,YAAU;AAAEA,IAAAA,UAAU,EAAE,CAAC;AAAf;AAXiB,CAA7B;AAcA;;;;;;;AAMAhB,IAAI,CAACiB,aAAL,GAAqB,CAACC,GAAD,EAAMN,IAAN,EAAYO,MAAZ,KAAuB;AAC1C,MAAIP,IAAI,KAAKQ,SAAb,EAAwB;AACtBR,IAAAA,IAAI,GAAG,QAAP;AACD;;AAED,QAAMS,OAAO,GAAG;AAAEC,IAAAA,YAAY,EAAE;AAAhB,GAAhB;;AAEA,MAAI,OAAOH,MAAP,KAAkB,QAAtB,EAAgC;AAC9BvB,IAAAA,GAAG,CAAC2B,KAAJ,CAAUF,OAAV,EAAmBF,MAAnB;AACD;;AAED,QAAMK,MAAM,GAAGN,GAAG,CAACO,KAAJ,CAAU,GAAV,CAAf;;AAEA,MAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAM,IAAI9B,GAAG,CAACiB,IAAR,CAAa,cAAb,EAA8B,sDAAqDK,GAAI,EAAvF,CAAN;AACD;;AAED,QAAMS,CAAC,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUI,WAAV,EAAV;AACA,QAAMC,KAAK,GAAG7B,IAAI,CAACiB,aAAL,CAAmBa,WAAnB,CAA+BH,CAA/B,CAAd;AACA,MAAI,CAACE,KAAL,EAAY,MAAM,IAAIjC,GAAG,CAACiB,IAAR,CAAa,cAAb,EAA6B,uBAAuBc,CAApD,CAAN;AACZ,MAAIE,KAAK,CAACE,MAAV,EAAkBP,MAAM,CAAC,CAAD,CAAN,GAAYK,KAAK,CAACE,MAAlB;AAElB,MAAIA,MAAM,GAAGC,QAAQ,CAACR,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAArB,CAtB0C,CAwB1C;;AACAO,EAAAA,MAAM,IAAI,CAAC,CAAD,GAAKV,OAAO,CAACC,YAAvB;AAEA,QAAMW,UAAU,GAAIF,MAAM,GAAG,CAAV,GAAgB,IAAI,CAAvC;AACA,MAAIG,IAAI,GAAG,CAACD,UAAU,GAAGJ,KAAK,CAACM,KAApB,IAA6B,CAAxC;AACAD,EAAAA,IAAI,IAAIlC,IAAI,CAACW,cAAL,CAAoBC,IAApB,EAA0BI,UAAlC;AAEA,MAAIoB,MAAM,GAAG,CAAb;AAEA,MAAIF,IAAI,IAAI,CAAR,IAAgBA,IAAI,GAAG,CAAR,GAAa,CAAd,KAAqB,CAAvC,EAA2CE,MAAM,GAAG,CAAT,CAjCD,CAiCc;;AACxD,MAAIF,IAAI,IAAI,CAAR,IAAgBA,IAAI,GAAG,CAAR,GAAa,CAAd,KAAqB,CAAvC,EAA2CE,MAAM,GAAG,CAAC,CAAV,CAlCD,CAkCc;AAExD;;AACA,QAAMC,SAAS,GAAG,OAAQR,KAAK,CAACS,OAAd,KAA2B,WAA3B,GACbP,MAAM,GAAG,EAAV,GAAgBF,KAAK,CAACS,OADR,GAEd,IAFJ;AAIA;;AACA,QAAMC,IAAI,GAAGV,KAAK,CAACU,IAAnB;AACA,QAAMC,WAAW,GAAGX,KAAK,CAACW,WAA1B;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAIjB,MAAM,CAACE,MAAP,GAAgB,CAAhB,IAAqBF,MAAM,CAAC,CAAD,CAA/B,EAAoC;AAClC,UAAMkB,UAAU,GAAGlB,MAAM,CAAC,CAAD,CAAN,CAAUI,WAAV,EAAnB;AACAa,IAAAA,UAAU,GAAGzC,IAAI,CAACiB,aAAL,CAAmB0B,eAAnB,CAAmCD,UAAnC,KAAkD,EAA/D;AACD;;AAED,SAAO;AACLxB,IAAAA,GAAG,EAAES,CADA;AAELI,IAAAA,MAFK;AAGLG,IAAAA,IAHK;AAILG,IAAAA,SAJK;AAKLO,IAAAA,UAAU,EAAEf,KAAK,CAACe,UALb;AAMLL,IAAAA,IANK;AAOLH,IAAAA,MAPK;AAQLI,IAAAA,WARK;AASLK,IAAAA,SAAS,EAAE,KATN;AAUL,OAAGJ;AAVE,GAAP;AAYD,CA9DD;;AAgEAzC,IAAI,CAACiB,aAAL,CAAmBa,WAAnB,GAAiC;AAC/B,OAAK;AAAEK,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAD0B;AAE/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAFyB;AAG/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAHyB;AAI/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAJwB;AAK/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAAC,CAAtB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GALyB;AAM/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAAC,CAAtB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GANwB;AAO/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAP0B;AAQ/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GARyB;AAS/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GATyB;AAU/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAVwB;AAW/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAXyB;AAY/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAZwB;AAa/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAb0B;AAc/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAdyB;AAe/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAfyB;AAgB/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAhBwB;AAiB/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAjByB;AAkB/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAlBwB;AAmB/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAnB0B;AAoB/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GApByB;AAqB/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GArByB;AAsB/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAtBwB;AAuB/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAvByB;AAwB/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAxBwB;AAyB/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAzB0B;AA0B/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA1ByB;AA2B/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA3ByB;AA4B/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA5BwB;AA6B/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA7ByB;AA8B/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA9BwB;AA+B/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA/B0B;AAgC/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAhCyB;AAiC/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GAjCyB;AAkC/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GAlCwB;AAmC/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GAnCyB;AAoC/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GApCwB;AAqC/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GArC0B;AAsC/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GAtCyB;AAuC/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GAvCyB;AAwC/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GAxCwB;AAyC/B,QAAM;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,EAArB;AAAyBM,IAAAA,UAAU,EAAE;AAArC,GAzCyB;AA0C/B,SAAO;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBM,IAAAA,UAAU,EAAE;AAApC,GA1CwB;AA2C/B,OAAK;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYG,IAAAA,OAAO,EAAE,CAArB;AAAwBQ,IAAAA,IAAI,EAAE;AAA9B,GA3C0B;AA2CY;AAC3C,OAAK;AACHX,IAAAA,KAAK,EAAE,CADJ;AAEHS,IAAAA,UAAU,EAAE,EAFT;AAGHb,IAAAA,MAAM,EAAE,CAHL;AAIHQ,IAAAA,IAAI,EAAE,gBAJH;AAKHC,IAAAA,WAAW,EAAE;AALV;AA5C0B,CAAjC;;AAsDAxC,IAAI,CAAC+C,aAAL,GAAqBC,OAAO,IAAI;AAC9B,MAAI,OAAQA,OAAR,KAAqB,WAAzB,EAAsC;AACpC,UAAM,IAAIpD,GAAG,CAACiB,IAAR,CAAa,cAAb,EAA6B,qCAA7B,CAAN;AACD;;AAED,MAAImC,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,UAAM,IAAIpD,GAAG,CAACiB,IAAR,CAAa,cAAb,EAA8B,wCAAuCmC,OAAQ,EAA7E,CAAN;AACD;;AAED,QAAMC,SAAS,GAAGjD,IAAI,CAAC+C,aAAL,CAAmBG,KAAnB,CAAyBF,OAAzB,CAAlB;;AACA,MAAI,CAACC,SAAL,EAAgB;AACd,UAAM,IAAIrD,GAAG,CAACiB,IAAR,CAAa,cAAb,EAA8B,mCAAkCmC,OAAQ,EAAxE,CAAN;AACD;;AAED,SAAOC,SAAP;AACD,CAfD;;AAiBAjD,IAAI,CAAC+C,aAAL,CAAmBG,KAAnB,GAA2B;AACzB,KAAG,GADsB;AAEzB,KAAG,IAFsB;AAGzB,KAAG,GAHsB;AAIzB,KAAG,IAJsB;AAKzB,KAAG,GALsB;AAMzB,KAAG,GANsB;AAOzB,KAAG,IAPsB;AAQzB,KAAG,GARsB;AASzB,KAAG,IATsB;AAUzB,KAAG,GAVsB;AAWzB,MAAI,IAXqB;AAYzB,MAAI;AAZqB,CAA3B;;AAeAlD,IAAI,CAACmD,UAAL,GAAkB,CAACC,IAAD,EAAOC,KAAK,GAAG,GAAf,KAAuB;AACvC,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,OAAO,GAAG,CAAd;;AAEA,MAAIJ,IAAI,CAACK,QAAL,GAAgB7B,WAAhB,OAAkC,GAAtC,EAA2C;AACzC,UAAM8B,YAAY,GAAG,IAAI5D,KAAJ,CAAU,uBAAV,EAAmCE,IAAI,CAACO,4BAAxC,EAAsEoD,UAAtE,EAArB;AACAL,IAAAA,KAAK,GAAG,uBAAR;AACAC,IAAAA,KAAK,GAAGG,YAAY,CAACH,KAArB;AACAC,IAAAA,OAAO,GAAG,CAACE,YAAY,CAACE,MAAd,GAAuB,CAAjC;AACD,GALD,MAKO;AACLL,IAAAA,KAAK,GAAGvD,IAAI,CAAC6D,SAAL,CAAeT,IAAI,CAACK,QAAL,EAAf,CAAR;AACD;;AAED,SAAO;AACLK,IAAAA,IAAI,EAAEV,IADD;AAELb,IAAAA,IAAI,EAAEe,KAFD;AAGLS,IAAAA,QAAQ,EAAE,MAAMR,KAAK,GAAGF,KAHnB;AAILG,IAAAA;AAJK,GAAP;AAMD,CApBD;;AAsBAxD,IAAI,CAAC6D,SAAL,GAAiBC,IAAI,IAAI,IAAIA,IAAI,CAACL,QAAL,GAAgB/B,MAA7C;;AAEA1B,IAAI,CAACgE,iBAAL,GAAyBC,KAAK,IAAIjE,IAAI,CAACgE,iBAAL,CAAuBE,aAAvB,CAAqCD,KAArC,CAAlC;;AAEAjE,IAAI,CAACgE,iBAAL,CAAuBE,aAAvB,GAAuC;AACrC,QAAM;AAAE3B,IAAAA,IAAI,EAAE,iBAAR;AAA2B4B,IAAAA,aAAa,EAAE;AAA1C,GAD+B;AACmB;AACxD,QAAM;AACJC,IAAAA,SAAS,EAAE,yBADP;AAEJC,IAAAA,SAAS,EAAE,yBAFP;AAGJF,IAAAA,aAAa,EAAE;AAHX,GAF+B;AAMlC;AACH,QAAM;AACJC,IAAAA,SAAS,EAAE,kBADP;AAEJC,IAAAA,SAAS,EAAE,kBAFP;AAGJF,IAAAA,aAAa,EAAE;AAHX,GAP+B;AAWlC;AACH,QAAM;AACJC,IAAAA,SAAS,EAAE,kBADP;AAEJC,IAAAA,SAAS,EAAE,kBAFP;AAGJF,IAAAA,aAAa,EAAE;AAHX,GAZ+B;AAgBlC;AACH,QAAM;AACJC,IAAAA,SAAS,EAAE,mBADP;AAEJC,IAAAA,SAAS,EAAE,mBAFP;AAGJF,IAAAA,aAAa,EAAE;AAHX,GAjB+B;AAqBlC;AACH,QAAM;AAAE5B,IAAAA,IAAI,EAAE,0BAAR;AAAoC4B,IAAAA,aAAa,EAAE;AAAnD,GAtB+B;AAsB6B;AAClE,QAAM;AACJC,IAAAA,SAAS,EAAE,2BADP;AAEJC,IAAAA,SAAS,EAAE,2BAFP;AAGJF,IAAAA,aAAa,EAAE;AAHX,GAvB+B;AA2BlC;AACH,QAAM;AAAE5B,IAAAA,IAAI,EAAE,iBAAR;AAA2B4B,IAAAA,aAAa,EAAE;AAA1C,GA5B+B;AA4BoB;AACzD,QAAM;AAAEC,IAAAA,SAAS,EAAE,cAAb;AAA6BC,IAAAA,SAAS,EAAE,cAAxC;AAAwDF,IAAAA,aAAa,EAAE;AAAvE,GA7B+B;AA6BiD;AACtF,SAAO;AAAE5B,IAAAA,IAAI,EAAE,cAAR;AAAwB4B,IAAAA,aAAa,EAAE;AAAvC,GA9B8B;AA8BkB;AACvD,SAAO;AAAE5B,IAAAA,IAAI,EAAE,cAAR;AAAwB4B,IAAAA,aAAa,EAAE;AAAvC,GA/B8B;AA+BkB;AACvD,QAAM;AAAE5B,IAAAA,IAAI,EAAE,cAAR;AAAwB4B,IAAAA,aAAa,EAAE;AAAvC,GAhC+B;AAgCiB;AACtD,QAAM;AAAE5B,IAAAA,IAAI,EAAE,gBAAR;AAA0B4B,IAAAA,aAAa,EAAE;AAAzC,GAjC+B;AAiCmB;AACxD,QAAM;AAAE5B,IAAAA,IAAI,EAAE,iBAAR;AAA2B4B,IAAAA,aAAa,EAAE;AAA1C,GAlC+B,CAkCoB;;AAlCpB,CAAvC;;AAqCAnE,IAAI,CAACsE,eAAL,GAAuBC,GAAG,IAAIvE,IAAI,CAACsE,eAAL,CAAqBE,WAArB,CAAiCD,GAAjC,CAA9B;;AAEAvE,IAAI,CAACsE,eAAL,CAAqBE,WAArB,GAAmC;AACjC,OAAK;AAAEjC,IAAAA,IAAI,EAAE,iBAAR;AAA2BkC,IAAAA,2BAA2B,EAAE,CAAC;AAAzD,GAD4B;AAEjC,QAAM;AAAElC,IAAAA,IAAI,EAAE,uBAAR;AAAiCkC,IAAAA,2BAA2B,EAAE,CAAC;AAA/D,GAF2B;AAGjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,gBAAR;AAA0BkC,IAAAA,2BAA2B,EAAE,CAAC;AAAxD,GAH4B;AAIjC,QAAM;AAAElC,IAAAA,IAAI,EAAE,sBAAR;AAAgCkC,IAAAA,2BAA2B,EAAE,CAAC;AAA9D,GAJ2B;AAKjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,mBAAR;AAA6BkC,IAAAA,2BAA2B,EAAE,CAAC;AAA3D,GAL4B;AAMjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,sBAAR;AAAgCkC,IAAAA,2BAA2B,EAAE,CAAC;AAA9D,GAN4B;AAOjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,uBAAR;AAAiCkC,IAAAA,2BAA2B,EAAE,CAAC;AAA/D,GAP4B;AAQjC,QAAM;AAAElC,IAAAA,IAAI,EAAE,2CAAR;AAAqDkC,IAAAA,2BAA2B,EAAE,CAAC;AAAnF,GAR2B;AASjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,gCAAR;AAA0CkC,IAAAA,2BAA2B,EAAE;AAAvE,GAT4B;AAUjC,QAAM;AAAElC,IAAAA,IAAI,EAAE,uCAAR;AAAiDkC,IAAAA,2BAA2B,EAAE,CAAC;AAA/E,GAV2B;AAWjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,iCAAR;AAA2CkC,IAAAA,2BAA2B,EAAE,CAAC;AAAzE,GAX4B;AAYjC,QAAM;AAAElC,IAAAA,IAAI,EAAE,8BAAR;AAAwCkC,IAAAA,2BAA2B,EAAE,CAAC;AAAtE,GAZ2B;AAajC,QAAM;AAAElC,IAAAA,IAAI,EAAE,sBAAR;AAAgCkC,IAAAA,2BAA2B,EAAE,CAAC;AAA9D,GAb2B;AAcjC,SAAO;AAAElC,IAAAA,IAAI,EAAE,6BAAR;AAAuCkC,IAAAA,2BAA2B,EAAE,CAAC;AAArE,GAd0B;AAejC,OAAK;AAAElC,IAAAA,IAAI,EAAE,gBAAR;AAA0BkC,IAAAA,2BAA2B,EAAE,CAAC;AAAxD,GAf4B;AAgBjC,OAAK;AAAElC,IAAAA,IAAI,EAAE,iBAAR;AAA2BkC,IAAAA,2BAA2B,EAAE,CAAC;AAAzD,GAhB4B;AAiBjC,SAAO;AAAElC,IAAAA,IAAI,EAAE,0BAAR;AAAoCkC,IAAAA,2BAA2B,EAAE,CAAC;AAAlE,GAjB0B;AAkBjC,SAAO;AAAElC,IAAAA,IAAI,EAAE,0BAAR;AAAoCkC,IAAAA,2BAA2B,EAAE,CAAC;AAAlE,GAlB0B;AAmBjC,UAAQ;AAAElC,IAAAA,IAAI,EAAE,0BAAR;AAAoCkC,IAAAA,2BAA2B,EAAE,CAAC;AAAlE,GAnByB;AAoBjC,UAAQ;AAAElC,IAAAA,IAAI,EAAE,0BAAR;AAAoCkC,IAAAA,2BAA2B,EAAE,CAAC;AAAlE;AApByB,CAAnC;AAuBAzE,IAAI,CAAC0E,sBAAL,GAA8B;AAC5B,KAAG;AACDC,IAAAA,CAAC,EAAE,CAAC,CAAD,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,CAAD;AAFF,GADyB;AAK5B,KAAG;AACDD,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ;AADF,GALyB;AAQ5B,KAAG;AACDA,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFF;AAGDC,IAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAHjB,GARyB;AAa5B,KAAG;AACDF,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFF;AAGDE,IAAAA,qBAAqB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAHtB,GAbyB;AAkB5B,KAAG;AACDH,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFF;AAGDG,IAAAA,qBAAqB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAHtB;AAIDC,IAAAA,0BAA0B,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AAJ3B,GAlByB;AAwB5B,KAAG;AACDL,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAFF;AAGDK,IAAAA,oBAAoB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAHrB;AAIDC,IAAAA,yBAAyB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB;AAJ1B;AAxByB,CAA9B;;AAgCAlF,IAAI,CAACmF,aAAL,GAAqBZ,GAAG,IAAIvE,IAAI,CAACmF,aAAL,CAAmBC,SAAnB,CAA6Bb,GAA7B,CAA5B;;AAEAvE,IAAI,CAACmF,aAAL,CAAmBC,SAAnB,GAA+B;AAC7B,aAAW;AAAE7C,IAAAA,IAAI,EAAE;AAAR,GADkB;AAE7B,sBAAoB;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFS;AAG7B,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHqB;AAI7B,mBAAiB;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAJY;AAK7B,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GALuB;AAM7B,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR,GANkB;AAO7B,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAPgB;AAQ7B,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR,GARkB;AAS7B,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GATgB;AAU7B,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAVgB;AAW7B,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAXc;AAY7B,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAZgB;AAa7B,gBAAc;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAbe,CAA/B;;AAgBAvC,IAAI,CAACqF,YAAL,GAAoBC,IAAI,IAAI;AAC1B,QAAMC,OAAO,GAAGvF,IAAI,CAACqF,YAAL,CAAkBG,QAAlB,CAA2BF,IAA3B,CAAhB;;AAEA,MAAI,CAACC,OAAL,EAAc;AACZ,UAAM,IAAI3F,GAAG,CAACiB,IAAR,CAAa,iBAAb,EAAiC,4BAA2ByE,IAAK,GAAjE,CAAN;AACD;;AAED,MAAI,CAACC,OAAO,CAAChB,GAAb,EAAkB;AAChB,WAAO,EAAP;AACD;;AAED,QAAMkB,KAAK,GAAGzF,IAAI,CAACqF,YAAL,CAAkBK,cAAlB,CAAiCH,OAAO,CAAChB,GAAzC,CAAd;AAEA,QAAMoB,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,GAA5B,EAAiC,EAAED,CAAnC,EAAsC;AACpC,UAAM1D,IAAI,GAAGuD,KAAK,CAACG,CAAD,CAAlB;AACAD,IAAAA,QAAQ,CAACG,IAAT,CAAc;AAAEC,MAAAA,IAAI,EAAER,OAAO,CAAChB,GAAhB;AAAqBrC,MAAAA;AAArB,KAAd;AACD;;AAED,SAAOyD,QAAP;AACD,CApBD;;AAsBA3F,IAAI,CAACqF,YAAL,CAAkBG,QAAlB,GAA6B;AAC3B,OAAK;AAAEjB,IAAAA,GAAG,EAAE,IAAP;AAAasB,IAAAA,GAAG,EAAE;AAAlB,GADsB;AAE3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,IAAP;AAAasB,IAAAA,GAAG,EAAE;AAAlB,GAFqB;AAG3B,OAAK;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAHsB;AAI3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAJqB;AAK3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GALqB;AAM3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GANqB;AAO3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAPqB;AAQ3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GARqB;AAS3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GATqB;AAU3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAVqB;AAW3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAXqB;AAY3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAZoB;AAa3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAbqB;AAc3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAdoB;AAe3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAfqB;AAgB3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAhBoB;AAiB3B,OAAK;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAjBsB;AAkB3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAlBqB;AAmB3B,OAAK;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAnBsB;AAoB3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GApBqB;AAqB3B,OAAK;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GArBsB;AAsB3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAtBoB;AAuB3B,OAAK;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAvBsB;AAwB3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAxBoB;AAyB3B,OAAK;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GAzBsB;AA0B3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GA1BoB;AA2B3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GA3BqB;AA4B3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GA5BoB;AA6B3B,QAAM;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB,GA7BqB;AA8B3B,SAAO;AAAEtB,IAAAA,GAAG,EAAE,GAAP;AAAYsB,IAAAA,GAAG,EAAE;AAAjB;AA9BoB,CAA7B;AAiCA7F,IAAI,CAACgG,OAAL,GAAe;AACb;AACA,WAASC,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B,CAFI;AAGb,UAAQiE,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B,CAHK;AAIb,aAAWiE,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B,CAJE;AAKb;AACA,cAAYiE,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B,CANC;AAOb;AACA,kBAAgBiE,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B,CARH;AASb;AACA,aAAWiE,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B,CAVE;AAWb,YAAUiE,MAAM,CAACC,YAAP,CAAoBlE,QAAQ,CAAC,MAAD,EAAS,EAAT,CAA5B;AAXG,CAAf;;AAcAhC,IAAI,CAACqF,YAAL,CAAkBK,cAAlB,GAAoCnB,GAAD,IAAS;AAC1C,QAAM4B,QAAQ,GAAG;AACf,SAAK,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,CAAd,EAAiB,CAAjB,EAAoB,GAApB,EAAyB,GAAzB,CADU;AAEf,SAAK,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAC,GAAV,EAAe,CAAf,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,CAA5B;AAFU,GAAjB;AAKA,SAAOA,QAAQ,CAAC5B,GAAD,CAAf;AACD,CAPD,C,CAUA;AACA;AACA;AACA;;;AACAvE,IAAI,CAACoG,gBAAL,GAAwBC,QAAQ,IAAI;AAClC,QAAMC,KAAK,GAAGtG,IAAI,CAACuG,eAAL,CAAqBF,QAArB,CAAd;;AACA,MAAIC,KAAK,KAAKlF,SAAd,EAAyB;AACvBiF,IAAAA,QAAQ,GAAGC,KAAX;AACD;;AAED,MAAItG,IAAI,CAACwG,eAAL,CAAqBC,SAArB,CAA+BJ,QAA/B,MAA6CjF,SAAjD,EAA4D;AAC1D,UAAM,IAAIxB,GAAG,CAACiB,IAAR,CAAa,cAAb,EAA8B,uCAAsCwF,QAAS,EAA7E,CAAN;AACD;;AAED,SAAOA,QAAP;AACD,CAXD,C,CAaA;;;AACArG,IAAI,CAAC0G,kBAAL,GAA0BL,QAAQ,IAAI,IAAIxG,QAAJ,GAAe8G,KAAf,CAAqB3G,IAAI,CAACoG,gBAAL,CAAsBC,QAAtB,CAArB,CAAtC,C,CAEA;;;AACArG,IAAI,CAAC4G,gBAAL,GAAwBP,QAAQ,IAAIrG,IAAI,CAAC0G,kBAAL,CAAwBL,QAAxB,EAAkCxE,KAAlC,EAApC,C,CAEA;;;AACA7B,IAAI,CAACwG,eAAL,GAAuBH,QAAQ,IAAI;AACjCA,EAAAA,QAAQ,GAAGrG,IAAI,CAACoG,gBAAL,CAAsBC,QAAtB,CAAX;AAEA,QAAMQ,KAAK,GAAG7G,IAAI,CAACwG,eAAL,CAAqBC,SAArB,CAA+BJ,QAA/B,CAAd;;AACA,MAAIQ,KAAK,KAAKzF,SAAd,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,SAAOyF,KAAP;AACD,CATD;;AAWA7G,IAAI,CAACwG,eAAL,CAAqBC,SAArB,GAAiC;AAC/B,SAAOzG,IAAI,CAACI,UAAL,GAAkB,CADM;AAE/B,OAAKJ,IAAI,CAACI,UAAL,GAAkB,CAFQ;AAG/B,OAAKJ,IAAI,CAACI,UAAL,GAAkB,CAHQ;AAI/B,OAAKJ,IAAI,CAACI,UAAL,GAAkB,CAJQ;AAK/B,OAAKJ,IAAI,CAACI,UAAL,GAAkB,CALQ;AAM/B,QAAMJ,IAAI,CAACI,UAAL,GAAkB,EANO;AAO/B,QAAMJ,IAAI,CAACI,UAAL,GAAkB,EAPO;AAQ/B,QAAMJ,IAAI,CAACI,UAAL,GAAkB,EARO;AAS/B,SAAOJ,IAAI,CAACI,UAAL,GAAkB,GATM;AAU/B,SAAOJ,IAAI,CAACI,UAAL,GAAkB;AAVM,CAAjC;AAaAJ,IAAI,CAACuG,eAAL,GAAuB;AACrB,OAAK,GADgB;AAErB,OAAK,GAFgB;AAGrB,OAAK,GAHgB;AAKrB;AACA;AACA;AACA;AACA,OAAK;AATgB,CAAvB,C,CAYA;;AACAvG,IAAI,CAAC8G,aAAL,GAAqB,CAACT,QAAD,EAAWN,IAAX,KAAoB;AACvCM,EAAAA,QAAQ,GAAGrG,IAAI,CAACoG,gBAAL,CAAsBC,QAAtB,CAAX;AACAN,EAAAA,IAAI,GAAGA,IAAI,IAAI,GAAf,CAFuC,CAEnB;AAEpB;;AACA,QAAMxD,IAAI,GAAGvC,IAAI,CAAC8G,aAAL,CAAmBC,cAAnB,CAAkCV,QAAlC,CAAb;;AACA,MAAI9D,IAAI,KAAKnB,SAAb,EAAwB;AAAE,WAAO,IAAP;AAAc,GAND,CAQvC;;;AACA,MAAI4F,mBAAmB,GAAGzE,IAAI,CAACwD,IAAL,CAAUA,IAAV,CAA1B,CATuC,CAWvC;;AACA,MAAIiB,mBAAmB,KAAK5F,SAA5B,EAAuC;AACrC;AACA,UAAM6F,yBAAyB,GAAGjH,IAAI,CAACiB,aAAL,CAAmB0B,eAAnB,CAAmCoD,IAAI,CAACnE,WAAL,EAAnC,CAAlC,CAFqC,CAIrC;;AACA,QAAIqF,yBAAyB,KAAK7F,SAAlC,EAA6C;AAAE,aAAO,IAAP;AAAc,KALxB,CAOrC;;;AACA4F,IAAAA,mBAAmB,GAAG;AACpBE,MAAAA,SAAS,EAAED,yBAAyB,CAAC1E,IADjB;AAEpB,SAAG0E;AAFiB,KAAtB;AAID,GAxBsC,CA0BvC;;;AACA,SAAO,EAAE,GAAG1E,IAAI,CAAC4E,MAAV;AAAkB,OAAGH;AAArB,GAAP;AACD,CA5BD;;AA8BAhH,IAAI,CAAC8G,aAAL,CAAmBM,UAAnB,GAAgC;AAC9B,OAAK;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADyB;AAE9B,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFyB;AAG9B,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHyB;AAI9B,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAJyB;AAK9B,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR;AALyB,CAAhC,C,CAQA;;AACArH,IAAI,CAACiB,aAAL,CAAmB0B,eAAnB,GAAqC;AACnC;AACA,QAAM;AAAEJ,IAAAA,IAAI,EAAE;AAAR,GAF6B;AAGnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAH6B;AAInC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAJ6B;AAKnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAL6B;;AAOnC;AACA,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAR6B;AASnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAT6B;AAUnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAV6B;AAWnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAX6B;;AAanC;AACA,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAd6B;AAenC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAf6B;AAgBnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhB6B;AAiBnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjB6B;;AAmBnC;AACA,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GApB6B;AAqBnC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GArB6B;;AAuBnC;AACA,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAxB6B;AAwBK;AACxC,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAzB6B,CAyBK;;AAzBL,CAArC;AA4BAvC,IAAI,CAAC8G,aAAL,CAAmBC,cAAnB,GAAoC;AAClC,SAAO;AACLI,IAAAA,MAAM,EAAE;AACNpD,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,KAA5B,EAAmC7D,KAAnC,EAA0CM,UAA1C,GAAuDJ,KAA9D;AACD,OAHK;;AAIN+D,MAAAA,IAAI,EAAE,KAJA;AAKNC,MAAAA,WAAW,EAAE,CALP;AAMNC,MAAAA,IAAI,EAAE,KANA;AAONC,MAAAA,iBAAiB,EAAE,CAACzH,IAAI,CAACE,WAPnB;AAQNwH,MAAAA,mBAAmB,EAAE,CAAC1H,IAAI,CAACE,WARrB;AASNyH,MAAAA,yBAAyB,EAAE,CAAC3H,IAAI,CAACE,WAT3B;AAUN0H,MAAAA,2BAA2B,EAAE,CAAC5H,IAAI,CAACE,WAV7B;AAWN2H,MAAAA,UAAU,EAAE,CAXN;AAYNC,MAAAA,UAAU,EAAE,CAZN;AAaNC,MAAAA,UAAU,EAAE;AAbN,KADH;AAgBLhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,uBADR;AAEHK,QAAAA,WAAW,EAAE;AAFV,OAPD;AAWJ,WAAK;AAAE;AACLL,QAAAA,SAAS,EAAE,iBADR;AAEHpE,QAAAA,IAAI,EAAE,IAFH;AAGHkF,QAAAA,QAAQ,EAAE,KAHP;AAIHH,QAAAA,UAAU,EAAE;AAJT,OAXD;AAiBJ,WAAK;AAAE;AACL;AACA9D,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AAjBD;AAhBD,GAD2B;AAyClC,OAAK;AACHb,IAAAA,MAAM,EAAE;AACNpD,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,KAA5B,EAAmC7D,KAAnC,EAA0CM,UAA1C,GAAuDJ,KAA9D;AACD,OAHK;;AAIN+D,MAAAA,IAAI,EAAE,KAJA;AAKNC,MAAAA,WAAW,EAAE,CALP;AAMNC,MAAAA,IAAI,EAAE,KANA;AAONC,MAAAA,iBAAiB,EAAE,CAACzH,IAAI,CAACE,WAPnB;AAQNwH,MAAAA,mBAAmB,EAAE,CAAC1H,IAAI,CAACE,WARrB;AASNyH,MAAAA,yBAAyB,EAAE,CAAC3H,IAAI,CAACE,WAT3B;AAUN0H,MAAAA,2BAA2B,EAAE,CAAC5H,IAAI,CAACE,WAV7B;AAWN2H,MAAAA,UAAU,EAAE,CAXN;AAYNC,MAAAA,UAAU,EAAE,CAZN;AAaNC,MAAAA,UAAU,EAAE;AAbN,KADL;AAgBHhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,gBADR;AAEHK,QAAAA,WAAW,EAAE,CAAC;AAFX,OAPD;AAWJ,WAAK;AAAE;AACLL,QAAAA,SAAS,EAAE,WADR;AAEHpE,QAAAA,IAAI,EAAE,IAFH;AAGHkF,QAAAA,QAAQ,EAAE,KAHP;AAIHH,QAAAA,UAAU,EAAE;AAJT,OAXD;AAiBJ,WAAK;AAAE;AACL;AACA9D,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AAjBD;AAhBH,GAzC6B;AAiFlC,OAAK;AACHb,IAAAA,MAAM,EAAE;AACNpD,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,cAA5B,EAA4C7D,KAA5C,EAAmDM,UAAnD,GAAgEJ,KAAvE;AACD,OAHK;;AAIN+D,MAAAA,IAAI,EAAE,IAJA;AAKNC,MAAAA,WAAW,EAAE,CALP;AAMNC,MAAAA,IAAI,EAAE,KANA;AAONC,MAAAA,iBAAiB,EAAE,CAPb;AAQNC,MAAAA,mBAAmB,EAAE,CARf;AASNC,MAAAA,yBAAyB,EAAE,CATrB;AAUNC,MAAAA,2BAA2B,EAAE,CAVvB;AAWNC,MAAAA,UAAU,EAAE,CAXN;AAYNC,MAAAA,UAAU,EAAE,CAZN;AAaNC,MAAAA,UAAU,EAAE;AAbN,KADL;AAgBHhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,eADR;AAEHK,QAAAA,WAAW,EAAE,CAAC;AAFX,OAPD;AAWJ,WAAK;AAAE;AACLL,QAAAA,SAAS,EAAE,UADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHxE,QAAAA,IAAI,EAAE,IAHH;AAIHkF,QAAAA,QAAQ,EAAE,KAJP;AAKHH,QAAAA,UAAU,EAAE,CAAC;AALV,OAXD;AAkBJ,WAAK;AAAE;AACL;AACA9D,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AAlBD;AAhBH,GAjF6B;AA0HlC,OAAK;AACHb,IAAAA,MAAM,EAAE;AACNpD,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,eAA5B,EAA6C7D,KAA7C,EAAoDM,UAApD,GAAiEJ,KAAxE;AACD,OAHK;;AAIN+D,MAAAA,IAAI,EAAE,IAJA;AAKNC,MAAAA,WAAW,EAAE,CALP;AAMNC,MAAAA,IAAI,EAAE,KANA;AAONC,MAAAA,iBAAiB,EAAE,CAPb;AAQNC,MAAAA,mBAAmB,EAAE,CARf;AASNC,MAAAA,yBAAyB,EAAE,CATrB;AAUNC,MAAAA,2BAA2B,EAAE,CAVvB;AAWNC,MAAAA,UAAU,EAAE,CAXN;AAYNC,MAAAA,UAAU,EAAE,CAZN;AAaNC,MAAAA,UAAU,EAAE;AAbN,KADL;AAgBHhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAPD;AAUJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,aADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHxE,QAAAA,IAAI,EAAE,IAHH;AAIHkF,QAAAA,QAAQ,EAAE,KAJP;AAKHH,QAAAA,UAAU,EAAE,CAAC,GALV;AAMHC,QAAAA,UAAU,EAAE,GANT;AAOHC,QAAAA,UAAU,EAAE;AAPT,OAVD;AAmBJ,WAAK;AAAE;AACL;AACAhE,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AAnBD;AAhBH,GA1H6B;AAoKlC,OAAK;AACHb,IAAAA,MAAM,EAAE;AACNpD,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,eAA5B,EAA6C7D,KAA7C,EAAoDM,UAApD,GAAiEJ,KAAxE;AACD,OAHK;;AAIN+D,MAAAA,IAAI,EAAE,IAJA;AAKNC,MAAAA,WAAW,EAAE,CALP;AAMNC,MAAAA,IAAI,EAAE,IANA;AAONS,MAAAA,UAAU,EAAE,CAPN;AAQNC,MAAAA,gBAAgB,EAAE,WARZ;AASNC,MAAAA,kBAAkB,EAAE,aATd;AAUNV,MAAAA,iBAAiB,EAAE,CAVb;AAWNC,MAAAA,mBAAmB,EAAE,CAXf;AAYNC,MAAAA,yBAAyB,EAAE,CAZrB;AAaNC,MAAAA,2BAA2B,EAAE,CAbvB;AAcNC,MAAAA,UAAU,EAAE,CAdN;AAeNC,MAAAA,UAAU,EAAE,CAfN;AAgBNC,MAAAA,UAAU,EAAE;AAhBN,KADL;AAmBHhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAPD;AAUJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,SADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHE,QAAAA,IAAI,EAAE,KAHH;AAIH1E,QAAAA,IAAI,EAAE,IAJH;AAKHkF,QAAAA,QAAQ,EAAE,KALP;AAMHH,QAAAA,UAAU,EAAE,CAAC,GANV;AAOHC,QAAAA,UAAU,EAAE,GAPT;AAQHC,QAAAA,UAAU,EAAE;AART,OAVD;AAoBJ,WAAK;AAAE;AACL;AACAhE,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AApBD;AAnBH,GApK6B;AAkNlC,QAAM;AACJb,IAAAA,MAAM,EAAE;AACNc,MAAAA,UAAU,EAAE,CADN;;AAENlE,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,eAA5B,EAA6C7D,KAA7C,EAAoDM,UAApD,GAAiEJ,KAAxE;AACD,OAJK;;AAKN+D,MAAAA,IAAI,EAAE,IALA;AAMNC,MAAAA,WAAW,EAAE,CANP;AAONC,MAAAA,IAAI,EAAE,IAPA;AAQNU,MAAAA,gBAAgB,EAAE,YARZ;AASNC,MAAAA,kBAAkB,EAAE,cATd;AAUNV,MAAAA,iBAAiB,EAAE,CAVb;AAWNC,MAAAA,mBAAmB,EAAE,CAXf;AAYNC,MAAAA,yBAAyB,EAAE,CAZrB;AAaNC,MAAAA,2BAA2B,EAAE,CAbvB;AAcNC,MAAAA,UAAU,EAAE,CAdN;AAeNC,MAAAA,UAAU,EAAE,CAfN;AAgBNC,MAAAA,UAAU,EAAE;AAhBN,KADJ;AAmBJhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAPD;AAUJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,UADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHE,QAAAA,IAAI,EAAE,KAHH;AAIH1E,QAAAA,IAAI,EAAE,IAJH;AAKHkF,QAAAA,QAAQ,EAAE,KALP;AAMHH,QAAAA,UAAU,EAAE,CAAC,GANV;AAOHC,QAAAA,UAAU,EAAE,GAPT;AAQHC,QAAAA,UAAU,EAAE;AART,OAVD;AAoBJ,WAAK;AAAE;AACL;AACAhE,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AApBD;AAnBF,GAlN4B;AAgQlC,QAAM;AACJb,IAAAA,MAAM,EAAE;AACNc,MAAAA,UAAU,EAAE,CADN;;AAENlE,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,eAA5B,EAA6C7D,KAA7C,EAAoDM,UAApD,GAAiEJ,KAAxE;AACD,OAJK;;AAKN+D,MAAAA,IAAI,EAAE,IALA;AAMNC,MAAAA,WAAW,EAAE,CANP;AAONC,MAAAA,IAAI,EAAE,IAPA;AAQNU,MAAAA,gBAAgB,EAAE,YARZ;AASNC,MAAAA,kBAAkB,EAAE,cATd;AAUNV,MAAAA,iBAAiB,EAAE,CAVb;AAWNC,MAAAA,mBAAmB,EAAE,CAXf;AAYNC,MAAAA,yBAAyB,EAAE,CAZrB;AAaNC,MAAAA,2BAA2B,EAAE,CAbvB;AAcNC,MAAAA,UAAU,EAAE,CAdN;AAeNC,MAAAA,UAAU,EAAE,CAfN;AAgBNC,MAAAA,UAAU,EAAE;AAhBN,KADJ;AAmBJhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAPD;AAUJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,UADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHE,QAAAA,IAAI,EAAE,KAHH;AAIH1E,QAAAA,IAAI,EAAE,IAJH;AAKHkF,QAAAA,QAAQ,EAAE,KALP;AAMHH,QAAAA,UAAU,EAAE,CAAC,GANV;AAOHC,QAAAA,UAAU,EAAE,GAPT;AAQHC,QAAAA,UAAU,EAAE;AART,OAVD;AAoBJ,WAAK;AAAE;AACL;AACAhE,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AApBD;AAnBF,GAhQ4B;AA8SlC,QAAM;AACJb,IAAAA,MAAM,EAAE;AACNc,MAAAA,UAAU,EAAE,CADN;;AAENlE,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,eAA5B,EAA6C7D,KAA7C,EAAoDM,UAApD,GAAiEJ,KAAxE;AACD,OAJK;;AAKN+D,MAAAA,IAAI,EAAE,IALA;AAMNC,MAAAA,WAAW,EAAE,CANP;AAONC,MAAAA,IAAI,EAAE,IAPA;AAQNU,MAAAA,gBAAgB,EAAE,YARZ;AASNC,MAAAA,kBAAkB,EAAE,cATd;AAUNV,MAAAA,iBAAiB,EAAE,EAVb;AAWNC,MAAAA,mBAAmB,EAAE,EAXf;AAYNC,MAAAA,yBAAyB,EAAE,EAZrB;AAaNC,MAAAA,2BAA2B,EAAE,CAbvB;AAcNC,MAAAA,UAAU,EAAE,CAdN;AAeNC,MAAAA,UAAU,EAAE,CAfN;AAgBNC,MAAAA,UAAU,EAAE;AAhBN,KADJ;AAmBJhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAE;AACLmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAPD;AAUJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE,UADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHE,QAAAA,IAAI,EAAE,KAHH;AAIH1E,QAAAA,IAAI,EAAE,IAJH;AAKHkF,QAAAA,QAAQ,EAAE,KALP;AAMHH,QAAAA,UAAU,EAAE,CAAC,GANV;AAOHC,QAAAA,UAAU,EAAE,GAPT;AAQHC,QAAAA,UAAU,EAAE;AART,OAVD;AAoBJ,WAAK;AAAE;AACL;AACAhE,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AApBD;AAnBF,GA9S4B;AA4VlC,SAAO;AACLb,IAAAA,MAAM,EAAE;AACNc,MAAAA,UAAU,EAAE,CADN;;AAENlE,MAAAA,QAAQ,CAACV,KAAK,GAAGrD,IAAI,CAACM,2BAAd,EAA2C;AACjD,eAAO,IAAIR,KAAJ,CAAU,KAAKoH,SAAL,IAAkB,eAA5B,EAA6C7D,KAA7C,EAAoDM,UAApD,GAAiEJ,KAAxE;AACD,OAJK;;AAKN+D,MAAAA,IAAI,EAAE,IALA;AAMNC,MAAAA,WAAW,EAAE,CANP;AAONC,MAAAA,IAAI,EAAE,IAPA;AAQNU,MAAAA,gBAAgB,EAAE,aARZ;AASNC,MAAAA,kBAAkB,EAAE,eATd;AAUNV,MAAAA,iBAAiB,EAAE,EAVb;AAWNC,MAAAA,mBAAmB,EAAE,EAXf;AAYNC,MAAAA,yBAAyB,EAAE,EAZrB;AAaNC,MAAAA,2BAA2B,EAAE,EAbvB;AAcNC,MAAAA,UAAU,EAAE,CAdN;AAeNC,MAAAA,UAAU,EAAE,CAfN;AAgBNC,MAAAA,UAAU,EAAE;AAhBN,KADH;AAmBLhC,IAAAA,IAAI,EAAE;AACJ,WAAK;AAAG;AACNmB,QAAAA,SAAS,EAAE;AADR,OADD;AAIJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAJD;AAOJ,WAAK;AAAE;AACLA,QAAAA,SAAS,EAAE;AADR,OAPD;AAUJ,WAAK;AAAG;AACNA,QAAAA,SAAS,EAAE,WADR;AAEHI,QAAAA,IAAI,EAAE,KAFH;AAGHE,QAAAA,IAAI,EAAE,KAHH;AAIH1E,QAAAA,IAAI,EAAE,IAJH;AAKHkF,QAAAA,QAAQ,EAAE,KALP;AAMHH,QAAAA,UAAU,EAAE,GANT;AAOHC,QAAAA,UAAU,EAAE,GAPT;AAQHC,QAAAA,UAAU,EAAE;AART,OAVD;AAoBJ,WAAK;AAAE;AACL;AACAhE,QAAAA,QAAQ,EAAE,MAAM/D,IAAI,CAACQ,oBAFlB;AAGHwH,QAAAA,QAAQ,EAAE;AAHP;AApBD;AAnBD;AA5V2B,CAApC,C,CA4YA;;AACAhI,IAAI,CAACoI,OAAL,GAAe;AACbC,EAAAA,SAAS,EAAE,CADE;AAEbC,EAAAA,UAAU,EAAE,CAFC;AAGbC,EAAAA,UAAU,EAAEvI,IAAI,CAACI;AAHJ,CAAf;AAKA,SAASJ,IAAT","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { DefaultFontStack } from './smufl';\n\nconst Flow = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: 16384,\n\n  DEFAULT_FONT_STACK: DefaultFontStack,\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n};\n\n\nFlow.clefProperties = clef => {\n  if (!clef) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  const props = Flow.clefProperties.values[clef];\n  if (!props) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  return props;\n};\n\nFlow.clefProperties.values = {\n  'treble': { line_shift: 0 },\n  'bass': { line_shift: 6 },\n  'tenor': { line_shift: 4 },\n  'alto': { line_shift: 3 },\n  'soprano': { line_shift: 1 },\n  'percussion': { line_shift: 0 },\n  'mezzo-soprano': { line_shift: 2 },\n  'baritone-c': { line_shift: 5 },\n  'baritone-f': { line_shift: 5 },\n  'subbass': { line_shift: 7 },\n  'french': { line_shift: -1 },\n};\n\n/*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n*/\nFlow.keyProperties = (key, clef, params) => {\n  if (clef === undefined) {\n    clef = 'treble';\n  }\n\n  const options = { octave_shift: 0 };\n\n  if (typeof params === 'object') {\n    Vex.Merge(options, params);\n  }\n\n  const pieces = key.split('/');\n\n  if (pieces.length < 2) {\n    throw new Vex.RERR('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n  }\n\n  const k = pieces[0].toUpperCase();\n  const value = Flow.keyProperties.note_values[k];\n  if (!value) throw new Vex.RERR('BadArguments', 'Invalid key name: ' + k);\n  if (value.octave) pieces[1] = value.octave;\n\n  let octave = parseInt(pieces[1], 10);\n\n  // Octave_shift is the shift to compensate for clef 8va/8vb.\n  octave += -1 * options.octave_shift;\n\n  const base_index = (octave * 7) - (4 * 7);\n  let line = (base_index + value.index) / 2;\n  line += Flow.clefProperties(clef).line_shift;\n\n  let stroke = 0;\n\n  if (line <= 0 && (((line * 2) % 2) === 0)) stroke = 1;  // stroke up\n  if (line >= 6 && (((line * 2) % 2) === 0)) stroke = -1; // stroke down\n\n  // Integer value for note arithmetic.\n  const int_value = typeof (value.int_val) !== 'undefined'\n    ? (octave * 12) + value.int_val\n    : null;\n\n  /* Check if the user specified a glyph. */\n  const code = value.code;\n  const shift_right = value.shift_right;\n  let extraProps = {};\n  if (pieces.length > 2 && pieces[2]) {\n    const glyph_name = pieces[2].toUpperCase();\n    extraProps = Flow.keyProperties.customNoteHeads[glyph_name] || {};\n  }\n\n  return {\n    key: k,\n    octave,\n    line,\n    int_value,\n    accidental: value.accidental,\n    code,\n    stroke,\n    shift_right,\n    displaced: false,\n    ...extraProps,\n  };\n};\n\nFlow.keyProperties.note_values = {\n  'C': { index: 0, int_val: 0, accidental: null },\n  'CN': { index: 0, int_val: 0, accidental: 'n' },\n  'C#': { index: 0, int_val: 1, accidental: '#' },\n  'C##': { index: 0, int_val: 2, accidental: '##' },\n  'CB': { index: 0, int_val: -1, accidental: 'b' },\n  'CBB': { index: 0, int_val: -2, accidental: 'bb' },\n  'D': { index: 1, int_val: 2, accidental: null },\n  'DN': { index: 1, int_val: 2, accidental: 'n' },\n  'D#': { index: 1, int_val: 3, accidental: '#' },\n  'D##': { index: 1, int_val: 4, accidental: '##' },\n  'DB': { index: 1, int_val: 1, accidental: 'b' },\n  'DBB': { index: 1, int_val: 0, accidental: 'bb' },\n  'E': { index: 2, int_val: 4, accidental: null },\n  'EN': { index: 2, int_val: 4, accidental: 'n' },\n  'E#': { index: 2, int_val: 5, accidental: '#' },\n  'E##': { index: 2, int_val: 6, accidental: '##' },\n  'EB': { index: 2, int_val: 3, accidental: 'b' },\n  'EBB': { index: 2, int_val: 2, accidental: 'bb' },\n  'F': { index: 3, int_val: 5, accidental: null },\n  'FN': { index: 3, int_val: 5, accidental: 'n' },\n  'F#': { index: 3, int_val: 6, accidental: '#' },\n  'F##': { index: 3, int_val: 7, accidental: '##' },\n  'FB': { index: 3, int_val: 4, accidental: 'b' },\n  'FBB': { index: 3, int_val: 3, accidental: 'bb' },\n  'G': { index: 4, int_val: 7, accidental: null },\n  'GN': { index: 4, int_val: 7, accidental: 'n' },\n  'G#': { index: 4, int_val: 8, accidental: '#' },\n  'G##': { index: 4, int_val: 9, accidental: '##' },\n  'GB': { index: 4, int_val: 6, accidental: 'b' },\n  'GBB': { index: 4, int_val: 5, accidental: 'bb' },\n  'A': { index: 5, int_val: 9, accidental: null },\n  'AN': { index: 5, int_val: 9, accidental: 'n' },\n  'A#': { index: 5, int_val: 10, accidental: '#' },\n  'A##': { index: 5, int_val: 11, accidental: '##' },\n  'AB': { index: 5, int_val: 8, accidental: 'b' },\n  'ABB': { index: 5, int_val: 7, accidental: 'bb' },\n  'B': { index: 6, int_val: 11, accidental: null },\n  'BN': { index: 6, int_val: 11, accidental: 'n' },\n  'B#': { index: 6, int_val: 12, accidental: '#' },\n  'B##': { index: 6, int_val: 13, accidental: '##' },\n  'BB': { index: 6, int_val: 10, accidental: 'b' },\n  'BBB': { index: 6, int_val: 9, accidental: 'bb' },\n  'R': { index: 6, int_val: 9, rest: true }, // Rest\n  'X': {\n    index: 6,\n    accidental: '',\n    octave: 4,\n    code: 'noteheadXBlack',\n    shift_right: 5.5,\n  },\n};\n\n\nFlow.integerToNote = integer => {\n  if (typeof (integer) === 'undefined') {\n    throw new Vex.RERR('BadArguments', 'Undefined integer for integerToNote');\n  }\n\n  if (integer < -2) {\n    throw new Vex.RERR('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n  }\n\n  const noteValue = Flow.integerToNote.table[integer];\n  if (!noteValue) {\n    throw new Vex.RERR('BadArguments', `Unknown note value for integer: ${integer}`);\n  }\n\n  return noteValue;\n};\n\nFlow.integerToNote.table = {\n  0: 'C',\n  1: 'C#',\n  2: 'D',\n  3: 'D#',\n  4: 'E',\n  5: 'F',\n  6: 'F#',\n  7: 'G',\n  8: 'G#',\n  9: 'A',\n  10: 'A#',\n  11: 'B',\n};\n\nFlow.tabToGlyph = (fret, scale = 1.0) => {\n  let glyph = null;\n  let width = 0;\n  let shift_y = 0;\n\n  if (fret.toString().toUpperCase() === 'X') {\n    const glyphMetrics = new Glyph('accidentalDoubleSharp', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n    glyph = 'accidentalDoubleSharp';\n    width = glyphMetrics.width;\n    shift_y = -glyphMetrics.height / 2;\n  } else {\n    width = Flow.textWidth(fret.toString());\n  }\n\n  return {\n    text: fret,\n    code: glyph,\n    getWidth: () => width * scale,\n    shift_y,\n  };\n};\n\nFlow.textWidth = text => 7 * text.toString().length;\n\nFlow.articulationCodes = artic => Flow.articulationCodes.articulations[artic];\n\nFlow.articulationCodes.articulations = {\n  'a.': { code: 'augmentationDot', between_lines: true }, // Staccato\n  'av': {\n    aboveCode: 'articStaccatissimoAbove',\n    belowCode: 'articStaccatissimoBelow',\n    between_lines: true\n  }, // Staccatissimo\n  'a>': {\n    aboveCode: 'articAccentAbove',\n    belowCode: 'articAccentBelow',\n    between_lines: true\n  }, // Accent\n  'a-': {\n    aboveCode: 'articTenutoAbove',\n    belowCode: 'articTenutoBelow',\n    between_lines: true\n  }, // Tenuto\n  'a^': {\n    aboveCode: 'articMarcatoAbove',\n    belowCode: 'articMarcatoBelow',\n    between_lines: false\n  }, // Marcato\n  'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false }, // Left hand pizzicato\n  'ao': {\n    aboveCode: 'pluckedSnapPizzicatoAbove',\n    belowCode: 'pluckedSnapPizzicatoBelow',\n    between_lines: false\n  }, // Snap pizzicato\n  'ah': { code: 'stringsHarmonic', between_lines: false }, // Natural harmonic or open note\n  'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false }, // Fermata\n  'a@a': { code: 'fermataAbove', between_lines: false }, // Fermata above staff\n  'a@u': { code: 'fermataBelow', between_lines: false }, // Fermata below staff\n  'a|': { code: 'stringsUpBow', between_lines: false }, // Bow up - up stroke\n  'am': { code: 'stringsDownBow', between_lines: false }, // Bow down - down stroke\n  'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n};\n\nFlow.accidentalCodes = acc => Flow.accidentalCodes.accidentals[acc];\n\nFlow.accidentalCodes.accidentals = {\n  '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n  'b': { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n  'bb': { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n  'n': { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n  'db': { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n  'd': { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n  '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n  'bs': { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n  'bss': { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n  'o': { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n  'k': { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n  'bbs': { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n  'ashs': { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n  'afhf': { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n};\n\nFlow.accidentalColumnsTable = {\n  1: {\n    a: [1],\n    b: [1],\n  },\n  2: {\n    a: [1, 2],\n  },\n  3: {\n    a: [1, 3, 2],\n    b: [1, 2, 1],\n    second_on_bottom: [1, 2, 3],\n  },\n  4: {\n    a: [1, 3, 4, 2],\n    b: [1, 2, 3, 1],\n    spaced_out_tetrachord: [1, 2, 1, 2],\n  },\n  5: {\n    a: [1, 3, 5, 4, 2],\n    b: [1, 2, 4, 3, 1],\n    spaced_out_pentachord: [1, 2, 3, 2, 1],\n    very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n  },\n  6: {\n    a: [1, 3, 5, 6, 4, 2],\n    b: [1, 2, 4, 5, 3, 1],\n    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n  },\n};\n\nFlow.ornamentCodes = acc => Flow.ornamentCodes.ornaments[acc];\n\nFlow.ornamentCodes.ornaments = {\n  'mordent': { code: 'ornamentShortTrill' },\n  'mordent_inverted': { code: 'ornamentMordent' },\n  'turn': { code: 'ornamentTurn' },\n  'turn_inverted': { code: 'ornamentTurnSlash' },\n  'tr': { code: 'ornamentTrill' },\n  'upprall': { code: 'ornamentPrecompSlideTrillDAnglebert' },\n  'downprall': { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n  'prallup': { code: 'ornamentPrecompTrillSuffixDandrieu' },\n  'pralldown': { code: 'ornamentPrecompTrillLowerSuffix' },\n  'upmordent': { code: 'ornamentPrecompSlideTrillBach' },\n  'downmordent': { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n  'lineprall': { code: 'ornamentPrecompAppoggTrill' },\n  'prallprall': { code: 'ornamentTremblement' },\n};\n\nFlow.keySignature = spec => {\n  const keySpec = Flow.keySignature.keySpecs[spec];\n\n  if (!keySpec) {\n    throw new Vex.RERR('BadKeySignature', `Bad key signature spec: '${spec}'`);\n  }\n\n  if (!keySpec.acc) {\n    return [];\n  }\n\n  const notes = Flow.keySignature.accidentalList(keySpec.acc);\n\n  const acc_list = [];\n  for (let i = 0; i < keySpec.num; ++i) {\n    const line = notes[i];\n    acc_list.push({ type: keySpec.acc, line });\n  }\n\n  return acc_list;\n};\n\nFlow.keySignature.keySpecs = {\n  'C': { acc: null, num: 0 },\n  'Am': { acc: null, num: 0 },\n  'F': { acc: 'b', num: 1 },\n  'Dm': { acc: 'b', num: 1 },\n  'Bb': { acc: 'b', num: 2 },\n  'Gm': { acc: 'b', num: 2 },\n  'Eb': { acc: 'b', num: 3 },\n  'Cm': { acc: 'b', num: 3 },\n  'Ab': { acc: 'b', num: 4 },\n  'Fm': { acc: 'b', num: 4 },\n  'Db': { acc: 'b', num: 5 },\n  'Bbm': { acc: 'b', num: 5 },\n  'Gb': { acc: 'b', num: 6 },\n  'Ebm': { acc: 'b', num: 6 },\n  'Cb': { acc: 'b', num: 7 },\n  'Abm': { acc: 'b', num: 7 },\n  'G': { acc: '#', num: 1 },\n  'Em': { acc: '#', num: 1 },\n  'D': { acc: '#', num: 2 },\n  'Bm': { acc: '#', num: 2 },\n  'A': { acc: '#', num: 3 },\n  'F#m': { acc: '#', num: 3 },\n  'E': { acc: '#', num: 4 },\n  'C#m': { acc: '#', num: 4 },\n  'B': { acc: '#', num: 5 },\n  'G#m': { acc: '#', num: 5 },\n  'F#': { acc: '#', num: 6 },\n  'D#m': { acc: '#', num: 6 },\n  'C#': { acc: '#', num: 7 },\n  'A#m': { acc: '#', num: 7 },\n};\n\nFlow.unicode = {\n  // Unicode accidentals\n  'sharp': String.fromCharCode(parseInt('266F', 16)),\n  'flat': String.fromCharCode(parseInt('266D', 16)),\n  'natural': String.fromCharCode(parseInt('266E', 16)),\n  // Major Chord\n  'triangle': String.fromCharCode(parseInt('25B3', 16)),\n  // half-diminished\n  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),\n  // Diminished\n  'degrees': String.fromCharCode(parseInt('00B0', 16)),\n  'circle': String.fromCharCode(parseInt('25CB', 16)),\n};\n\nFlow.keySignature.accidentalList = (acc) => {\n  const patterns = {\n    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n  };\n\n  return patterns[acc];\n};\n\n\n// Used to convert duration aliases to the number based duration.\n// If the input isn't an alias, simply return the input.\n//\n// example: 'q' -> '4', '8' -> '8'\nFlow.sanitizeDuration = duration => {\n  const alias = Flow.durationAliases[duration];\n  if (alias !== undefined) {\n    duration = alias;\n  }\n\n  if (Flow.durationToTicks.durations[duration] === undefined) {\n    throw new Vex.RERR('BadArguments', `The provided duration is not valid: ${duration}`);\n  }\n\n  return duration;\n};\n\n// Convert the `duration` to an fraction\nFlow.durationToFraction = duration => new Fraction().parse(Flow.sanitizeDuration(duration));\n\n// Convert the `duration` to an number\nFlow.durationToNumber = duration => Flow.durationToFraction(duration).value();\n\n// Convert the `duration` to total ticks\nFlow.durationToTicks = duration => {\n  duration = Flow.sanitizeDuration(duration);\n\n  const ticks = Flow.durationToTicks.durations[duration];\n  if (ticks === undefined) {\n    return null;\n  }\n\n  return ticks;\n};\n\nFlow.durationToTicks.durations = {\n  '1/2': Flow.RESOLUTION * 2,\n  '1': Flow.RESOLUTION / 1,\n  '2': Flow.RESOLUTION / 2,\n  '4': Flow.RESOLUTION / 4,\n  '8': Flow.RESOLUTION / 8,\n  '16': Flow.RESOLUTION / 16,\n  '32': Flow.RESOLUTION / 32,\n  '64': Flow.RESOLUTION / 64,\n  '128': Flow.RESOLUTION / 128,\n  '256': Flow.RESOLUTION / 256,\n};\n\nFlow.durationAliases = {\n  'w': '1',\n  'h': '2',\n  'q': '4',\n\n  // This is the default duration used to render bars (BarNote). Bars no longer\n  // consume ticks, so this should be a no-op.\n  //\n  // TODO(0xfe): This needs to be cleaned up.\n  'b': '256',\n};\n\n// Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\nFlow.getGlyphProps = (duration, type) => {\n  duration = Flow.sanitizeDuration(duration);\n  type = type || 'n'; // default type is a regular note\n\n  // Lookup duration for default glyph head code\n  const code = Flow.getGlyphProps.duration_codes[duration];\n  if (code === undefined) { return null; }\n\n  // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n  let glyphTypeProperties = code.type[type];\n\n  // If this isn't a standard type, then lookup the custom note head map.\n  if (glyphTypeProperties === undefined) {\n    // Try and get it from the custom list of note heads\n    const customGlyphTypeProperties = Flow.keyProperties.customNoteHeads[type.toUpperCase()];\n\n    // If not, then return with nothing\n    if (customGlyphTypeProperties === undefined) { return null; }\n\n    // Otherwise set it as the code_head value\n    glyphTypeProperties = {\n      code_head: customGlyphTypeProperties.code,\n      ...customGlyphTypeProperties,\n    };\n  }\n\n  // Merge duration props for 'duration' with the note head properties.\n  return { ...code.common, ...glyphTypeProperties };\n};\n\nFlow.getGlyphProps.validTypes = {\n  'n': { name: 'note' },\n  'r': { name: 'rest' },\n  'h': { name: 'harmonic' },\n  'm': { name: 'muted' },\n  's': { name: 'slash' },\n};\n\n// Custom note heads\nFlow.keyProperties.customNoteHeads = {\n  /* Diamond */\n  'D0': { code: 'noteheadDiamondWhole', },\n  'D1': { code: 'noteheadDiamondHalf' },\n  'D2': { code: 'noteheadDiamondBlack' },\n  'D3': { code: 'noteheadDiamondBlack' },\n\n  /* Triangle */\n  'T0': { code: 'noteheadTriangleUpWhole' },\n  'T1': { code: 'noteheadTriangleUpHalf' },\n  'T2': { code: 'noteheadTriangleUpBlack' },\n  'T3': { code: 'noteheadTriangleUpBlack' },\n\n  /* Cross */\n  'X0': { code: 'noteheadXWhole', },\n  'X1': { code: 'noteheadXHalf' },\n  'X2': { code: 'noteheadXBlack' },\n  'X3': { code: 'noteheadCircleX' },\n\n  /* Square */\n  'S1': { code: 'noteheadSquareWhite' },\n  'S2': { code: 'noteheadSquareBlack' },\n\n  /* Rectangle */\n  'R1': { code: 'vexNoteHeadRectWhite' }, // no smufl code\n  'R2': { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\n\nFlow.getGlyphProps.duration_codes = {\n  '1/2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v53', scale).getMetrics().width;\n      },\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Breve note\n        code_head: 'noteheadDoubleWhole',\n      },\n      'h': { // Breve note harmonic\n        code_head: 'unpitchedPercussionClef1',\n      },\n      'm': { // Breve note muted -\n        code_head: 'vexNoteHeadMutedBreve',\n        stem_offset: 0,\n      },\n      'r': { // Breve rest\n        code_head: 'restDoubleWhole',\n        rest: true,\n        position: 'B/5',\n        dot_shiftY: 0.5,\n      },\n      's': { // Breve note slash -\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '1': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v1d', scale).getMetrics().width;\n      },\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Whole note\n        code_head: 'noteheadWhole',\n      },\n      'h': { // Whole note harmonic\n        code_head: 'noteheadDiamondWhole',\n      },\n      'm': { // Whole note muted\n        code_head: 'noteheadXWhole',\n        stem_offset: -3,\n      },\n      'r': { // Whole rest\n        code_head: 'restWhole',\n        rest: true,\n        position: 'D/5',\n        dot_shiftY: 0.5,\n      },\n      's': { // Whole note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadHalf', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Half note\n        code_head: 'noteheadHalf',\n      },\n      'h': { // Half note harmonic\n        code_head: 'noteheadDiamondHalf',\n      },\n      'm': { // Half note muted\n        code_head: 'noteheadXHalf',\n        stem_offset: -3,\n      },\n      'r': { // Half rest\n        code_head: 'restHalf',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n      },\n      's': { // Half note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '4': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Quarter note\n        code_head: 'noteheadBlack',\n      },\n      'h': { // Quarter harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      'm': { // Quarter muted\n        code_head: 'noteheadXBlack',\n      },\n      'r': { // Quarter rest\n        code_head: 'restQuarter',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.5,\n        line_below: 1.5,\n      },\n      's': { // Quarter slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '8': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      beam_count: 1,\n      code_flag_upstem: 'flag8thUp',\n      code_flag_downstem: 'flag8thDown',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Eighth note\n        code_head: 'noteheadBlack',\n      },\n      'h': { // Eighth note harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      'm': { // Eighth note muted\n        code_head: 'noteheadXBlack',\n      },\n      'r': { // Eighth rest\n        code_head: 'rest8th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 1.0,\n      },\n      's': { // Eight slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '16': {\n    common: {\n      beam_count: 2,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag16thUp',\n      code_flag_downstem: 'flag16thDown',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Sixteenth note\n        code_head: 'noteheadBlack',\n      },\n      'h': { // Sixteenth note harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      'm': { // Sixteenth note muted\n        code_head: 'noteheadXBlack',\n      },\n      'r': { // Sixteenth rest\n        code_head: 'rest16th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 2.0,\n      },\n      's': { // Sixteenth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '32': {\n    common: {\n      beam_count: 3,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag32ndUp',\n      code_flag_downstem: 'flag32ndDown',\n      stem_up_extension: 9,\n      stem_down_extension: 9,\n      tabnote_stem_up_extension: 8,\n      tabnote_stem_down_extension: 5,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Thirty-second note\n        code_head: 'noteheadBlack',\n      },\n      'h': { // Thirty-second harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      'm': { // Thirty-second muted\n        code_head: 'noteheadXBlack',\n      },\n      'r': { // Thirty-second rest\n        code_head: 'rest32nd',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 2.0,\n      },\n      's': { // Thirty-second slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '64': {\n    common: {\n      beam_count: 4,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag64thUp',\n      code_flag_downstem: 'flag64thDown',\n      stem_up_extension: 13,\n      stem_down_extension: 13,\n      tabnote_stem_up_extension: 12,\n      tabnote_stem_down_extension: 9,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Sixty-fourth note\n        code_head: 'noteheadBlack',\n      },\n      'h': { // Sixty-fourth harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      'm': { // Sixty-fourth muted\n        code_head: 'noteheadXBlack',\n      },\n      'r': { // Sixty-fourth rest\n        code_head: 'rest64th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 3.0,\n      },\n      's': { // Sixty-fourth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '128': {\n    common: {\n      beam_count: 5,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'noteheadBlack', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'flag128thUp',\n      code_flag_downstem: 'flag128thDown',\n      stem_up_extension: 22,\n      stem_down_extension: 22,\n      tabnote_stem_up_extension: 21,\n      tabnote_stem_down_extension: 18,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': {  // Hundred-twenty-eight note\n        code_head: 'noteheadBlack',\n      },\n      'h': { // Hundred-twenty-eight harmonic\n        code_head: 'noteheadDiamondBlack',\n      },\n      'm': { // Hundred-twenty-eight muted\n        code_head: 'noteheadXBlack',\n      },\n      'r': {  // Hundred-twenty-eight rest\n        code_head: 'rest128th',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: 1.5,\n        line_above: 3.0,\n        line_below: 3.0,\n      },\n      's': { // Hundred-twenty-eight rest\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n};\n\n// Some defaults\nFlow.TIME4_4 = {\n  num_beats: 4,\n  beat_value: 4,\n  resolution: Flow.RESOLUTION,\n};\nexport { Flow };\n"]},"metadata":{},"sourceType":"module"}
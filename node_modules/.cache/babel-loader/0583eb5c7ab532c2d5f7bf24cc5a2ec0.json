{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of modifiers to notes (e.g. bends,\n// fingering positions etc.)\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato'; // To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n\nfunction L(...args) {\n  if (ModifierContext.DEBUG) Vex.L('Vex.Flow.ModifierContext', args);\n}\n\nexport class ModifierContext {\n  constructor() {\n    // Current modifiers\n    this.modifiers = {}; // Formatting data.\n\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0\n    }; // Add new modifiers to this array. The ordering is significant -- lower\n    // modifiers are formatted and rendered before higher ones.\n\n    this.PREFORMAT = [StaveNote, Dot, FretHandFinger, Accidental, Stroke, GraceNoteGroup, NoteSubGroup, StringNumber, Articulation, Ornament, Annotation, Bend, Vibrato]; // If post-formatting is required for an element, add it to this array.\n\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(modifier) {\n    const type = modifier.getCategory();\n    if (!this.modifiers[type]) this.modifiers[type] = [];\n    this.modifiers[type].push(modifier);\n    modifier.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  getModifiers(type) {\n    return this.modifiers[type];\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getLeftShift() {\n    return this.state.left_shift;\n  }\n\n  getRightShift() {\n    return this.state.right_shift;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getMetrics() {\n    if (!this.formatted) {\n      throw new Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing\n    };\n  }\n\n  preFormat() {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach(modifier => {\n      L('Preformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.format(this.getModifiers(modifier.CATEGORY), this.state, this);\n    }); // Update width of this modifier context\n\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat() {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach(modifier => {\n      L('Postformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.postFormat(this.getModifiers(modifier.CATEGORY), this);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/modifiercontext.js"],"names":["Vex","StaveNote","Dot","FretHandFinger","Accidental","NoteSubGroup","GraceNoteGroup","Stroke","StringNumber","Articulation","Ornament","Annotation","Bend","Vibrato","L","args","ModifierContext","DEBUG","constructor","modifiers","preFormatted","postFormatted","width","spacing","state","left_shift","right_shift","text_line","top_text_line","PREFORMAT","POSTFORMAT","addModifier","modifier","type","getCategory","push","setModifierContext","getModifiers","getWidth","getLeftShift","getRightShift","getState","getMetrics","formatted","RERR","preFormat","forEach","CATEGORY","format","postFormat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAEA;;AACA,SAASC,CAAT,CAAW,GAAGC,IAAd,EAAoB;AAAE,MAAIC,eAAe,CAACC,KAApB,EAA2BjB,GAAG,CAACc,CAAJ,CAAM,0BAAN,EAAkCC,IAAlC;AAA0C;;AAE3F,OAAO,MAAMC,eAAN,CAAsB;AAC3BE,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,SAAL,GAAiB,EAAjB,CAFY,CAIZ;;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,CADD;AAEXC,MAAAA,WAAW,EAAE,CAFF;AAGXC,MAAAA,SAAS,EAAE,CAHA;AAIXC,MAAAA,aAAa,EAAE;AAJJ,KAAb,CATY,CAgBZ;AACA;;AACA,SAAKC,SAAL,GAAiB,CACf5B,SADe,EAEfC,GAFe,EAGfC,cAHe,EAIfC,UAJe,EAKfG,MALe,EAMfD,cANe,EAOfD,YAPe,EAQfG,YARe,EASfC,YATe,EAUfC,QAVe,EAWfC,UAXe,EAYfC,IAZe,EAafC,OAbe,CAAjB,CAlBY,CAkCZ;;AACA,SAAKiB,UAAL,GAAkB,CAAC7B,SAAD,CAAlB;AACD;;AAED8B,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UAAMC,IAAI,GAAGD,QAAQ,CAACE,WAAT,EAAb;AACA,QAAI,CAAC,KAAKf,SAAL,CAAec,IAAf,CAAL,EAA2B,KAAKd,SAAL,CAAec,IAAf,IAAuB,EAAvB;AAC3B,SAAKd,SAAL,CAAec,IAAf,EAAqBE,IAArB,CAA0BH,QAA1B;AACAA,IAAAA,QAAQ,CAACI,kBAAT,CAA4B,IAA5B;AACA,SAAKhB,YAAL,GAAoB,KAApB;AACA,WAAO,IAAP;AACD;;AAEDiB,EAAAA,YAAY,CAACJ,IAAD,EAAO;AAAE,WAAO,KAAKd,SAAL,CAAec,IAAf,CAAP;AAA8B;;AACnDK,EAAAA,QAAQ,GAAG;AAAE,WAAO,KAAKhB,KAAZ;AAAoB;;AACjCiB,EAAAA,YAAY,GAAG;AAAE,WAAO,KAAKf,KAAL,CAAWC,UAAlB;AAA+B;;AAChDe,EAAAA,aAAa,GAAG;AAAE,WAAO,KAAKhB,KAAL,CAAWE,WAAlB;AAAgC;;AAClDe,EAAAA,QAAQ,GAAG;AAAE,WAAO,KAAKjB,KAAZ;AAAoB;;AAEjCkB,EAAAA,UAAU,GAAG;AACX,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM,IAAI3C,GAAG,CAAC4C,IAAR,CAAa,qBAAb,EAAoC,sCAApC,CAAN;AACD;;AAED,WAAO;AACLtB,MAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWC,UAAX,GAAwB,KAAKD,KAAL,CAAWE,WAAnC,GAAiD,KAAKH,OADxD;AAELA,MAAAA,OAAO,EAAE,KAAKA;AAFT,KAAP;AAID;;AAEDsB,EAAAA,SAAS,GAAG;AACV,QAAI,KAAKzB,YAAT,EAAuB;AACvB,SAAKS,SAAL,CAAeiB,OAAf,CAAwBd,QAAD,IAAc;AACnClB,MAAAA,CAAC,CAAC,iCAAD,EAAoCkB,QAAQ,CAACe,QAA7C,CAAD;AACAf,MAAAA,QAAQ,CAACgB,MAAT,CAAgB,KAAKX,YAAL,CAAkBL,QAAQ,CAACe,QAA3B,CAAhB,EAAsD,KAAKvB,KAA3D,EAAkE,IAAlE;AACD,KAHD,EAFU,CAOV;;AACA,SAAKF,KAAL,GAAa,KAAKE,KAAL,CAAWC,UAAX,GAAwB,KAAKD,KAAL,CAAWE,WAAhD;AACA,SAAKN,YAAL,GAAoB,IAApB;AACD;;AAED6B,EAAAA,UAAU,GAAG;AACX,QAAI,KAAK5B,aAAT,EAAwB;AACxB,SAAKS,UAAL,CAAgBgB,OAAhB,CAAyBd,QAAD,IAAc;AACpClB,MAAAA,CAAC,CAAC,kCAAD,EAAqCkB,QAAQ,CAACe,QAA9C,CAAD;AACAf,MAAAA,QAAQ,CAACiB,UAAT,CAAoB,KAAKZ,YAAL,CAAkBL,QAAQ,CAACe,QAA3B,CAApB,EAA0D,IAA1D;AACD,KAHD;AAID;;AAnF0B","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of modifiers to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\nfunction L(...args) { if (ModifierContext.DEBUG) Vex.L('Vex.Flow.ModifierContext', args); }\n\nexport class ModifierContext {\n  constructor() {\n    // Current modifiers\n    this.modifiers = {};\n\n    // Formatting data.\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new modifiers to this array. The ordering is significant -- lower\n    // modifiers are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(modifier) {\n    const type = modifier.getCategory();\n    if (!this.modifiers[type]) this.modifiers[type] = [];\n    this.modifiers[type].push(modifier);\n    modifier.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  getModifiers(type) { return this.modifiers[type]; }\n  getWidth() { return this.width; }\n  getLeftShift() { return this.state.left_shift; }\n  getRightShift() { return this.state.right_shift; }\n  getState() { return this.state; }\n\n  getMetrics() {\n    if (!this.formatted) {\n      throw new Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n    };\n  }\n\n  preFormat() {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((modifier) => {\n      L('Preformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.format(this.getModifiers(modifier.CATEGORY), this.state, this);\n    });\n\n    // Update width of this modifier context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat() {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((modifier) => {\n      L('Postformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.postFormat(this.getModifiers(modifier.CATEGORY), this);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
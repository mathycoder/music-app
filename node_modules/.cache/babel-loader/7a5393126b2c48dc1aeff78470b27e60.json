{"ast":null,"code":"// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n// Bounding boxes for interactive notation\nexport class BoundingBox {\n  static copy(that) {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  getX() {\n    return this.x;\n  }\n\n  getY() {\n    return this.y;\n  }\n\n  getW() {\n    return this.w;\n  }\n\n  getH() {\n    return this.h;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  setW(w) {\n    this.w = w;\n    return this;\n  }\n\n  setH(h) {\n    this.h = h;\n    return this;\n  }\n\n  move(x, y) {\n    this.x += x;\n    this.y += y;\n  }\n\n  clone() {\n    return BoundingBox.copy(this);\n  } // Merge my box with given box. Creates a bigger bounding box unless\n  // the given box is contained in this one.\n\n\n  mergeWith(boundingBox, ctx) {\n    const that = boundingBox;\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n\n  draw(ctx, x, y) {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/boundingbox.js"],"names":["BoundingBox","copy","that","x","y","w","h","constructor","getX","getY","getW","getH","setX","setY","setW","setH","move","clone","mergeWith","boundingBox","ctx","new_x","new_y","new_w","Math","max","new_h","draw","rect","stroke"],"mappings":"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","sourcesContent":["// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n\n// Bounding boxes for interactive notation\n\nexport class BoundingBox {\n  static copy(that) {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  getX() { return this.x; }\n  getY() { return this.y; }\n  getW() { return this.w; }\n  getH() { return this.h; }\n  setX(x) { this.x = x; return this; }\n  setY(y) { this.y = y; return this; }\n  setW(w) { this.w = w; return this; }\n  setH(h) { this.h = h; return this; }\n  move(x, y) { this.x += x; this.y += y; }\n  clone() { return BoundingBox.copy(this); }\n\n  // Merge my box with given box. Creates a bigger bounding box unless\n  // the given box is contained in this one.\n  mergeWith(boundingBox, ctx) {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n\n  draw(ctx, x, y) {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
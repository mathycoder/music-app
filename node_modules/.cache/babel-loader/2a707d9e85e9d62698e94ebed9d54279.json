{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements different types of pedal markings. These notation\n// elements indicate to the performer when to depress and release the a pedal.\n//\n// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n// custom text for the release/depress pedal markings.\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Glyph } from './glyph'; // To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\n\nfunction L(...args) {\n  if (PedalMarking.DEBUG) Vex.L('Vex.Flow.PedalMarking', args);\n} // Draws a pedal glyph with the provided `name` on a rendering `context`\n// at the coordinates `x` and `y. Takes into account the glyph data\n// coordinate shifts.\n\n\nfunction drawPedalGlyph(name, context, x, y, point) {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, {\n    category: 'pedalMarking'\n  });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\nexport class PedalMarking extends Element {\n  // Glyph data\n  static get GLYPHS() {\n    return {\n      'pedal_depress': {\n        code: 'keyboardPedalPed',\n        x_shift: -10,\n        y_shift: 0\n      },\n      'pedal_release': {\n        code: 'keyboardPedalUp',\n        x_shift: -2,\n        y_shift: 3\n      }\n    };\n  }\n\n  static get Styles() {\n    return {\n      TEXT: 1,\n      BRACKET: 2,\n      MIXED: 3\n    };\n  }\n\n  static get StylesString() {\n    return {\n      text: PedalMarking.Styles.TEXT,\n      bracket: PedalMarking.Styles.BRACKET,\n      mixed: PedalMarking.Styles.MIXED\n    };\n  } // Create a sustain pedal marking. Returns the defaults PedalMarking.\n  // Which uses the traditional \"Ped\" and \"*\"\" markings.\n\n\n  static createSustain(notes) {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  } // Create a sostenuto pedal marking\n\n\n  static createSostenuto(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  } // Create an una corda pedal marking\n\n\n  static createUnaCorda(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  } // ## Prototype Methods\n\n\n  constructor(notes) {\n    super();\n    this.setAttribute('type', 'PedalMarking');\n    this.notes = notes;\n    this.style = PedalMarking.TEXT;\n    this.line = 0; // Custom text for the release/depress markings\n\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold'\n    };\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black'\n    };\n  } // Set custom text for the `depress`/`release` pedal markings. No text is\n  // set if the parameter is falsy.\n\n\n  setCustomText(depress, release) {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  } // Set the pedal marking style\n\n\n  setStyle(style) {\n    if (style < 1 && style > 3) {\n      throw new Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');\n    }\n\n    this.style = style;\n    return this;\n  } // Set the staff line to render the markings on\n\n\n  setLine(line) {\n    this.line = line;\n    return this;\n  } // Draw the bracket based pedal markings\n\n\n  drawBracketed() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    let prev_x;\n    let prev_y;\n    const pedal = this; // Iterate through each note\n\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed; // Get the initial coordinates for the note\n\n      const x = note.getAbsoluteX();\n      const y = note.getStave().getYForBottomText(pedal.line + 3); // Throw if current note is positioned before the previous note\n\n      if (x < prev_x) {\n        throw new Vex.RERR('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n      } // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n\n\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift = prev_is_same ? 5 : 0;\n\n        if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (pedal.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(pedal.custom_depress_text).width;\n            ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);\n            x_shift = text_width / 2 + pedal.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + pedal.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - pedal.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0; // Draw end bracket\n\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - pedal.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      } // Store previous coordinates\n\n\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  } // Draw the text based pedal markings. This defaults to the traditional\n  // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n\n\n  drawText() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    const pedal = this; // Iterate through each note, placing glyphs or custom text accordingly\n\n    this.notes.forEach(note => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.getStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(pedal.line + 3);\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n      let text_width = 0;\n\n      if (is_pedal_depressed) {\n        if (pedal.custom_depress_text) {\n          text_width = ctx.measureText(pedal.custom_depress_text).width;\n          ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (pedal.custom_release_text) {\n          text_width = ctx.measureText(pedal.custom_release_text).width;\n          ctx.fillText(pedal.custom_release_text, x - text_width / 2, y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  } // Render the pedal marking in position on the rendering context\n\n\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    L('Rendering Pedal Marking');\n\n    if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.style === PedalMarking.Styles.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/pedalmarking.js"],"names":["Vex","Element","Glyph","L","args","PedalMarking","DEBUG","drawPedalGlyph","name","context","x","y","point","glyph_data","GLYPHS","glyph","code","category","render","x_shift","y_shift","Styles","TEXT","BRACKET","MIXED","StylesString","text","bracket","mixed","createSustain","notes","pedal","createSostenuto","setStyle","setCustomText","createUnaCorda","constructor","setAttribute","style","line","custom_depress_text","custom_release_text","font","family","size","weight","render_options","bracket_height","text_margin_right","bracket_line_width","color","depress","release","RERR","setLine","drawBracketed","ctx","is_pedal_depressed","prev_x","prev_y","forEach","note","index","getAbsoluteX","getStave","getYForBottomText","next_is_same","prev_is_same","musicFont","lookupMetric","text_width","measureText","width","fillText","beginPath","moveTo","lineTo","stroke","closePath","drawText","stave","draw","checkContext","setRendered","save","setStrokeStyle","setFillStyle","setFont","setLineWidth","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements different types of pedal markings. These notation\n// elements indicate to the performer when to depress and release the a pedal.\n//\n// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n// custom text for the release/depress pedal markings.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\nfunction L(...args) { if (PedalMarking.DEBUG) Vex.L('Vex.Flow.PedalMarking', args); }\n\n// Draws a pedal glyph with the provided `name` on a rendering `context`\n// at the coordinates `x` and `y. Takes into account the glyph data\n// coordinate shifts.\nfunction drawPedalGlyph(name, context, x, y, point) {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\nexport class PedalMarking extends Element {\n  // Glyph data\n  static get GLYPHS() {\n    return {\n      'pedal_depress': {\n        code: 'keyboardPedalPed',\n        x_shift: -10,\n        y_shift: 0,\n      },\n      'pedal_release': {\n        code: 'keyboardPedalUp',\n        x_shift: -2,\n        y_shift: 3,\n      },\n    };\n  }\n\n  static get Styles() {\n    return {\n      TEXT: 1,\n      BRACKET: 2,\n      MIXED: 3,\n    };\n  }\n\n  static get StylesString() {\n    return {\n      text: PedalMarking.Styles.TEXT,\n      bracket: PedalMarking.Styles.BRACKET,\n      mixed: PedalMarking.Styles.MIXED,\n    };\n  }\n\n  // Create a sustain pedal marking. Returns the defaults PedalMarking.\n  // Which uses the traditional \"Ped\" and \"*\"\" markings.\n  static createSustain(notes) {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  // Create a sostenuto pedal marking\n  static createSostenuto(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  // Create an una corda pedal marking\n  static createUnaCorda(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  // ## Prototype Methods\n  constructor(notes) {\n    super();\n    this.setAttribute('type', 'PedalMarking');\n\n    this.notes = notes;\n    this.style = PedalMarking.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      color: 'black',\n    };\n  }\n\n  // Set custom text for the `depress`/`release` pedal markings. No text is\n  // set if the parameter is falsy.\n  setCustomText(depress, release) {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  // Set the pedal marking style\n  setStyle(style) {\n    if (style < 1 && style > 3)  {\n      throw new Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');\n    }\n\n    this.style = style;\n    return this;\n  }\n\n  // Set the staff line to render the markings on\n  setLine(line) { this.line = line; return this; }\n\n  // Draw the bracket based pedal markings\n  drawBracketed() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    let prev_x;\n    let prev_y;\n    const pedal = this;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.getStave().getYForBottomText(pedal.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new Vex.RERR(\n          'InvalidConfiguration', 'The notes provided must be in order of ascending x positions'\n        );\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift =  prev_is_same ? 5 : 0;\n\n        if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (pedal.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(pedal.custom_depress_text).width;\n            ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);\n            x_shift = (text_width / 2) + pedal.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n            x_shift = 20 + pedal.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - pedal.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - pedal.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  // Draw the text based pedal markings. This defaults to the traditional\n  // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n  drawText() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    const pedal = this;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach(note => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.getStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(pedal.line + 3);\n\n      const point = this.musicFont.lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (pedal.custom_depress_text) {\n          text_width = ctx.measureText(pedal.custom_depress_text).width;\n          ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (pedal.custom_release_text) {\n          text_width = ctx.measureText(pedal.custom_release_text).width;\n          ctx.fillText(pedal.custom_release_text, x - (text_width / 2), y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  // Render the pedal marking in position on the rendering context\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.style === PedalMarking.Styles.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
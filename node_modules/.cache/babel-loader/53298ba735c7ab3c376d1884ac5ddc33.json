{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Stem } from './stem';\nexport class Tremolo extends Modifier {\n  static get CATEGORY() {\n    return 'tremolo';\n  }\n\n  constructor(num) {\n    super();\n    this.setAttribute('type', 'Tremolo');\n    this.num = num;\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  getCategory() {\n    return Tremolo.CATEGORY;\n  }\n\n  draw() {\n    this.checkContext();\n\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Tremolo without a note and index.\");\n    }\n\n    this.setRendered();\n    const stemDirection = this.note.getStemDirection();\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    const isGraceNote = this.note.getCategory() === 'gracenotes';\n    const scale = isGraceNote ? GraceNote.SCALE : 1;\n    const category = `tremolo.${isGraceNote ? 'grace' : 'default'}`;\n    this.y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * this.y_spacing;\n    let y = this.note.stem.getExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    this.font = {\n      family: 'Arial',\n      size: 16 * scale,\n      weight: ''\n    };\n    this.render_options = {\n      font_scale: this.musicFont.lookupMetric(`${category}.point`),\n      stroke_px: 3,\n      stroke_spacing: 10 * scale\n    };\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code, {\n        category\n      });\n      y += this.y_spacing;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/tremolo.js"],"names":["Vex","Modifier","Glyph","GraceNote","Stem","Tremolo","CATEGORY","constructor","num","setAttribute","note","index","position","Position","CENTER","code","getCategory","draw","checkContext","RERR","setRendered","stemDirection","getStemDirection","start","getModifierStartXY","x","isGraceNote","scale","SCALE","category","y_spacing","musicFont","lookupMetric","height","y","stem","getExtents","baseY","font","family","size","weight","render_options","font_scale","stroke_px","stroke_spacing","UP","i","renderGlyph","context"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,MAAMC,OAAN,SAAsBJ,QAAtB,CAA+B;AACpC,aAAWK,QAAX,GAAsB;AAAE,WAAO,SAAP;AAAmB;;AAE3CC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AACA,SAAKC,YAAL,CAAkB,MAAlB,EAA0B,SAA1B;AAEA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKE,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,QAAL,GAAgBX,QAAQ,CAACY,QAAT,CAAkBC,MAAlC;AACA,SAAKC,IAAL,GAAY,UAAZ;AACD;;AAEDC,EAAAA,WAAW,GAAG;AAAE,WAAOX,OAAO,CAACC,QAAf;AAA0B;;AAE1CW,EAAAA,IAAI,GAAG;AACL,SAAKC,YAAL;;AAEA,QAAI,EAAE,KAAKR,IAAL,IAAa,KAAKC,KAAL,IAAc,IAA7B,CAAJ,EAAwC;AACtC,YAAM,IAAIX,GAAG,CAACmB,IAAR,CAAa,gBAAb,EAA+B,8CAA/B,CAAN;AACD;;AAED,SAAKC,WAAL;AACA,UAAMC,aAAa,GAAG,KAAKX,IAAL,CAAUY,gBAAV,EAAtB;AAEA,UAAMC,KAAK,GAAG,KAAKb,IAAL,CAAUc,kBAAV,CAA6B,KAAKZ,QAAlC,EAA4C,KAAKD,KAAjD,CAAd;AACA,QAAIc,CAAC,GAAGF,KAAK,CAACE,CAAd;AACA,UAAMC,WAAW,GAAI,KAAKhB,IAAL,CAAUM,WAAV,OAA4B,YAAjD;AACA,UAAMW,KAAK,GAAGD,WAAW,GAAGvB,SAAS,CAACyB,KAAb,GAAqB,CAA9C;AACA,UAAMC,QAAQ,GAAI,WAAUH,WAAW,GAAG,OAAH,GAAa,SAAU,EAA9D;AAEA,SAAKI,SAAL,GAAiB,KAAKC,SAAL,CAAeC,YAAf,CAA6B,GAAEH,QAAS,UAAxC,IAAqDR,aAAtE;AACA,UAAMY,MAAM,GAAG,KAAKzB,GAAL,GAAW,KAAKsB,SAA/B;AACA,QAAII,CAAC,GAAG,KAAKxB,IAAL,CAAUyB,IAAV,CAAeC,UAAf,GAA4BC,KAA5B,GAAoCJ,MAA5C;;AAEA,QAAIZ,aAAa,GAAG,CAApB,EAAuB;AACrBa,MAAAA,CAAC,IAAI,KAAKH,SAAL,CAAeC,YAAf,CAA6B,GAAEH,QAAS,kBAAxC,IAA6DF,KAAlE;AACD,KAFD,MAEO;AACLO,MAAAA,CAAC,IAAI,KAAKH,SAAL,CAAeC,YAAf,CAA6B,GAAEH,QAAS,gBAAxC,IAA2DF,KAAhE;AACD;;AAED,SAAKW,IAAL,GAAY;AACVC,MAAAA,MAAM,EAAE,OADE;AAEVC,MAAAA,IAAI,EAAE,KAAKb,KAFD;AAGVc,MAAAA,MAAM,EAAE;AAHE,KAAZ;AAMA,SAAKC,cAAL,GAAsB;AACpBC,MAAAA,UAAU,EAAE,KAAKZ,SAAL,CAAeC,YAAf,CAA6B,GAAEH,QAAS,QAAxC,CADQ;AAEpBe,MAAAA,SAAS,EAAE,CAFS;AAGpBC,MAAAA,cAAc,EAAE,KAAKlB;AAHD,KAAtB;AAMAF,IAAAA,CAAC,IAAI,KAAKM,SAAL,CAAeC,YAAf,CAA6B,GAAEH,QAAS,eAAcR,aAAa,KAAKjB,IAAI,CAAC0C,EAAvB,GAA4B,IAA5B,GAAmC,MAAO,EAAhG,CAAL;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvC,GAAzB,EAA8B,EAAEuC,CAAhC,EAAmC;AACjC7C,MAAAA,KAAK,CAAC8C,WAAN,CAAkB,KAAKC,OAAvB,EAAgCxB,CAAhC,EAAmCS,CAAnC,EAAsC,KAAKQ,cAAL,CAAoBC,UAA1D,EAAsE,KAAK5B,IAA3E,EAAiF;AAAEc,QAAAA;AAAF,OAAjF;AACAK,MAAAA,CAAC,IAAI,KAAKJ,SAAV;AACD;AACF;;AA3DmC","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Stem } from './stem';\n\nexport class Tremolo extends Modifier {\n  static get CATEGORY() { return 'tremolo'; }\n\n  constructor(num) {\n    super();\n    this.setAttribute('type', 'Tremolo');\n\n    this.num = num;\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'tremolo1';\n  }\n\n  getCategory() { return Tremolo.CATEGORY; }\n\n  draw() {\n    this.checkContext();\n\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Tremolo without a note and index.\");\n    }\n\n    this.setRendered();\n    const stemDirection = this.note.getStemDirection();\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    const isGraceNote =  this.note.getCategory() === 'gracenotes';\n    const scale = isGraceNote ? GraceNote.SCALE : 1;\n    const category = `tremolo.${isGraceNote ? 'grace' : 'default'}`;\n\n    this.y_spacing = this.musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n    const height = this.num * this.y_spacing;\n    let y = this.note.stem.getExtents().baseY - height;\n\n    if (stemDirection < 0) {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n    } else {\n      y += this.musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n    }\n\n    this.font = {\n      family: 'Arial',\n      size: 16 * scale,\n      weight: '',\n    };\n\n    this.render_options = {\n      font_scale: this.musicFont.lookupMetric(`${category}.point`),\n      stroke_px: 3,\n      stroke_spacing: 10 * scale,\n    };\n\n    x += this.musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code, { category });\n      y += this.y_spacing;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
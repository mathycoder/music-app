{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\nexport class Repetition extends StaveModifier {\n  static get CATEGORY() {\n    return 'repetitions';\n  }\n\n  static get type() {\n    return {\n      NONE: 1,\n      // no coda or segno\n      CODA_LEFT: 2,\n      // coda at beginning of stave\n      CODA_RIGHT: 3,\n      // coda at end of stave\n      SEGNO_LEFT: 4,\n      // segno at beginning of stave\n      SEGNO_RIGHT: 5,\n      // segno at end of stave\n      DC: 6,\n      // D.C. at end of stave\n      DC_AL_CODA: 7,\n      // D.C. al coda at end of stave\n      DC_AL_FINE: 8,\n      // D.C. al Fine end of stave\n      DS: 9,\n      // D.S. at end of stave\n      DS_AL_CODA: 10,\n      // D.S. al coda at end of stave\n      DS_AL_FINE: 11,\n      // D.S. al Fine at end of stave\n      FINE: 12 // Fine at end of stave\n\n    };\n  }\n\n  constructor(type, x, y_shift) {\n    super();\n    this.setAttribute('type', 'Repetition');\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold italic'\n    };\n  }\n\n  getCategory() {\n    return Repetition.CATEGORY;\n  }\n\n  setShiftX(x) {\n    this.x_shift = x;\n    return this;\n  }\n\n  setShiftY(y) {\n    this.y_shift = y;\n    return this;\n  }\n\n  draw(stave, x) {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.width);\n        break;\n\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.width);\n        break;\n\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave, x) {\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'coda', {\n      category: 'coda'\n    });\n    return this;\n  }\n\n  drawSignoFixed(stave, x) {\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'segno', {\n      category: 'segno'\n    });\n    return this;\n  }\n\n  drawSymbolText(stave, x, text, draw_coda) {\n    const ctx = stave.checkContext();\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight); // Default to right symbol\n\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.options.vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.width - 5 + this.x_shift;\n      text_x = symbol_x - +ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', {\n        category: 'coda'\n      });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/staverepetition.js"],"names":["StaveModifier","Glyph","Repetition","CATEGORY","type","NONE","CODA_LEFT","CODA_RIGHT","SEGNO_LEFT","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","constructor","x","y_shift","setAttribute","symbol_type","x_shift","font","family","size","weight","getCategory","setShiftX","setShiftY","y","draw","stave","setRendered","drawCodaFixed","width","drawSymbolText","drawSignoFixed","getYForTopText","options","num_lines","renderGlyph","context","category","text","draw_coda","ctx","checkContext","save","setFont","text_x","symbol_x","vertical_bar_width","measureText","fillText","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class Repetition extends StaveModifier {\n  static get CATEGORY() { return 'repetitions'; }\n  static get type() {\n    return {\n      NONE: 1,         // no coda or segno\n      CODA_LEFT: 2,    // coda at beginning of stave\n      CODA_RIGHT: 3,   // coda at end of stave\n      SEGNO_LEFT: 4,   // segno at beginning of stave\n      SEGNO_RIGHT: 5,  // segno at end of stave\n      DC: 6,           // D.C. at end of stave\n      DC_AL_CODA: 7,   // D.C. al coda at end of stave\n      DC_AL_FINE: 8,   // D.C. al Fine end of stave\n      DS: 9,           // D.S. at end of stave\n      DS_AL_CODA: 10,  // D.S. al coda at end of stave\n      DS_AL_FINE: 11,  // D.S. al Fine at end of stave\n      FINE: 12,        // Fine at end of stave\n    };\n  }\n\n  constructor(type, x, y_shift) {\n    super();\n    this.setAttribute('type', 'Repetition');\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold italic',\n    };\n  }\n\n  getCategory() { return Repetition.CATEGORY; }\n  setShiftX(x) { this.x_shift = x; return this; }\n  setShiftY(y) { this.y_shift = y; return this; }\n\n  draw(stave, x) {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.width);\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.width);\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave, x) {\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'coda', { category: 'coda' });\n    return this;\n  }\n\n  drawSignoFixed(stave, x) {\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'segno', { category: 'segno' });\n    return this;\n  }\n\n  drawSymbolText(stave, x, text, draw_coda) {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.options.vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else {\n      // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.width - 5 + this.x_shift;\n      text_x = symbol_x - + ctx.measureText(text).width - 12;\n    }\n\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
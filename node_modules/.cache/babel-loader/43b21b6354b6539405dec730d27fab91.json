{"ast":null,"code":"// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignature } from './timesignature';\nlet semibrave_rest;\n\nfunction get_semibrave_rest() {\n  if (!semibrave_rest) {\n    const notehead = new NoteHead({\n      duration: 'w',\n      note_type: 'r'\n    });\n    semibrave_rest = {\n      glyph_font_scale: notehead.render_options.glyph_font_scale,\n      glyph_code: notehead.glyph_code,\n      width: notehead.getWidth()\n    };\n  }\n\n  return semibrave_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  // Parameters:\n  // * `number_of_measures` - Number of measures.\n  // * `options` - The options object.\n  //   * `show_number` - Show number of measures string or not.\n  //   * `number_line` -  Staff line to render the number of measures string.\n  //   * `number_glyph_point` - Size of the number of measures string glyphs.\n  //   * `padding_left` - Left padding from stave x.\n  //   * `padding_right` - Right padding from stave end x.\n  //   * `line` - Staff line to render rest line or rest symbols.\n  //   * `spacing_between_lines_px` - Spacing between staff lines to\n  // resolve serif height or {2-bar and 4-bar}rest symbol height.\n  //   * `line_thickness` - Rest line thickness.\n  //   * `serif_thickness` - Rest serif line thickness.\n  //   * `use_symbols` - Use rest symbols or not.\n  //   * `symbol_spacing` - Spacing between each rest symbol glyphs.\n  //   * `semibrave_rest_glyph_scale` - Size of the semibrave(1-bar) rest symbol.\n  constructor(number_of_measures, options) {\n    super();\n    this.setAttribute('type', 'MultiMeasureRest');\n    const point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n    this.render_options = {\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: point,\n      // same as TimeSignature.\n      padding_left: undefined,\n      padding_right: undefined,\n      line: 2,\n      spacing_between_lines_px: 10,\n      // same as Stave.\n      line_thickness: undefined,\n      serif_thickness: 2,\n      use_symbols: false,\n      symbol_spacing: undefined,\n\n      /* same as NoteHead. */\n      semibrave_rest_glyph_scale: Flow.DEFAULT_NOTATION_FONT_SCALE\n    };\n    Vex.Merge(this.render_options, options);\n    this.render_options.number_line += fontLineShift;\n    this.number_of_measures = number_of_measures;\n    this.xs = {\n      left: NaN,\n      right: NaN\n    };\n  }\n\n  getXs() {\n    return this.xs;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave() {\n    return this.stave;\n  }\n\n  drawLine(ctx, left, right, sbl) {\n    const y = this.stave.getYForLine(this.render_options.line);\n    const padding = (right - left) * 0.1;\n    left += padding;\n    right -= padding;\n    const serif = {\n      thickness: this.render_options.serif_thickness,\n      height: sbl\n    };\n    let lineThicknessHalf = sbl * 0.25;\n\n    if (!isNaN(this.render_options.line_thickness)) {\n      lineThicknessHalf = this.render_options.line_thickness * 0.5;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - sbl);\n    ctx.lineTo(right, y - sbl);\n    ctx.lineTo(right, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + sbl);\n    ctx.lineTo(left, y + sbl);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(ctx, left, right, sbl) {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n    const semibrave_rest = get_semibrave_rest();\n    const semibrave_rest_width = semibrave_rest.width * (this.render_options.semibrave_rest_glyph_scale / semibrave_rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: semibrave_rest_width * 0.5,\n        height: sbl\n      },\n      1: {\n        width: semibrave_rest_width\n      }\n    };\n    let spacing = semibrave_rest_width * 1.35;\n\n    if (!isNaN(this.render_options.symbol_spacing)) {\n      spacing = this.render_options.symbol_spacing;\n    }\n\n    const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n    let x = left + (right - left) * 0.5 - width * 0.5;\n    const yTop = this.stave.getYForLine(this.render_options.line - 1);\n    const yMiddle = this.stave.getYForLine(this.render_options.line);\n    const yBottom = this.stave.getYForLine(this.render_options.line + 1);\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, this.render_options.semibrave_rest_glyph_scale, semibrave_rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n    const ctx = this.context;\n    const stave = this.stave;\n    const sbl = this.render_options.spacing_between_lines_px;\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX(); // FIXME: getNoteStartX() returns x+5(barline width) and\n    // getNoteEndX() returns x + width(no barline width) by default. how to fix?\n\n    const begModifiers = stave.getModifiers(StaveModifier.Position.BEGIN);\n\n    if (begModifiers.length === 1 && begModifiers[0].getCategory() === 'barlines') {\n      left -= begModifiers[0].getWidth();\n    }\n\n    if (!isNaN(this.render_options.padding_left)) {\n      left = stave.getX() + this.render_options.padding_left;\n    }\n\n    if (!isNaN(this.render_options.padding_right)) {\n      right = stave.getX() + stave.getWidth() - this.render_options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    if (this.render_options.use_symbols) {\n      this.drawSymbols(ctx, left, right, sbl);\n    } else {\n      this.drawLine(ctx, left, right, sbl);\n    }\n\n    if (this.render_options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(null, undefined, false);\n      timeSig.point = this.render_options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.x = left + (right - left) * 0.5 - timeSig.timeSig.glyph.getMetrics().width * 0.5;\n      timeSig.bottomLine = this.render_options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/multimeasurerest.js"],"names":["Vex","Flow","Element","Glyph","NoteHead","StaveModifier","TimeSignature","semibrave_rest","get_semibrave_rest","notehead","duration","note_type","glyph_font_scale","render_options","glyph_code","width","getWidth","MultiMeasureRest","constructor","number_of_measures","options","setAttribute","point","musicFont","lookupMetric","fontLineShift","show_number","number_line","number_glyph_point","padding_left","undefined","padding_right","line","spacing_between_lines_px","line_thickness","serif_thickness","use_symbols","symbol_spacing","semibrave_rest_glyph_scale","DEFAULT_NOTATION_FONT_SCALE","Merge","xs","left","NaN","right","getXs","setStave","stave","getStave","drawLine","ctx","sbl","y","getYForLine","padding","serif","thickness","height","lineThicknessHalf","isNaN","save","beginPath","moveTo","lineTo","closePath","fill","drawSymbols","n4","Math","floor","n","n2","n1","semibrave_rest_width","glyphs","spacing","x","yTop","yMiddle","yBottom","setStrokeStyle","setLineWidth","i","fillRect","renderGlyph","restore","draw","checkContext","setRendered","context","getNoteStartX","getNoteEndX","begModifiers","getModifiers","Position","BEGIN","length","getCategory","getX","timeSpec","timeSig","setTimeSig","glyph","getMetrics","bottomLine","setContext"],"mappings":"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","sourcesContent":["// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignature } from './timesignature';\n\nlet semibrave_rest;\nfunction get_semibrave_rest() {\n  if (!semibrave_rest) {\n    const notehead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibrave_rest = {\n      glyph_font_scale: notehead.render_options.glyph_font_scale,\n      glyph_code: notehead.glyph_code,\n      width: notehead.getWidth(),\n    };\n  }\n  return semibrave_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  // Parameters:\n  // * `number_of_measures` - Number of measures.\n  // * `options` - The options object.\n  //   * `show_number` - Show number of measures string or not.\n  //   * `number_line` -  Staff line to render the number of measures string.\n  //   * `number_glyph_point` - Size of the number of measures string glyphs.\n  //   * `padding_left` - Left padding from stave x.\n  //   * `padding_right` - Right padding from stave end x.\n  //   * `line` - Staff line to render rest line or rest symbols.\n  //   * `spacing_between_lines_px` - Spacing between staff lines to\n  // resolve serif height or {2-bar and 4-bar}rest symbol height.\n  //   * `line_thickness` - Rest line thickness.\n  //   * `serif_thickness` - Rest serif line thickness.\n  //   * `use_symbols` - Use rest symbols or not.\n  //   * `symbol_spacing` - Spacing between each rest symbol glyphs.\n  //   * `semibrave_rest_glyph_scale` - Size of the semibrave(1-bar) rest symbol.\n  constructor(number_of_measures, options) {\n    super();\n    this.setAttribute('type', 'MultiMeasureRest');\n\n    const point = this.musicFont.lookupMetric('digits.point');\n    const fontLineShift = this.musicFont.lookupMetric('digits.shiftLine', 0);\n\n    this.render_options = {\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: point, // same as TimeSignature.\n\n      padding_left: undefined,\n      padding_right: undefined,\n\n      line: 2,\n\n      spacing_between_lines_px: 10, // same as Stave.\n\n      line_thickness: undefined,\n      serif_thickness: 2,\n\n      use_symbols: false,\n      symbol_spacing: undefined,\n\n      /* same as NoteHead. */\n      semibrave_rest_glyph_scale: Flow.DEFAULT_NOTATION_FONT_SCALE,\n    };\n    Vex.Merge(this.render_options, options);\n\n    this.render_options.number_line += fontLineShift;\n\n    this.number_of_measures = number_of_measures;\n    this.xs = {\n      left: NaN,\n      right: NaN,\n    };\n  }\n\n  getXs() {\n    return this.xs;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave() {\n    return this.stave;\n  }\n\n  drawLine(ctx, left, right, sbl) {\n    const y = this.stave.getYForLine(this.render_options.line);\n    const padding = (right - left) * 0.1;\n\n    left += padding;\n    right -= padding;\n\n    const serif = {\n      thickness: this.render_options.serif_thickness,\n      height: sbl,\n    };\n    let lineThicknessHalf = sbl * 0.25;\n    if (!isNaN(this.render_options.line_thickness)) {\n      lineThicknessHalf = this.render_options.line_thickness * 0.5;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - sbl);\n    ctx.lineTo(right, y - sbl);\n    ctx.lineTo(right, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + sbl);\n    ctx.lineTo(left, y + sbl);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(ctx, left, right, sbl) {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const semibrave_rest = get_semibrave_rest();\n    const semibrave_rest_width = semibrave_rest.width *\n      (this.render_options.semibrave_rest_glyph_scale / semibrave_rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: semibrave_rest_width * 0.5,\n        height: sbl,\n      },\n      1: {\n        width: semibrave_rest_width,\n      },\n    };\n\n    let spacing = semibrave_rest_width * 1.35;\n    if (!isNaN(this.render_options.symbol_spacing)) {\n      spacing = this.render_options.symbol_spacing;\n    }\n\n    const width = (n4 * glyphs[2].width) + (n2 * glyphs[2].width)\n      + (n1 * glyphs[1].width) + ((n4 + n2 + n1 - 1) * spacing);\n    let x = left + ((right - left) * 0.5) - (width * 0.5);\n    const yTop = this.stave.getYForLine(this.render_options.line - 1);\n    const yMiddle = this.stave.getYForLine(this.render_options.line);\n    const yBottom = this.stave.getYForLine(this.render_options.line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, this.render_options.semibrave_rest_glyph_scale,\n        semibrave_rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const ctx = this.context;\n    const stave = this.stave;\n    const sbl = this.render_options.spacing_between_lines_px;\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x+5(barline width) and\n    // getNoteEndX() returns x + width(no barline width) by default. how to fix?\n    const begModifiers = stave.getModifiers(StaveModifier.Position.BEGIN);\n    if (begModifiers.length === 1 && begModifiers[0].getCategory() === 'barlines') {\n      left -= begModifiers[0].getWidth();\n    }\n\n    if (!isNaN(this.render_options.padding_left)) {\n      left = stave.getX() + this.render_options.padding_left;\n    }\n\n    if (!isNaN(this.render_options.padding_right)) {\n      right = stave.getX() + stave.getWidth() - this.render_options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    if (this.render_options.use_symbols) {\n      this.drawSymbols(ctx, left, right, sbl);\n    } else {\n      this.drawLine(ctx, left, right, sbl);\n    }\n\n    if (this.render_options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(null, undefined, false);\n      timeSig.point = this.render_options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.x = left + ((right - left) * 0.5) - (timeSig.timeSig.glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = this.render_options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
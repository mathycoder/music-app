{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Gregory Ristow (2015)\nimport { Vex } from './vex';\nconst attrNamesToIgnoreMap = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true\n  },\n  rect: {},\n  text: {\n    width: true,\n    height: true\n  }\n};\n{\n  const fontAttrNamesToIgnore = {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true\n  };\n  Vex.Merge(attrNamesToIgnoreMap.rect, fontAttrNamesToIgnore);\n  Vex.Merge(attrNamesToIgnoreMap.path, fontAttrNamesToIgnore);\n}\nexport class SVGContext {\n  constructor(element) {\n    // element is the parent DOM object\n    this.element = element; // Create the SVG in the SVG namespace:\n\n    this.svgNS = 'http://www.w3.org/2000/svg';\n    const svg = this.create('svg'); // Add it to the canvas:\n\n    this.element.appendChild(svg); // Point to it:\n\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n\n    this.parent = this.svg;\n    this.path = '';\n    this.pen = {\n      x: NaN,\n      y: NaN\n    };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: {\n        x: 1,\n        y: 1\n      },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal'\n    };\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal'\n    };\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal'\n    };\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black'\n    };\n    this.state_stack = []; // Test for Internet Explorer\n\n    this.iePolyfill();\n  }\n\n  create(svgElementType) {\n    return document.createElementNS(this.svgNS, svgElementType);\n  } // Allow grouping elements in containers for interactivity.\n\n\n  openGroup(cls, id, attrs) {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', Vex.Prefix(cls));\n    if (id) group.setAttribute('id', Vex.Prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n\n    return group;\n  }\n\n  closeGroup() {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem) {\n    this.parent.appendChild(elem);\n  } // Tests if the browser is Internet Explorer; if it is,\n  // we do some tricks to improve text layout.  See the\n  // note at ieMeasureTextFix() for details.\n\n\n  iePolyfill() {\n    if (typeof navigator !== 'undefined') {\n      this.ie = /MSIE 9/i.test(navigator.userAgent) || /MSIE 10/i.test(navigator.userAgent) || /rv:11\\.0/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent);\n    }\n  } // ### Styling & State Methods:\n\n\n  setFont(family, size, weight) {\n    // Unlike canvas, in SVG italic is handled by font-style,\n    // not weight. So: we search the weight argument and\n    // apply bold and italic to weight and style respectively.\n    let bold = false;\n    let italic = false;\n    let style = 'normal'; // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        italic = true;\n      } // look for \"bold\" in weight\n\n\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        bold = true;\n      } // remove any remaining spaces\n\n\n      weight = weight.replace(/ /g, '');\n    }\n\n    weight = bold ? 'bold' : weight;\n    weight = typeof weight === 'undefined' || weight === '' ? 'normal' : weight;\n    style = italic ? 'italic' : style;\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': weight,\n      'font-style': style\n    }; // Store the font size so that if the browser is Internet\n    // Explorer we can fix its calculations of text width.\n\n    this.fontSize = Number(size);\n    Vex.Merge(this.attributes, fontAttributes);\n    Vex.Merge(this.state, fontAttributes);\n    return this;\n  }\n\n  setRawFont(font) {\n    font = font.trim(); // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n\n    const fontArray = font.split(' ');\n    this.attributes['font-family'] = fontArray[1];\n    this.state['font-family'] = fontArray[1];\n    this.attributes['font-size'] = fontArray[0];\n    this.state['font-size'] = fontArray[0]; // Saves fontSize for IE polyfill\n\n    this.fontSize = Number(fontArray[0].match(/\\d+/));\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  } // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]\n\n\n  setLineDash(lineDash) {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      lineDash = lineDash.join(', ');\n      this.attributes['stroke-dasharray'] = lineDash;\n      return this;\n    } else {\n      throw new Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  setLineCap(lineCap) {\n    this.attributes['stroke-linecap'] = lineCap;\n    return this;\n  } // ### Sizing & Scaling Methods:\n  // TODO (GCR): See note at scale() -- seperate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n\n\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width;\n    this.svg.style.width = width;\n    this.svg.style.height = height;\n    const attributes = {\n      width,\n      height\n    };\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x, y) {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas or Raphael contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n    this.state.scale = {\n      x,\n      y\n    };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n    return this;\n  }\n\n  setViewBox(...args) {\n    // Override for \"x y w h\" style:\n    if (args.length === 1) {\n      const [viewBox] = args;\n      this.svg.setAttribute('viewBox', viewBox);\n    } else {\n      const [xMin, yMin, width, height] = args;\n      const viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  } // ### Drawing helper methods:\n\n\n  applyAttributes(element, attributes) {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object.keys(attributes).forEach(propertyName => {\n      if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n        return;\n      }\n\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    });\n    return element;\n  } // ### Shape & Path Methods:\n\n\n  clear() {\n    // Clear the SVG by removing all inner children.\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    } // Replace the viewbox attribute we just removed:\n\n\n    this.scale(this.state.scale.x, this.state.scale.y);\n  } // ## Rectangles:\n\n\n  rect(x, y, width, height, attributes) {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    } // Create the rect & style it:\n\n\n    const rectangle = this.create('rect');\n\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black'\n      };\n    }\n\n    Vex.Merge(attributes, {\n      x,\n      y,\n      width,\n      height\n    });\n    this.applyAttributes(rectangle, attributes);\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    this.rect(x, y, width, height, this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a seperate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  } // ## Paths:\n\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  } // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n\n\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n\n    if (antiClockwise) {\n      sweepFlag = 1;\n\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ' ' + y1 + ' A' + radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + x2 + ' ' + y2;\n\n    if (!isNaN(this.pen.x) && !isNaN(this.pen.y)) {\n      this.peth += 'M' + this.pen.x + ' ' + this.pen.y;\n    }\n  }\n\n  closePath() {\n    this.path += 'Z';\n    return this;\n  } // Adapted from the source for Raphael's Element.glow\n\n\n  glow() {\n    // Calculate the width & paths of the glow:\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2; // Stroke at varying widths to create effect of gaussian blur:\n\n      for (let i = 1; i <= num_paths; i++) {\n        const attributes = {\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(sa.width * 0.4 / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3)\n        };\n        const path = this.create('path');\n        attributes.d = this.path;\n        this.applyAttributes(path, attributes);\n        this.add(path);\n      }\n    }\n\n    return this;\n  }\n\n  fill(attributes) {\n    // If our current path is set to glow, make it glow\n    this.glow();\n    const path = this.create('path');\n\n    if (typeof attributes === 'undefined') {\n      attributes = {};\n      Vex.Merge(attributes, this.attributes);\n      attributes.stroke = 'none';\n    }\n\n    attributes.d = this.path;\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke() {\n    // If our current path is set to glow, make it glow.\n    this.glow();\n    const path = this.create('path');\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.fill = 'none';\n    attributes['stroke-width'] = this.lineWidth;\n    attributes.d = this.path;\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  } // ## Text Methods:\n\n\n  measureText(text) {\n    const txt = this.create('text');\n\n    if (typeof txt.getBBox !== 'function') {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    txt.textContent = text;\n    this.applyAttributes(txt, this.attributes); // Temporarily add it to the document for measurement.\n\n    this.svg.appendChild(txt);\n    let bbox = txt.getBBox();\n\n    if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {\n      bbox = this.ieMeasureTextFix(bbox, text);\n    }\n\n    this.svg.removeChild(txt);\n    return bbox;\n  }\n\n  ieMeasureTextFix(bbox) {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n    const fontSize = Number(this.fontSize);\n    const m = 1.196;\n    const b = 1.9598;\n    const widthCorrection = m * fontSize + b;\n    const width = bbox.width - widthCorrection;\n    const height = bbox.height - 1.5; // Get non-protected copy:\n\n    const box = {\n      x: bbox.x,\n      y: bbox.y,\n      width,\n      height\n    };\n    return box;\n  }\n\n  fillText(text, x, y) {\n    if (!text || text.length <= 0) {\n      return;\n    }\n\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.stroke = 'none';\n    attributes.x = x;\n    attributes.y = y;\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray']\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color\n      },\n      lineWidth: this.lineWidth\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state['font-family'] = state.state['font-family'];\n    this.state['font-weight'] = state.state['font-weight'];\n    this.state['font-style'] = state.state['font-style'];\n    this.state['font-size'] = state.state['font-size'];\n    this.state.scale = state.state.scale;\n    this.attributes['font-family'] = state.attributes['font-family'];\n    this.attributes['font-weight'] = state.attributes['font-weight'];\n    this.attributes['font-style'] = state.attributes['font-style'];\n    this.attributes['font-size'] = state.attributes['font-size'];\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    this.lineWidth = state.lineWidth;\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/svgcontext.js"],"names":["Vex","attrNamesToIgnoreMap","path","x","y","width","height","rect","text","fontAttrNamesToIgnore","Merge","SVGContext","constructor","element","svgNS","svg","create","appendChild","groups","parent","pen","NaN","lineWidth","state","scale","attributes","background_attributes","shadow_attributes","color","state_stack","iePolyfill","svgElementType","document","createElementNS","openGroup","cls","id","attrs","group","push","setAttribute","Prefix","pointerBBox","closeGroup","pop","length","add","elem","navigator","ie","test","userAgent","setFont","family","size","weight","bold","italic","style","indexOf","replace","fontAttributes","fontSize","Number","setRawFont","font","trim","fontArray","split","match","setFillStyle","fill","setBackgroundFillStyle","stroke","setStrokeStyle","setShadowColor","setShadowBlur","blur","setLineWidth","setLineDash","lineDash","Object","prototype","toString","call","join","RERR","setLineCap","lineCap","resize","applyAttributes","visibleWidth","visibleHeight","setViewBox","args","viewBox","xMin","yMin","viewBoxString","attrNamesToIgnore","nodeName","keys","forEach","propertyName","setAttributeNS","clear","lastChild","removeChild","rectangle","fillRect","clearRect","beginPath","moveTo","lineTo","bezierCurveTo","x1","y1","x2","y2","quadraticCurveTo","arc","radius","startAngle","endAngle","antiClockwise","normalizeAngle","angle","Math","PI","tmp","delta","arcHelper","cos","sin","largeArcFlag","sweepFlag","isNaN","peth","closePath","glow","sa","num_paths","i","toFixed","opacity","d","measureText","txt","getBBox","textContent","bbox","ieMeasureTextFix","m","b","widthCorrection","box","fillText","save","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Gregory Ristow (2015)\n\nimport { Vex } from './vex';\n\nconst attrNamesToIgnoreMap = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n  },\n  rect: {\n  },\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n{\n  const fontAttrNamesToIgnore = {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  };\n\n  Vex.Merge(attrNamesToIgnoreMap.rect, fontAttrNamesToIgnore);\n  Vex.Merge(attrNamesToIgnoreMap.path, fontAttrNamesToIgnore);\n}\n\nexport class SVGContext {\n  constructor(element) {\n    // element is the parent DOM object\n    this.element = element;\n    // Create the SVG in the SVG namespace:\n    this.svgNS = 'http://www.w3.org/2000/svg';\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n\n    // Test for Internet Explorer\n    this.iePolyfill();\n  }\n\n  create(svgElementType) {\n    return document.createElementNS(this.svgNS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls, id, attrs) {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', Vex.Prefix(cls));\n    if (id) group.setAttribute('id', Vex.Prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup() {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem) {\n    this.parent.appendChild(elem);\n  }\n\n  // Tests if the browser is Internet Explorer; if it is,\n  // we do some tricks to improve text layout.  See the\n  // note at ieMeasureTextFix() for details.\n  iePolyfill() {\n    if (typeof (navigator) !== 'undefined') {\n      this.ie = (\n        /MSIE 9/i.test(navigator.userAgent) ||\n        /MSIE 10/i.test(navigator.userAgent) ||\n        /rv:11\\.0/i.test(navigator.userAgent) ||\n        /Trident/i.test(navigator.userAgent)\n      );\n    }\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family, size, weight) {\n    // Unlike canvas, in SVG italic is handled by font-style,\n    // not weight. So: we search the weight argument and\n    // apply bold and italic to weight and style respectively.\n    let bold = false;\n    let italic = false;\n    let style = 'normal';\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        italic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        bold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    weight = bold ? 'bold' : weight;\n    weight = (typeof weight === 'undefined' || weight === '') ? 'normal' : weight;\n\n    style = italic ? 'italic' : style;\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': weight,\n      'font-style': style,\n    };\n\n    // Store the font size so that if the browser is Internet\n    // Explorer we can fix its calculations of text width.\n    this.fontSize = Number(size);\n\n    Vex.Merge(this.attributes, fontAttributes);\n    Vex.Merge(this.state, fontAttributes);\n\n    return this;\n  }\n\n  setRawFont(font) {\n    font = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = font.split(' ');\n\n    this.attributes['font-family'] = fontArray[1];\n    this.state['font-family'] = fontArray[1];\n\n    this.attributes['font-size'] = fontArray[0];\n    this.state['font-size'] = fontArray[0];\n\n    // Saves fontSize for IE polyfill\n    this.fontSize = Number(fontArray[0].match(/\\d+/));\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]\n  setLineDash(lineDash) {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      lineDash = lineDash.join(', ');\n      this.attributes['stroke-dasharray'] = lineDash;\n      return this;\n    } else {\n      throw new Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  setLineCap(lineCap) {\n    this.attributes['stroke-linecap'] = lineCap;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- seperate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width;\n\n    this.svg.style.width = width;\n    this.svg.style.height = height;\n\n    const attributes = {\n      width,\n      height,\n    };\n\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x, y) {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas or Raphael contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  setViewBox(...args) {\n    // Override for \"x y w h\" style:\n    if (args.length === 1) {\n      const [viewBox] = args;\n      this.svg.setAttribute('viewBox', viewBox);\n    } else {\n      const [xMin, yMin, width, height] = args;\n      const viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element, attributes) {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object\n      .keys(attributes)\n      .forEach(propertyName => {\n        if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n          return;\n        }\n        element.setAttributeNS(null, propertyName, attributes[propertyName]);\n      });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear() {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n\n  rect(x, y, width, height, attributes) {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    Vex.Merge(attributes, {\n      x,\n      y,\n      width,\n      height,\n    });\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    this.rect(x, y, width, height, this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a seperate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' +\n      x1 + ' ' +\n      y1 + ',' +\n      x2 + ' ' +\n      y2 + ',' +\n      x + ' ' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' +\n      x1 + ' ' +\n      y1 + ',' +\n      x + ' ' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ' ' + y1 + ' A' +\n      radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' +\n      x2 + ' ' + y2;\n    if (!isNaN(this.pen.x) && !isNaN(this.pen.y)) {\n      this.peth += 'M' + this.pen.x + ' ' + this.pen.y;\n    }\n  }\n\n  closePath() {\n    this.path += 'Z';\n\n    return this;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    // Calculate the width & paths of the glow:\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      // Stroke at varying widths to create effect of gaussian blur:\n      for (let i = 1; i <= num_paths; i++) {\n        const attributes = {\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +((sa.width * 0.4) / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n        };\n\n        const path = this.create('path');\n        attributes.d = this.path;\n        this.applyAttributes(path, attributes);\n        this.add(path);\n      }\n    }\n    return this;\n  }\n\n  fill(attributes) {\n    // If our current path is set to glow, make it glow\n    this.glow();\n\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = {};\n      Vex.Merge(attributes, this.attributes);\n      attributes.stroke = 'none';\n    }\n\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke() {\n    // If our current path is set to glow, make it glow.\n    this.glow();\n\n    const path = this.create('path');\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.fill = 'none';\n    attributes['stroke-width'] = this.lineWidth;\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text) {\n    const txt = this.create('text');\n    if (typeof (txt.getBBox) !== 'function') {\n      return { x: 0, y: 0, width: 0, height: 0 };\n    }\n\n    txt.textContent = text;\n    this.applyAttributes(txt, this.attributes);\n\n    // Temporarily add it to the document for measurement.\n    this.svg.appendChild(txt);\n\n    let bbox = txt.getBBox();\n    if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {\n      bbox = this.ieMeasureTextFix(bbox, text);\n    }\n\n    this.svg.removeChild(txt);\n    return bbox;\n  }\n\n  ieMeasureTextFix(bbox) {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n\n    const fontSize = Number(this.fontSize);\n    const m = 1.196;\n    const b = 1.9598;\n    const widthCorrection = (m * fontSize) + b;\n    const width = bbox.width - widthCorrection;\n    const height = bbox.height - 1.5;\n\n    // Get non-protected copy:\n    const box = {\n      x: bbox.x,\n      y: bbox.y,\n      width,\n      height,\n    };\n\n    return box;\n  }\n\n  fillText(text, x, y) {\n    if (!text || text.length <= 0) {\n      return;\n    }\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.stroke = 'none';\n    attributes.x = x;\n    attributes.y = y;\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state['font-family'] = state.state['font-family'];\n    this.state['font-weight'] = state.state['font-weight'];\n    this.state['font-style'] = state.state['font-style'];\n    this.state['font-size'] = state.state['font-size'];\n    this.state.scale = state.state.scale;\n\n    this.attributes['font-family'] = state.attributes['font-family'];\n    this.attributes['font-weight'] = state.attributes['font-weight'];\n    this.attributes['font-style'] = state.attributes['font-style'];\n    this.attributes['font-size'] = state.attributes['font-size'];\n\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n\n    this.lineWidth = state.lineWidth;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
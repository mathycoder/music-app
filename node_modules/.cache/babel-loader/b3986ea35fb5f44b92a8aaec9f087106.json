{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nexport class StaveModifier extends Element {\n  static get Position() {\n    return {\n      LEFT: 1,\n      RIGHT: 2,\n      ABOVE: 3,\n      BELOW: 4,\n      BEGIN: 5,\n      END: 6\n    };\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'StaveModifier');\n    this.padding = 10;\n    this.position = StaveModifier.Position.ABOVE;\n    this.layoutMetrics = null;\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  setPosition(position) {\n    this.position = position;\n    return this;\n  }\n\n  getStave() {\n    return this.stave;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  setWidth(width) {\n    this.width = width;\n    return this;\n  }\n\n  getX() {\n    return this.x;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  getCategory() {\n    return '';\n  }\n\n  makeSpacer(padding) {\n    // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`\n    // instead of this hack.\n    return {\n      getContext() {\n        return true;\n      },\n\n      setStave() {},\n\n      renderToStave() {},\n\n      getMetrics() {\n        return {\n          width: padding\n        };\n      }\n\n    };\n  }\n\n  placeGlyphOnLine(glyph, stave, line, customShift = 0) {\n    glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs() + customShift);\n  }\n\n  getPadding(index) {\n    return index !== undefined && index < 2 ? 0 : this.padding;\n  }\n\n  setPadding(padding) {\n    this.padding = padding;\n    return this;\n  }\n\n  setLayoutMetrics(layoutMetrics) {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n\n  getLayoutMetrics() {\n    return this.layoutMetrics;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/stavemodifier.js"],"names":["Element","StaveModifier","Position","LEFT","RIGHT","ABOVE","BELOW","BEGIN","END","constructor","setAttribute","padding","position","layoutMetrics","getPosition","setPosition","getStave","stave","setStave","getWidth","width","setWidth","getX","x","setX","getCategory","makeSpacer","getContext","renderToStave","getMetrics","placeGlyphOnLine","glyph","line","customShift","setYShift","getYForLine","getYForGlyphs","getPadding","index","undefined","setPadding","setLayoutMetrics","getLayoutMetrics"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,aAAN,SAA4BD,OAA5B,CAAoC;AACzC,aAAWE,QAAX,GAAsB;AACpB,WAAO;AACLC,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,KAAK,EAAE,CAFF;AAGLC,MAAAA,KAAK,EAAE,CAHF;AAILC,MAAAA,KAAK,EAAE,CAJF;AAKLC,MAAAA,KAAK,EAAE,CALF;AAMLC,MAAAA,GAAG,EAAE;AANA,KAAP;AAQD;;AAEDC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,YAAL,CAAkB,MAAlB,EAA0B,eAA1B;AAEA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgBX,aAAa,CAACC,QAAd,CAAuBG,KAAvC;AACA,SAAKQ,aAAL,GAAqB,IAArB;AACD;;AAEDC,EAAAA,WAAW,GAAG;AAAE,WAAO,KAAKF,QAAZ;AAAuB;;AACvCG,EAAAA,WAAW,CAACH,QAAD,EAAW;AAAE,SAAKA,QAAL,GAAgBA,QAAhB;AAA0B,WAAO,IAAP;AAAc;;AAChEI,EAAAA,QAAQ,GAAG;AAAE,WAAO,KAAKC,KAAZ;AAAoB;;AACjCC,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AAAE,SAAKA,KAAL,GAAaA,KAAb;AAAoB,WAAO,IAAP;AAAc;;AACpDE,EAAAA,QAAQ,GAAG;AAAE,WAAO,KAAKC,KAAZ;AAAoB;;AACjCC,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AAAE,SAAKA,KAAL,GAAaA,KAAb;AAAoB,WAAO,IAAP;AAAc;;AACpDE,EAAAA,IAAI,GAAG;AAAE,WAAO,KAAKC,CAAZ;AAAgB;;AACzBC,EAAAA,IAAI,CAACD,CAAD,EAAI;AAAE,SAAKA,CAAL,GAASA,CAAT;AAAY,WAAO,IAAP;AAAc;;AACpCE,EAAAA,WAAW,GAAG;AAAE,WAAO,EAAP;AAAY;;AAC5BC,EAAAA,UAAU,CAACf,OAAD,EAAU;AAClB;AACA;AAEA,WAAO;AACLgB,MAAAA,UAAU,GAAG;AAAE,eAAO,IAAP;AAAc,OADxB;;AAELT,MAAAA,QAAQ,GAAG,CAAE,CAFR;;AAGLU,MAAAA,aAAa,GAAG,CAAE,CAHb;;AAILC,MAAAA,UAAU,GAAG;AACX,eAAO;AAAET,UAAAA,KAAK,EAAET;AAAT,SAAP;AACD;;AANI,KAAP;AAQD;;AACDmB,EAAAA,gBAAgB,CAACC,KAAD,EAAQd,KAAR,EAAee,IAAf,EAAqBC,WAAW,GAAG,CAAnC,EAAsC;AACpDF,IAAAA,KAAK,CAACG,SAAN,CAAgBjB,KAAK,CAACkB,WAAN,CAAkBH,IAAlB,IAA0Bf,KAAK,CAACmB,aAAN,EAA1B,GAAkDH,WAAlE;AACD;;AACDI,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,WAAQA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,GAAG,CAA/B,GAAmC,CAAnC,GAAuC,KAAK3B,OAApD;AACD;;AACD6B,EAAAA,UAAU,CAAC7B,OAAD,EAAU;AAAE,SAAKA,OAAL,GAAeA,OAAf;AAAwB,WAAO,IAAP;AAAc;;AAC5D8B,EAAAA,gBAAgB,CAAC5B,aAAD,EAAgB;AAC9B,SAAKA,aAAL,GAAqBA,aAArB;AACA,WAAO,IAAP;AACD;;AACD6B,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK7B,aAAZ;AACD;;AAxDwC","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { Element } from './element';\n\nexport class StaveModifier extends Element {\n  static get Position() {\n    return {\n      LEFT: 1,\n      RIGHT: 2,\n      ABOVE: 3,\n      BELOW: 4,\n      BEGIN: 5,\n      END: 6,\n    };\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'StaveModifier');\n\n    this.padding = 10;\n    this.position = StaveModifier.Position.ABOVE;\n    this.layoutMetrics = null;\n  }\n\n  getPosition() { return this.position; }\n  setPosition(position) { this.position = position; return this; }\n  getStave() { return this.stave; }\n  setStave(stave) { this.stave = stave; return this; }\n  getWidth() { return this.width; }\n  setWidth(width) { this.width = width; return this; }\n  getX() { return this.x; }\n  setX(x) { this.x = x; return this; }\n  getCategory() { return ''; }\n  makeSpacer(padding) {\n    // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`\n    // instead of this hack.\n\n    return {\n      getContext() { return true; },\n      setStave() {},\n      renderToStave() {},\n      getMetrics() {\n        return { width: padding };\n      },\n    };\n  }\n  placeGlyphOnLine(glyph, stave, line, customShift = 0) {\n    glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs() + customShift);\n  }\n  getPadding(index) {\n    return (index !== undefined && index < 2 ? 0 : this.padding);\n  }\n  setPadding(padding) { this.padding = padding; return this; }\n  setLayoutMetrics(layoutMetrics) {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n  getLayoutMetrics() {\n    return this.layoutMetrics;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
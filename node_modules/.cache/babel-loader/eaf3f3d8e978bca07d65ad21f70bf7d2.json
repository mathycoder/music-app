{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Renderer } from './renderer'; // To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n\nfunction L(...args) {\n  if (TextBracket.DEBUG) Vex.L('Vex.Flow.TextBracket', args);\n}\n\nexport class TextBracket extends Element {\n  // FIXME: Modifier.Position is singular while this is plural, make consistent\n  static get Positions() {\n    return {\n      TOP: 1,\n      BOTTOM: -1\n    };\n  }\n\n  static get PositionString() {\n    return {\n      top: TextBracket.Positions.TOP,\n      bottom: TextBracket.Positions.BOTTOM\n    };\n  }\n\n  constructor({\n    start,\n    stop,\n    text = '',\n    superscript = '',\n    position = TextBracket.Positions.TOP\n  }) {\n    super();\n    this.setAttribute('type', 'TextBracket');\n    this.start = start;\n    this.stop = stop;\n    this.text = text;\n    this.superscript = superscript;\n    this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n    this.line = 1;\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic'\n    };\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true\n    };\n  } // Apply the text backet styling to the provided `context`\n\n\n  applyStyle(context) {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n    return this;\n  } // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n\n\n  setDashed(dashed, dash) {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  } // Set the font for the text\n\n\n  setFont(font) {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font,\n      ...font\n    };\n    return this;\n  } // Set the rendering `context` for the octave bracket\n\n\n  setLine(line) {\n    this.line = line;\n    return this;\n  } // Draw the octave bracket on the rendering context\n\n\n  draw() {\n    const ctx = this.context;\n    this.setRendered();\n    let y = 0;\n\n    switch (this.position) {\n      case TextBracket.Positions.TOP:\n        y = this.start.getStave().getYForTopText(this.line);\n        break;\n\n      case TextBracket.Positions.BOTTOM:\n        y = this.start.getStave().getYForBottomText(this.line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n\n      default:\n        throw new Vex.RERR('InvalidPosition', `The position ${this.position} is invalid`);\n    } // Get the preliminary start and stop coordintates for the bracket\n\n\n    const start = {\n      x: this.start.getAbsoluteX(),\n      y\n    };\n    const stop = {\n      x: this.stop.getAbsoluteX(),\n      y\n    };\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n    const bracket_height = this.render_options.bracket_height * this.position;\n    ctx.save();\n    this.applyStyle(ctx); // Draw text\n\n    ctx.fillText(this.text, start.x, start.y); // Get the width and height for the octave number\n\n    const main_width = ctx.measureText(this.text).width;\n    const main_height = ctx.measureText('M').width; // Calculate the y position for the super script\n\n    const super_y = start.y - main_height / 2.5; // Draw the superscript\n\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y); // Determine width and height of the superscript\n\n    const superscript_width = ctx.measureText(this.superscript).width;\n    const super_height = ctx.measureText('M').width; // Setup initial coordinates for the bracket line\n\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth(); // Adjust x and y coordinates based on position\n\n    if (this.position === TextBracket.Positions.TOP) {\n      start_x += main_width + superscript_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracket.Positions.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += superscript_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash); // Ending Bracket\n\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y); // Main line\n\n      ctx.lineTo(end_x, line_y);\n\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/textbracket.js"],"names":["Vex","Flow","Element","Renderer","L","args","TextBracket","DEBUG","Positions","TOP","BOTTOM","PositionString","top","bottom","constructor","start","stop","text","superscript","position","setAttribute","line","font","family","size","weight","render_options","dashed","dash","color","line_width","show_bracket","bracket_height","underline_superscript","applyStyle","context","setFont","setStrokeStyle","setFillStyle","setLineWidth","setDashed","setLine","draw","ctx","setRendered","y","getStave","getYForTopText","getYForBottomText","TEXT_HEIGHT_OFFSET_HACK","RERR","x","getAbsoluteX","save","fillText","main_width","measureText","width","main_height","super_y","superscript_width","super_height","start_x","line_y","end_x","getGlyph","getWidth","drawDashedLine","beginPath","moveTo","lineTo","stroke","closePath","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Renderer } from './renderer';\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\nfunction L(...args) { if (TextBracket.DEBUG) Vex.L('Vex.Flow.TextBracket', args); }\n\nexport class TextBracket extends Element {\n  // FIXME: Modifier.Position is singular while this is plural, make consistent\n  static get Positions() {\n    return {\n      TOP: 1,\n      BOTTOM: -1,\n    };\n  }\n\n  static get PositionString() {\n    return {\n      top: TextBracket.Positions.TOP,\n      bottom: TextBracket.Positions.BOTTOM,\n    };\n  }\n\n  constructor({\n    start,\n    stop,\n    text = '',\n    superscript = '',\n    position = TextBracket.Positions.TOP,\n  }) {\n    super();\n    this.setAttribute('type', 'TextBracket');\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string'\n      ? TextBracket.PositionString[position]\n      : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context) {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed, dash) {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font) {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line) { this.line = line; return this; }\n\n  // Draw the octave bracket on the rendering context\n  draw() {\n    const ctx = this.context;\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracket.Positions.TOP:\n        y = this.start.getStave().getYForTopText(this.line);\n        break;\n      case TextBracket.Positions.BOTTOM:\n        y = this.start.getStave().getYForBottomText(this.line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_width = ctx.measureText(this.text).width;\n    const main_height = ctx.measureText('M').width;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - (main_height / 2.5);\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const superscript_width = ctx.measureText(this.superscript).width;\n    const super_height = ctx.measureText('M').width;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracket.Positions.TOP) {\n      start_x += main_width + superscript_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracket.Positions.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += superscript_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(\n        ctx,\n        start_x,\n        line_y,\n        end_x,\n        line_y,\n        this.render_options.dash\n      );\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + (1 * this.position),\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
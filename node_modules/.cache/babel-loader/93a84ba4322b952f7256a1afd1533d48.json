{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Fraction class that represents a rational number\n//\n// @author zz85\n// @author incompleteopus (modifications)\n\n/* eslint-disable no-underscore-dangle */\nimport { Vex } from './vex';\nexport class Fraction {\n  /**\n   * GCD: Find greatest common divisor using Euclidean algorithm\n   */\n  static GCD(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n      throw new Vex.RERR('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n  /**\n   * LCM: Lowest common multiple\n   */\n\n\n  static LCM(a, b) {\n    return a * b / Fraction.GCD(a, b);\n  }\n  /**\n   * LCMM: Lowest common multiple for more than two numbers\n   */\n\n\n  static LCMM(args) {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      const arg0 = args[0];\n      args.shift();\n      return Fraction.LCM(arg0, Fraction.LCMM(args));\n    }\n  }\n\n  constructor(numerator, denominator) {\n    this.set(numerator, denominator);\n  }\n\n  set(numerator, denominator) {\n    this.numerator = numerator === undefined ? 1 : numerator;\n    this.denominator = denominator === undefined ? 1 : denominator;\n    return this;\n  }\n\n  value() {\n    return this.numerator / this.denominator;\n  }\n\n  simplify() {\n    let u = this.numerator;\n    let d = this.denominator;\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n\n    return this.set(u, d);\n  }\n\n  add(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  subtract(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n\n  multiply(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n\n  divide(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  } // Simplifies both sides and checks if they are equal.\n\n\n  equals(compare) {\n    const a = Fraction.__compareA.copy(compare).simplify();\n\n    const b = Fraction.__compareB.copy(this).simplify();\n\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  } // Greater than operator.\n\n\n  greaterThan(compare) {\n    const a = Fraction.__compareB.copy(this);\n\n    a.subtract(compare);\n    return a.numerator > 0;\n  } // Greater than or equals operator.\n\n\n  greaterThanEquals(compare) {\n    const a = Fraction.__compareB.copy(this);\n\n    a.subtract(compare);\n    return a.numerator >= 0;\n  } // Less than operator.\n\n\n  lessThan(compare) {\n    return !this.greaterThanEquals(compare);\n  } // Less than or equals operator.\n\n\n  lessThanEquals(compare) {\n    return !this.greaterThan(compare);\n  } // Creates a new copy with this current values.\n\n\n  clone() {\n    return new Fraction(this.numerator, this.denominator);\n  } // Copies value of another Fraction into itself.\n\n\n  copy(copy) {\n    if (typeof copy === 'number') {\n      return this.set(copy || 0, 1);\n    }\n\n    return this.set(copy.numerator, copy.denominator);\n  } // Returns the integer component eg. (4/2) == 2\n\n\n  quotient() {\n    return Math.floor(this.numerator / this.denominator);\n  } // Returns the fraction component when reduced to a mixed number\n\n\n  fraction() {\n    return this.numerator % this.denominator;\n  } // Returns the absolute value\n\n\n  abs() {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  } // Returns a raw string representation\n\n\n  toString() {\n    return this.numerator + '/' + this.denominator;\n  } // Returns a simplified string respresentation\n\n\n  toSimplifiedString() {\n    return Fraction.__tmp.copy(this).simplify().toString();\n  } // Returns string representation in mixed form\n\n\n  toMixedString() {\n    let s = '';\n    const q = this.quotient();\n\n    const f = Fraction.__tmp.copy(this);\n\n    if (q < 0) {\n      f.abs().fraction();\n    } else {\n      f.fraction();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ' ' + f.toSimplifiedString();\n      }\n    } else {\n      if (f.numerator === 0) {\n        s = '0';\n      } else {\n        s = f.toSimplifiedString();\n      }\n    }\n\n    return s;\n  } // Parses a fraction string\n\n\n  parse(str) {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n    return this.set(n, d);\n  }\n\n} // Temporary cached objects\n\nFraction.__compareA = new Fraction();\nFraction.__compareB = new Fraction();\nFraction.__tmp = new Fraction();","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/fraction.js"],"names":["Vex","Fraction","GCD","a","b","RERR","t","LCM","LCMM","args","length","arg0","shift","constructor","numerator","denominator","set","undefined","value","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","lcm","subtract","multiply","divide","equals","compare","__compareA","copy","__compareB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","quotient","Math","floor","fraction","abs","toString","toSimplifiedString","__tmp","toMixedString","s","q","f","parse","str","i","split","n","parseInt"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Fraction class that represents a rational number\n//\n// @author zz85\n// @author incompleteopus (modifications)\n\n/* eslint-disable no-underscore-dangle */\n\nimport { Vex } from './vex';\nexport class Fraction {\n  /**\n   * GCD: Find greatest common divisor using Euclidean algorithm\n   */\n  static GCD(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n      throw new Vex.RERR('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /**\n   * LCM: Lowest common multiple\n   */\n  static LCM(a, b) {\n    return ((a * b) / Fraction.GCD(a, b));\n  }\n\n  /**\n   * LCMM: Lowest common multiple for more than two numbers\n   */\n  static LCMM(args) {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      const arg0 = args[0];\n      args.shift();\n      return Fraction.LCM(arg0, Fraction.LCMM(args));\n    }\n  }\n\n  constructor(numerator, denominator) {\n    this.set(numerator, denominator);\n  }\n  set(numerator, denominator) {\n    this.numerator = numerator === undefined ? 1 : numerator;\n    this.denominator = denominator === undefined ? 1 : denominator;\n    return this;\n  }\n  value() {\n    return this.numerator / this.denominator;\n  }\n  simplify() {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n  add(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  subtract(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  multiply(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n  divide(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  // Simplifies both sides and checks if they are equal.\n  equals(compare) {\n    const a = Fraction.__compareA.copy(compare).simplify();\n    const b = Fraction.__compareB.copy(this).simplify();\n\n    return (a.numerator === b.numerator) && (a.denominator === b.denominator);\n  }\n\n  // Greater than operator.\n  greaterThan(compare) {\n    const a = Fraction.__compareB.copy(this);\n    a.subtract(compare);\n    return (a.numerator > 0);\n  }\n\n  // Greater than or equals operator.\n  greaterThanEquals(compare) {\n    const a = Fraction.__compareB.copy(this);\n    a.subtract(compare);\n    return (a.numerator >= 0);\n  }\n\n  // Less than operator.\n  lessThan(compare) {\n    return !(this.greaterThanEquals(compare));\n  }\n\n  // Less than or equals operator.\n  lessThanEquals(compare) {\n    return !(this.greaterThan(compare));\n  }\n\n  // Creates a new copy with this current values.\n  clone() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  // Copies value of another Fraction into itself.\n  copy(copy) {\n    if (typeof copy === 'number') {\n      return this.set(copy || 0, 1);\n    }\n    return this.set(copy.numerator, copy.denominator);\n  }\n\n  // Returns the integer component eg. (4/2) == 2\n  quotient() {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  // Returns the fraction component when reduced to a mixed number\n  fraction() {\n    return this.numerator % this.denominator;\n  }\n\n  // Returns the absolute value\n  abs() {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  // Returns a raw string representation\n  toString() {\n    return this.numerator + '/' + this.denominator;\n  }\n\n  // Returns a simplified string respresentation\n  toSimplifiedString() {\n    return Fraction.__tmp.copy(this).simplify().toString();\n  }\n\n  // Returns string representation in mixed form\n  toMixedString() {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__tmp.copy(this);\n\n    if (q < 0) {\n      f.abs().fraction();\n    } else {\n      f.fraction();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ' ' + f.toSimplifiedString();\n      }\n    } else {\n      if (f.numerator === 0) {\n        s = '0';\n      } else {\n        s = f.toSimplifiedString();\n      }\n    }\n\n    return s;\n  }\n\n  // Parses a fraction string\n  parse(str) {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = (i[1]) ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n// Temporary cached objects\nFraction.__compareA = new Fraction();\nFraction.__compareB = new Fraction();\nFraction.__tmp = new Fraction();\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A rendering context for the Raphael backend.\n//\n// ## Warning: Deprecated for SVGContext\n// Except in instances where SVG support for IE < 9.0 is\n// needed, SVGContext is recommended.\nexport class RaphaelContext {\n  constructor(element) {\n    this.element = element;\n    this.paper = Raphael(element); // eslint-disable-line\n\n    this.path = '';\n    this.pen = {\n      x: 0,\n      y: 0\n    };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: {\n        x: 1,\n        y: 1\n      },\n      font_family: 'Arial',\n      font_size: 8,\n      font_weight: 800\n    };\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'font': '10pt Arial'\n    };\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'font': '10pt Arial'\n    };\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black'\n    };\n    this.state_stack = [];\n  } // Containers not implemented\n\n\n  openGroup() {}\n\n  closeGroup() {}\n\n  add() {}\n\n  setFont(family, size, weight) {\n    this.state.font_family = family;\n    this.state.font_size = size;\n    this.state.font_weight = weight;\n    this.attributes.font = (this.state.font_weight || '') + ' ' + this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.attributes.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  } // Empty because there is no equivalent in SVG\n\n\n  setLineDash() {\n    return this;\n  }\n\n  setLineCap() {\n    return this;\n  }\n\n  scale(x, y) {\n    this.state.scale = {\n      x,\n      y\n    }; // The scale() method is deprecated as of Raphael.JS 2.0, and\n    // can no longer be used as an option in an Element.attr() call.\n    // It is preserved here for users running earlier versions of\n    // Raphael.JS, though it has no effect on the SVG output in\n    // Raphael 2 and higher.\n\n    this.attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.attributes.scale = x + ',' + y + ',0,0';\n    this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n    this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.background_attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n    return this;\n  }\n\n  clear() {\n    this.paper.clear();\n  }\n\n  resize(width, height) {\n    this.element.style.width = width;\n    this.paper.setSize(width, height);\n    return this;\n  } // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n  // is resized.\n  //\n  // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n\n\n  setViewBox(viewBox) {\n    this.paper.canvas.setAttribute('viewBox', viewBox);\n  }\n\n  rect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes).attr('fill', 'none').attr('stroke-width', this.lineWidth);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.background_attributes);\n    return this;\n  }\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = 0;\n    this.pen.y = 0;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' + x1 + ',' + y1 + ',' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  } // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n\n\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n\n    if (antiClockwise) {\n      sweepFlag = 1;\n\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ',' + y1 + ',A' + radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' + x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;\n  } // Adapted from the source for Raphael's Element.glow\n\n\n  glow() {\n    const out = this.paper.set();\n\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n\n      for (let i = 1; i <= num_paths; i++) {\n        out.push(this.paper.path(this.path).attr({\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(sa.width / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n          // See note in this.scale(): In Raphael the scale() method\n          // is deprecated and removed as of Raphael 2.0 and replaced\n          // by the transform() method.  It is preserved here for\n          // users with earlier versions of Raphael, but has no effect\n          // on the output SVG in Raphael 2.0+.\n          transform: this.attributes.transform,\n          scale: this.attributes.scale\n        }));\n      }\n    }\n\n    return out;\n  }\n\n  fill() {\n    const elem = this.paper.path(this.path).attr(this.attributes).attr('stroke-width', 0);\n    this.glow(elem);\n    return this;\n  }\n\n  stroke() {\n    // The first line of code below is, unfortunately, a bit of a hack:\n    // Raphael's transform() scaling does not scale the stroke-width, so\n    // in order to scale a stroke, we have to manually scale the\n    // stroke-width.\n    //\n    // This works well so long as the X & Y states for this.scale() are\n    // relatively similar.  However, if they are very different, we\n    // would expect horizontal and vertical lines to have different\n    // stroke-widths.\n    //\n    // In the future, if we want to support very divergent values for\n    // horizontal and vertical scaling, we may want to consider\n    // implementing SVG scaling with properties of the SVG viewBox &\n    // viewPort and removing it entirely from the Element.attr() calls.\n    // This would more closely parallel the approach taken in\n    // canvascontext.js as well.\n    const strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;\n    const elem = this.paper.path(this.path).attr(this.attributes).attr('fill', 'none').attr('stroke-width', strokeWidth);\n    this.glow(elem);\n    return this;\n  }\n\n  closePath() {\n    this.path += 'Z';\n    return this;\n  }\n\n  measureText(text) {\n    const txt = this.paper.text(0, 0, text).attr(this.attributes).attr('fill', 'none').attr('stroke', 'none');\n    const bounds = txt.getBBox();\n    txt.remove();\n    return {\n      width: bounds.width,\n      height: bounds.height\n    };\n  }\n\n  fillText(text, x, y) {\n    this.paper.text(x + this.measureText(text).width / 2, y - this.state.font_size / (2.25 * this.state.scale.y), text).attr(this.attributes);\n    return this;\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        font_family: this.state.font_family\n      },\n      attributes: {\n        font: this.attributes.font,\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width']\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color\n      }\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state.font_family = state.state.font_family;\n    this.attributes.font = state.attributes.font;\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/raphaelcontext.js"],"names":["RaphaelContext","constructor","element","paper","Raphael","path","pen","x","y","lineWidth","state","scale","font_family","font_size","font_weight","attributes","background_attributes","shadow_attributes","width","color","state_stack","openGroup","closeGroup","add","setFont","family","size","weight","font","setRawFont","setFillStyle","style","fill","setBackgroundFillStyle","stroke","setStrokeStyle","setShadowColor","setShadowBlur","blur","setLineWidth","setLineDash","setLineCap","transform","clear","resize","height","setSize","setViewBox","viewBox","canvas","setAttribute","rect","attr","fillRect","clearRect","beginPath","moveTo","lineTo","bezierCurveTo","x1","y1","x2","y2","quadraticCurveTo","arc","radius","startAngle","endAngle","antiClockwise","normalizeAngle","angle","Math","PI","tmp","delta","arcHelper","cos","sin","largeArcFlag","sweepFlag","glow","out","set","sa","num_paths","i","push","toFixed","opacity","elem","strokeWidth","closePath","measureText","text","txt","bounds","getBBox","remove","fillText","save","restore","pop"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A rendering context for the Raphael backend.\n//\n// ## Warning: Deprecated for SVGContext\n// Except in instances where SVG support for IE < 9.0 is\n// needed, SVGContext is recommended.\n\nexport class RaphaelContext {\n  constructor(element) {\n    this.element = element;\n    this.paper = Raphael(element); // eslint-disable-line\n    this.path = '';\n    this.pen = { x: 0, y: 0 };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      font_family: 'Arial',\n      font_size: 8,\n      font_weight: 800,\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'font': '10pt Arial',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'font': '10pt Arial',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  // Containers not implemented\n  openGroup() {}\n  closeGroup() {}\n  add() {}\n\n  setFont(family, size, weight) {\n    this.state.font_family = family;\n    this.state.font_size = size;\n    this.state.font_weight = weight;\n    this.attributes.font = (this.state.font_weight || '') + ' ' +\n      (this.state.font_size * this.state.scale.x) + 'pt ' +\n      this.state.font_family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.attributes.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // Empty because there is no equivalent in SVG\n  setLineDash() { return this; }\n  setLineCap() { return this; }\n\n  scale(x, y) {\n    this.state.scale = { x, y };\n    // The scale() method is deprecated as of Raphael.JS 2.0, and\n    // can no longer be used as an option in an Element.attr() call.\n    // It is preserved here for users running earlier versions of\n    // Raphael.JS, though it has no effect on the SVG output in\n    // Raphael 2 and higher.\n    this.attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.attributes.scale = x + ',' + y + ',0,0';\n    this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' +\n      this.state.font_family;\n    this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.background_attributes.font = this.state.font_size *\n      this.state.scale.x + 'pt ' +\n      this.state.font_family;\n    return this;\n  }\n\n  clear() { this.paper.clear(); }\n\n  resize(width, height) {\n    this.element.style.width = width;\n    this.paper.setSize(width, height);\n    return this;\n  }\n\n  // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n  // is resized.\n  //\n  // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n  setViewBox(viewBox) {\n    this.paper.canvas.setAttribute('viewBox', viewBox);\n  }\n\n  rect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke-width', this.lineWidth);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5)\n      .attr(this.background_attributes);\n    return this;\n  }\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = 0;\n    this.pen.y = 0;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' +\n      x1 + ',' +\n      y1 + ',' +\n      x2 + ',' +\n      y2 + ',' +\n      x + ',' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' +\n      x1 + ',' +\n      y1 + ',' +\n      x + ',' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ',' + y1 + ',A' +\n      radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' +\n      x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    const out = this.paper.set();\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      for (let i = 1; i <= num_paths; i++) {\n        out.push(this.paper.path(this.path).attr({\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(sa.width / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n          // See note in this.scale(): In Raphael the scale() method\n          // is deprecated and removed as of Raphael 2.0 and replaced\n          // by the transform() method.  It is preserved here for\n          // users with earlier versions of Raphael, but has no effect\n          // on the output SVG in Raphael 2.0+.\n          transform: this.attributes.transform,\n          scale: this.attributes.scale,\n        }));\n      }\n    }\n    return out;\n  }\n\n  fill() {\n    const elem = this.paper.path(this.path)\n      .attr(this.attributes)\n      .attr('stroke-width', 0);\n    this.glow(elem);\n    return this;\n  }\n\n  stroke() {\n    // The first line of code below is, unfortunately, a bit of a hack:\n    // Raphael's transform() scaling does not scale the stroke-width, so\n    // in order to scale a stroke, we have to manually scale the\n    // stroke-width.\n    //\n    // This works well so long as the X & Y states for this.scale() are\n    // relatively similar.  However, if they are very different, we\n    // would expect horizontal and vertical lines to have different\n    // stroke-widths.\n    //\n    // In the future, if we want to support very divergent values for\n    // horizontal and vertical scaling, we may want to consider\n    // implementing SVG scaling with properties of the SVG viewBox &\n    // viewPort and removing it entirely from the Element.attr() calls.\n    // This would more closely parallel the approach taken in\n    // canvascontext.js as well.\n\n    const strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;\n    const elem = this.paper.path(this.path)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke-width', strokeWidth);\n    this.glow(elem);\n    return this;\n  }\n\n  closePath() {\n    this.path += 'Z';\n    return this;\n  }\n\n  measureText(text) {\n    const txt = this.paper.text(0, 0, text)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke', 'none');\n    const bounds = txt.getBBox();\n    txt.remove();\n\n    return {\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n\n  fillText(text, x, y) {\n    this.paper\n      .text(\n        x + (this.measureText(text).width / 2),\n        y - (this.state.font_size / (2.25 * this.state.scale.y)),\n        text\n      )\n      .attr(this.attributes);\n\n    return this;\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        font_family: this.state.font_family,\n      },\n      attributes: {\n        font: this.attributes.font,\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state.font_family = state.state.font_family;\n    this.attributes.font = state.attributes.font;\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
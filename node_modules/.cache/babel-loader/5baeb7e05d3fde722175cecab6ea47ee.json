{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables'; // To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n\nfunction L(...args) {\n  if (Stem.DEBUG) Vex.L('Vex.Flow.Stem', args);\n}\n\nexport class Stem extends Element {\n  static get CATEGORY() {\n    return 'stem';\n  } // Stem directions\n\n\n  static get UP() {\n    return 1;\n  }\n\n  static get DOWN() {\n    return -1;\n  } // Theme\n\n\n  static get WIDTH() {\n    return Flow.STEM_WIDTH;\n  }\n\n  static get HEIGHT() {\n    return Flow.STEM_HEIGHT;\n  }\n\n  constructor(options = {}) {\n    super();\n    this.setAttribute('type', 'Stem'); // Default notehead x bounds\n\n    this.x_begin = options.x_begin || 0;\n    this.x_end = options.x_end || 0; // Y bounds for top/bottom most notehead\n\n    this.y_top = options.y_top || 0;\n    this.y_bottom = options.y_bottom || 0; // Stem top extension\n\n    this.stem_extension = options.stem_extension || 0; // Direction of the stem\n\n    this.stem_direction = options.stem_direction || 0; // Flag to override all draw calls\n\n    this.hide = options.hide || false;\n    this.isStemlet = options.isStemlet || false;\n    this.stemletHeight = options.stemletHeight || 0; // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options) {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options.stem_down_y_base_offset || 0;\n  } // Set the x bounds for the default notehead\n\n\n  setNoteHeadXBounds(x_begin, x_end) {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  } // Set the direction of the stem in relation to the noteheads\n\n\n  setDirection(direction) {\n    this.stem_direction = direction;\n  } // Set the extension for the stem, generally for flags or beams\n\n\n  setExtension(ext) {\n    this.stem_extension = ext;\n  }\n\n  getExtension() {\n    return this.stem_extension;\n  } // The the y bounds for the top and bottom noteheads\n\n\n  setYBounds(y_top, y_bottom) {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  } // The category of the object\n\n\n  getCategory() {\n    return Stem.CATEGORY;\n  } // Gets the entire height for the stem\n\n\n  getHeight() {\n    const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset; // eslint-disable-line max-len\n\n    return (this.y_bottom - this.y_top) * this.stem_direction + (Stem.HEIGHT - y_offset + this.stem_extension) * this.stem_direction;\n  }\n\n  getBoundingBox() {\n    throw new Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');\n  } // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n\n\n  getExtents() {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n    return {\n      topY: stemTipY,\n      baseY: outerMostNoteheadY\n    };\n  }\n\n  setVisibility(isVisible) {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet, stemletHeight) {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  } // Render the stem onto the canvas\n\n\n  draw() {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n    let y_base_offset = 0;\n\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom); // The offset from the stem's base which is required fo satisfy the stemlet height\n\n    const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0; // Draw the stem\n\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/stem.js"],"names":["Vex","Element","Flow","L","args","Stem","DEBUG","CATEGORY","UP","DOWN","WIDTH","STEM_WIDTH","HEIGHT","STEM_HEIGHT","constructor","options","setAttribute","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","setOptions","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","setNoteHeadXBounds","setDirection","direction","setExtension","ext","getExtension","setYBounds","getCategory","getHeight","y_offset","getBoundingBox","RERR","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","Math","min","max","outerMostNoteheadY","stemTipY","topY","baseY","setVisibility","isVisible","setStemlet","draw","setRendered","ctx","checkContext","stem_x","stem_y","y_base_offset","stemletYOffset","save","applyStyle","beginPath","setLineWidth","moveTo","lineTo","stroke","restoreStyle","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\nfunction L(...args) { if (Stem.DEBUG) Vex.L('Vex.Flow.Stem', args); }\n\nexport class Stem extends Element {\n  static get CATEGORY() { return 'stem'; }\n\n  // Stem directions\n  static get UP() {\n    return 1;\n  }\n  static get DOWN() {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH() {\n    return Flow.STEM_WIDTH;\n  }\n  static get HEIGHT() {\n    return Flow.STEM_HEIGHT;\n  }\n\n  constructor(options = {}) {\n    super();\n    this.setAttribute('type', 'Stem');\n\n    // Default notehead x bounds\n    this.x_begin = options.x_begin || 0;\n    this.x_end = options.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options.y_top || 0;\n    this.y_bottom = options.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options.hide || false;\n\n    this.isStemlet = options.isStemlet || false;\n    this.stemletHeight = options.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options) {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options.stem_down_y_offset || 0;\n    this.stem_up_y_base_offset = options.stem_up_y_base_offset || 0;\n    this.stem_down_y_base_offset = options.stem_down_y_base_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin, x_end) {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction) { this.stem_direction = direction; }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext) { this.stem_extension = ext; }\n  getExtension() { return this.stem_extension; }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top, y_bottom) {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // The category of the object\n  getCategory() { return Stem.CATEGORY; }\n\n  // Gets the entire height for the stem\n  getHeight() {\n    const y_offset = (this.stem_direction === Stem.UP) ? this.stem_up_y_offset : this.stem_down_y_offset; // eslint-disable-line max-len\n    return ((this.y_bottom - this.y_top) * this.stem_direction) +\n           ((Stem.HEIGHT - y_offset + this.stem_extension) * this.stem_direction);\n  }\n  getBoundingBox() {\n    throw new Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents() {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + (stemHeight * -this.stem_direction);\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible) {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet, stemletHeight) {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  // Render the stem onto the canvas\n  draw() {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    let y_base_offset = 0;\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n      y_base_offset = this.stem_down_y_base_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n      y_base_offset = this.stem_up_y_base_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet\n      ? stemHeight - this.stemletHeight * this.stem_direction\n      : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - (this.renderHeightAdjustment * stem_direction));\n    ctx.stroke();\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
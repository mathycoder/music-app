{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a generic base class for VexFlow, with implementations\n// of general functions and properties that can be inherited by all VexFlow elements.\nimport { Vex } from './vex';\nimport { Registry } from './registry';\nimport { Flow } from './tables';\nexport class Element {\n  static newID() {\n    return 'auto' + Element.ID++;\n  }\n\n  constructor({\n    type\n  } = {}) {\n    this.attrs = {\n      id: Element.newID(),\n      el: null,\n      type: type || 'Base',\n      classes: {}\n    };\n    this.boundingBox = null;\n    this.context = null;\n    this.rendered = false;\n    this.fontStack = Flow.DEFAULT_FONT_STACK;\n    this.musicFont = Flow.DEFAULT_FONT_STACK[0]; // If a default registry exist, then register with it right away.\n\n    if (Registry.getDefaultRegistry()) {\n      Registry.getDefaultRegistry().register(this);\n    }\n  } // set music font\n\n\n  setFontStack(fontStack) {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n\n  getFontStack() {\n    return this.fontStack;\n  } // set the draw style of a stemmable note:\n\n\n  setStyle(style) {\n    this.style = style;\n    return this;\n  }\n\n  getStyle() {\n    return this.style;\n  } // Apply current style to Canvas `context`\n\n\n  applyStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  restoreStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n    context.restore();\n    return this;\n  } // draw with style of an element.\n\n\n  drawWithStyle() {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  } // An element can have multiple class labels.\n\n\n  hasClass(className) {\n    return this.attrs.classes[className] === true;\n  }\n\n  addClass(className) {\n    this.attrs.classes[className] = true;\n\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: className,\n        oldValue: null\n      });\n    }\n\n    return this;\n  }\n\n  removeClass(className) {\n    delete this.attrs.classes[className];\n\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: null,\n        oldValue: className\n      });\n    }\n\n    return this;\n  } // This is called by the registry after the element is registered.\n\n\n  onRegister(registry) {\n    this.registry = registry;\n    return this;\n  }\n\n  isRendered() {\n    return this.rendered;\n  }\n\n  setRendered(rendered = true) {\n    this.rendered = rendered;\n    return this;\n  }\n\n  getAttributes() {\n    return this.attrs;\n  }\n\n  getAttribute(name) {\n    return this.attrs[name];\n  }\n\n  setAttribute(name, value) {\n    const id = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n\n    if (this.registry) {\n      // Register with old id to support id changes.\n      this.registry.onUpdate({\n        id,\n        name,\n        value,\n        oldValue\n      });\n    }\n\n    return this;\n  }\n\n  getContext() {\n    return this.context;\n  }\n\n  setContext(context) {\n    this.context = context;\n    return this;\n  }\n\n  getBoundingBox() {\n    return this.boundingBox;\n  } // Validators\n\n\n  checkContext() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No rendering context attached to instance');\n    }\n\n    return this.context;\n  }\n\n}\nElement.ID = 1000;","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/element.js"],"names":["Vex","Registry","Flow","Element","newID","ID","constructor","type","attrs","id","el","classes","boundingBox","context","rendered","fontStack","DEFAULT_FONT_STACK","musicFont","getDefaultRegistry","register","setFontStack","getFontStack","setStyle","style","getStyle","applyStyle","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","className","addClass","registry","onUpdate","getAttribute","name","value","oldValue","removeClass","onRegister","isRendered","setRendered","getAttributes","setAttribute","getContext","setContext","getBoundingBox","RERR"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a generic base class for VexFlow, with implementations\n// of general functions and properties that can be inherited by all VexFlow elements.\n\nimport { Vex } from './vex';\nimport { Registry } from './registry';\nimport { Flow } from './tables';\n\nexport class Element {\n  static newID() { return 'auto' + (Element.ID++); }\n\n  constructor({ type } = {}) {\n    this.attrs = {\n      id: Element.newID(),\n      el: null,\n      type: type || 'Base',\n      classes: {},\n    };\n\n    this.boundingBox = null;\n    this.context = null;\n    this.rendered = false;\n    this.fontStack = Flow.DEFAULT_FONT_STACK;\n    this.musicFont = Flow.DEFAULT_FONT_STACK[0];\n\n    // If a default registry exist, then register with it right away.\n    if (Registry.getDefaultRegistry()) {\n      Registry.getDefaultRegistry().register(this);\n    }\n  }\n\n  // set music font\n  setFontStack(fontStack) {\n    this.fontStack = fontStack;\n    this.musicFont = fontStack[0];\n    return this;\n  }\n  getFontStack() {\n    return this.fontStack;\n  }\n\n  // set the draw style of a stemmable note:\n  setStyle(style) { this.style = style; return this; }\n  getStyle() { return this.style; }\n\n  // Apply current style to Canvas `context`\n  applyStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  restoreStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n    context.restore();\n    return this;\n  }\n\n  // draw with style of an element.\n  drawWithStyle() {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  // An element can have multiple class labels.\n  hasClass(className) { return (this.attrs.classes[className] === true); }\n  addClass(className) {\n    this.attrs.classes[className] = true;\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: className,\n        oldValue: null,\n      });\n    }\n    return this;\n  }\n\n  removeClass(className) {\n    delete this.attrs.classes[className];\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: null,\n        oldValue: className,\n      });\n    }\n    return this;\n  }\n\n  // This is called by the registry after the element is registered.\n  onRegister(registry) { this.registry = registry; return this; }\n  isRendered() { return this.rendered; }\n  setRendered(rendered = true) { this.rendered = rendered; return this; }\n\n  getAttributes() { return this.attrs; }\n  getAttribute(name) { return this.attrs[name]; }\n  setAttribute(name, value) {\n    const id = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    if (this.registry) {\n      // Register with old id to support id changes.\n      this.registry.onUpdate({ id, name, value, oldValue });\n    }\n    return this;\n  }\n\n  getContext() { return this.context; }\n  setContext(context) { this.context = context; return this; }\n  getBoundingBox() { return this.boundingBox; }\n\n  // Validators\n  checkContext() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No rendering context attached to instance');\n    }\n    return this.context;\n  }\n}\n\nElement.ID = 1000;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nexport class TabTie extends StaveTie {\n  static createHammeron(notes) {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes) {\n    return new TabTie(notes, 'P');\n  }\n\n  constructor(notes, text) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, text);\n    this.setAttribute('type', 'TabTie');\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n    this.setNotes(notes);\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      first_ys = first_note.getYs();\n    } else {\n      first_x_px = last_note.getStave().getTieStartX();\n      first_ys = last_note.getYs();\n      this.first_indices = this.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      last_ys = last_note.getYs();\n    } else {\n      last_x_px = first_note.getStave().getTieEndX();\n      last_ys = first_note.getYs();\n      this.last_indices = this.first_indices;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: -1 // Tab tie's are always face up.\n\n    });\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/tabtie.js"],"names":["StaveTie","TabTie","createHammeron","notes","createPulloff","constructor","text","setAttribute","render_options","cp1","cp2","y_shift","setNotes","draw","checkContext","setRendered","first_note","last_note","first_x_px","last_x_px","first_ys","last_ys","getTieRightX","tie_spacing","getYs","getStave","getTieStartX","first_indices","last_indices","getTieLeftX","getTieEndX","renderTie","direction","renderText"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,YAAzB;AAEA,OAAO,MAAMC,MAAN,SAAqBD,QAArB,CAA8B;AACnC,SAAOE,cAAP,CAAsBC,KAAtB,EAA6B;AAC3B,WAAO,IAAIF,MAAJ,CAAWE,KAAX,EAAkB,GAAlB,CAAP;AACD;;AAED,SAAOC,aAAP,CAAqBD,KAArB,EAA4B;AAC1B,WAAO,IAAIF,MAAJ,CAAWE,KAAX,EAAkB,GAAlB,CAAP;AACD;;AAEDE,EAAAA,WAAW,CAACF,KAAD,EAAQG,IAAR,EAAc;AACvB;;;;;;;;;;;AAWA,UAAMH,KAAN,EAAaG,IAAb;AACA,SAAKC,YAAL,CAAkB,MAAlB,EAA0B,QAA1B;AAEA,SAAKC,cAAL,CAAoBC,GAApB,GAA0B,CAA1B;AACA,SAAKD,cAAL,CAAoBE,GAApB,GAA0B,EAA1B;AACA,SAAKF,cAAL,CAAoBG,OAApB,GAA8B,CAA9B;AAEA,SAAKC,QAAL,CAAcT,KAAd;AACD;;AAEDU,EAAAA,IAAI,GAAG;AACL,SAAKC,YAAL;AACA,SAAKC,WAAL;AAEA,UAAMC,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMC,SAAS,GAAG,KAAKA,SAAvB;AACA,QAAIC,UAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,OAAJ;;AAEA,QAAIL,UAAJ,EAAgB;AACdE,MAAAA,UAAU,GAAGF,UAAU,CAACM,YAAX,KAA4B,KAAKd,cAAL,CAAoBe,WAA7D;AACAH,MAAAA,QAAQ,GAAGJ,UAAU,CAACQ,KAAX,EAAX;AACD,KAHD,MAGO;AACLN,MAAAA,UAAU,GAAGD,SAAS,CAACQ,QAAV,GAAqBC,YAArB,EAAb;AACAN,MAAAA,QAAQ,GAAGH,SAAS,CAACO,KAAV,EAAX;AACA,WAAKG,aAAL,GAAqB,KAAKC,YAA1B;AACD;;AAED,QAAIX,SAAJ,EAAe;AACbE,MAAAA,SAAS,GAAGF,SAAS,CAACY,WAAV,KAA0B,KAAKrB,cAAL,CAAoBe,WAA1D;AACAF,MAAAA,OAAO,GAAGJ,SAAS,CAACO,KAAV,EAAV;AACD,KAHD,MAGO;AACLL,MAAAA,SAAS,GAAGH,UAAU,CAACS,QAAX,GAAsBK,UAAtB,EAAZ;AACAT,MAAAA,OAAO,GAAGL,UAAU,CAACQ,KAAX,EAAV;AACA,WAAKI,YAAL,GAAoB,KAAKD,aAAzB;AACD;;AAED,SAAKI,SAAL,CAAe;AACbb,MAAAA,UADa;AAEbC,MAAAA,SAFa;AAGbC,MAAAA,QAHa;AAIbC,MAAAA,OAJa;AAKbW,MAAAA,SAAS,EAAE,CAAC,CALC,CAKE;;AALF,KAAf;AAQA,SAAKC,UAAL,CAAgBf,UAAhB,EAA4BC,SAA5B;AACA,WAAO,IAAP;AACD;;AAtEkC","sourcesContent":["// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie } from './stavetie';\n\nexport class TabTie extends StaveTie {\n  static createHammeron(notes) {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes) {\n    return new TabTie(notes, 'P');\n  }\n\n  constructor(notes, text) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, text);\n    this.setAttribute('type', 'TabTie');\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.setNotes(notes);\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      first_ys = first_note.getYs();\n    } else {\n      first_x_px = last_note.getStave().getTieStartX();\n      first_ys = last_note.getYs();\n      this.first_indices = this.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      last_ys = last_note.getYs();\n    } else {\n      last_x_px = first_note.getStave().getTieEndX();\n      last_ys = first_note.getYs();\n      this.last_indices = this.first_indices;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: -1, // Tab tie's are always face up.\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
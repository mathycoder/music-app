{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements vibratos.\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\nexport class Vibrato extends Modifier {\n  static get CATEGORY() {\n    return 'vibratos';\n  } // ## Static Methods\n  // Arrange vibratos inside a `ModifierContext`.\n\n\n  static format(vibratos, state, context) {\n    if (!vibratos || vibratos.length === 0) return false; // Vibratos are always on top.\n\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7; // If there's a bend, drop the text line\n\n    const bends = context.getModifiers(Bend.CATEGORY);\n\n    if (bends && bends.length > 0) {\n      text_line--;\n    } // Format Vibratos\n\n\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  } // ## Prototype Methods\n\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'Vibrato');\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2\n    };\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n\n  getCategory() {\n    return Vibrato.CATEGORY;\n  }\n\n  setHarsh(harsh) {\n    this.render_options.harsh = harsh;\n    return this;\n  }\n\n  setVibratoWidth(width) {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  draw() {\n    const ctx = this.checkContext();\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForVibrato', \"Can't draw vibrato without an attached note.\");\n    }\n\n    this.setRendered();\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n    const vx = start.x + this.x_shift;\n    const vy = this.note.getYForTopText(this.text_line) + 2;\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  } // Static rendering method that can be called from\n  // other classes (e.g. VibratoBracket)\n\n\n  static renderVibrato(ctx, x, y, opts) {\n    const {\n      harsh,\n      vibrato_width,\n      wave_width,\n      wave_girth,\n      wave_height\n    } = opts;\n    const num_waves = vibrato_width / wave_width;\n    ctx.beginPath();\n    let i;\n\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - wave_height / 2);\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + wave_height / 2);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n        x -= wave_width;\n      }\n\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n\n      ctx.fill();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/vibrato.js"],"names":["Vex","Modifier","Bend","Vibrato","CATEGORY","format","vibratos","state","context","length","text_line","top_text_line","width","shift","right_shift","bends","getModifiers","i","vibrato","setXShift","setTextLine","getWidth","constructor","setAttribute","position","Position","RIGHT","render_options","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","getCategory","setHarsh","setWidth","draw","ctx","checkContext","note","RERR","setRendered","start","getModifierStartXY","index","vx","x","x_shift","vy","getYForTopText","renderVibrato","y","opts","num_waves","beginPath","moveTo","lineTo","fill","quadraticCurveTo"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements vibratos.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\n\nexport class Vibrato extends Modifier {\n  static get CATEGORY() { return 'vibratos'; }\n\n  // ## Static Methods\n  // Arrange vibratos inside a `ModifierContext`.\n  static format(vibratos, state, context) {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getModifiers(Bend.CATEGORY);\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor() {\n    super();\n    this.setAttribute('type', 'Vibrato');\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n  getCategory() { return Vibrato.CATEGORY; }\n  setHarsh(harsh) { this.render_options.harsh = harsh; return this; }\n  setVibratoWidth(width) {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  draw() {\n    const ctx = this.checkContext();\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForVibrato', \"Can't draw vibrato without an attached note.\");\n    }\n\n    this.setRendered();\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = this.note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  // Static rendering method that can be called from\n  // other classes (e.g. VibratoBracket)\n  static renderVibrato(ctx, x, y, opts) {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - (wave_height / 2));\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + (wave_height / 2));\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, (y - (wave_height / 2)) + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, (y + (wave_height / 2)) + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + (wave_width / 2), y - (wave_height / 2), x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + (wave_width / 2), y + (wave_height / 2), x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(\n          x - (wave_width / 2),\n          (y + (wave_height / 2)) + wave_girth,\n          x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(\n          x - (wave_width / 2),\n          (y - (wave_height / 2)) + wave_girth,\n          x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Flow } from './tables';\nexport class GraceNote extends StaveNote {\n  static get CATEGORY() {\n    return 'gracenotes';\n  }\n\n  static get LEDGER_LINE_OFFSET() {\n    return 2;\n  }\n\n  static get SCALE() {\n    return 0.66;\n  }\n\n  constructor(note_struct) {\n    super(Object.assign(note_struct, {\n      glyph_font_scale: Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET\n    }));\n    this.setAttribute('type', 'GraceNote');\n    this.slash = note_struct.slash;\n    this.slur = true;\n    this.buildNoteHeads();\n    this.width = 3;\n  }\n\n  getStemExtension() {\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      let ret = super.getStemExtension();\n\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n      }\n\n      return ret;\n    }\n\n    return 0;\n  }\n\n  getCategory() {\n    return GraceNote.CATEGORY;\n  } // FIXME: move this to more basic class.\n\n\n  getStaveNoteScale() {\n    return this.render_options.glyph_font_scale / Flow.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw() {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale(); // some magic numbers are based on the staveNoteScale 0.66.\n\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n          stem: 6 * offsetScale,\n          beam: 5 * offsetScale\n        });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y = stem_direction === Flow.Stem.DOWN ? noteHeadBounds.y_top - noteStemHeight : noteHeadBounds.y_bottom - noteStemHeight;\n        const defaultStemExtention = stem_direction === Flow.Stem.DOWN ? this.glyph.stem_down_extension : this.glyph.stem_up_extension;\n        let defaultOffsetY = Flow.STEM_HEIGHT;\n        defaultOffsetY -= defaultOffsetY / 2.8;\n        defaultOffsetY += defaultStemExtention;\n        y += defaultOffsetY * staveNoteScale * stem_direction;\n        const offsets = stem_direction === Flow.Stem.UP ? {\n          x1: 1,\n          y1: 0,\n          x2: 13,\n          y2: -9\n        } : {\n          x1: -4,\n          y1: 1,\n          x2: 13,\n          y2: 9\n        };\n        x += offsets.x1 * offsetScale;\n        y += offsets.y1 * offsetScale;\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + offsets.x2 * offsetScale,\n          y2: y + offsets.y2 * offsetScale\n        };\n      } // FIXME: avoide staff lines, leadger lines or others.\n\n\n      const ctx = this.context;\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n    const beam = this.beam;\n    const beam_slope = beam.slope;\n    const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX); // slash line intersecting point on beam.\n\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset\n    };\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = this.beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: stemY + slashStemOffset - protrusion_stem_dy,\n      x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy\n    };\n    return ret;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/gracenote.js"],"names":["StaveNote","Stem","Flow","GraceNote","CATEGORY","LEDGER_LINE_OFFSET","SCALE","constructor","note_struct","Object","assign","glyph_font_scale","DEFAULT_NOTATION_FONT_SCALE","stroke_px","setAttribute","slash","slur","buildNoteHeads","width","getStemExtension","stem_extension_override","glyph","getGlyph","ret","stem","staveNoteScale","getStaveNoteScale","HEIGHT","getCategory","render_options","draw","setRendered","offsetScale","slashBBox","undefined","beam","postFormatted","postFormat","calcBeamedNotesSlashBBox","stem_direction","getStemDirection","noteHeadBounds","getNoteHeadBounds","noteStemHeight","getHeight","x","getAbsoluteX","y","DOWN","y_top","y_bottom","defaultStemExtention","stem_down_extension","stem_up_extension","defaultOffsetY","STEM_HEIGHT","offsets","UP","x1","y1","x2","y2","ctx","context","save","setLineWidth","beginPath","moveTo","lineTo","closePath","stroke","restore","slashStemOffset","slashBeamOffset","protrusions","beam_slope","slope","isBeamEndNote","notes","length","scaleX","beam_angle","Math","atan","iPointOnBeam","dx","cos","dy","sin","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stemX","getStemX","stem0X","stemY","getBeamYToDraw"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Flow } from './tables';\n\nexport class GraceNote extends StaveNote {\n  static get CATEGORY() { return 'gracenotes'; }\n  static get LEDGER_LINE_OFFSET() { return 2; }\n  static get SCALE() { return 0.66; }\n\n  constructor(note_struct) {\n    super(Object.assign(note_struct, {\n      glyph_font_scale: Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n    }));\n    this.setAttribute('type', 'GraceNote');\n\n    this.slash = note_struct.slash;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension() {\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = ((Stem.HEIGHT + ret) * staveNoteScale) - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  getCategory() { return GraceNote.CATEGORY; }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale() {\n    return this.render_options.glyph_font_scale / Flow.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw() {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale,\n          8 * offsetScale,\n          {\n            stem: 6 * offsetScale,\n            beam: 5 * offsetScale,\n          });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y = stem_direction === Flow.Stem.DOWN ?\n          noteHeadBounds.y_top - noteStemHeight :\n          noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention = stem_direction === Flow.Stem.DOWN ?\n          this.glyph.stem_down_extension :\n          this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Flow.STEM_HEIGHT;\n        defaultOffsetY -= (defaultOffsetY / 2.8);\n        defaultOffsetY += defaultStemExtention;\n        y += ((defaultOffsetY * staveNoteScale) * stem_direction);\n\n        const offsets = stem_direction === Flow.Stem.UP ? {\n          x1: 1,\n          y1: 0,\n          x2: 13,\n          y2: -9,\n        } : {\n          x1: -4,\n          y1: 1,\n          x2: 13,\n          y2: 9,\n        };\n\n        x += (offsets.x1 * offsetScale);\n        y += (offsets.y1 * offsetScale);\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + (offsets.x2 * offsetScale),\n          y2: y + (offsets.y2 * offsetScale),\n        };\n      }\n\n      // FIXME: avoide staff lines, leadger lines or others.\n\n      const ctx = this.context;\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n    const beam = this.beam;\n    const beam_slope = beam.slope;\n    const isBeamEndNote = (beam.notes[beam.notes.length - 1] === this);\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = this.beam.getBeamYToDraw() + ((stemX - stem0X) * beam_slope);\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: (stemY + slashStemOffset - protrusion_stem_dy),\n      x2: stemX + (iPointOnBeam.dx * scaleX) + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
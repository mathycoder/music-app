{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\n/* eslint max-classes-per-file: \"off\" */\nconst Vex = () => {}; // Default log function sends all arguments to console.\n\n\nVex.L = (block, args) => {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n};\n\nVex.MakeException = name => {\n  const exception = class extends Error {\n    constructor(message, data) {\n      super(message);\n      this.name = name;\n      this.message = message;\n      this.data = data;\n    }\n\n  };\n  return exception;\n}; // Default runtime exception.\n\n\nclass RuntimeError {\n  constructor(code, message) {\n    this.code = code;\n    this.message = message;\n  }\n\n  toString() {\n    return '[RuntimeError] ' + this.code + ':' + this.message;\n  }\n\n} // Shortcut method for `RuntimeError`.\n\n\nVex.RuntimeError = RuntimeError;\nVex.RERR = Vex.RuntimeError; // Merge `destination` hash with `source` hash, overwriting like keys\n// in `source` if necessary.\n\nVex.Merge = (destination, source) => {\n  for (const property in source) {\n    // eslint-disable-line guard-for-in\n    destination[property] = source[property];\n  }\n\n  return destination;\n}; // DEPRECATED. Use `Math.*`.\n\n\nVex.Min = Math.min;\nVex.Max = Math.max;\n\nVex.forEach = (a, fn) => {\n  for (let i = 0; i < a.length; i++) {\n    fn(a[i], i);\n  }\n}; // Round number to nearest fractional value (`.5`, `.25`, etc.)\n\n\nVex.RoundN = (x, n) => x % n >= n / 2 ? parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n; // Locate the mid point between stave lines. Returns a fractional line if a space.\n\n\nVex.MidLine = (a, b) => {\n  let mid_line = b + (a - b) / 2;\n\n  if (mid_line % 2 > 0) {\n    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n  }\n\n  return mid_line;\n}; // Take `arr` and return a new list consisting of the sorted, unique,\n// contents of arr. Does not modify `arr`.\n\n\nVex.SortAndUnique = (arr, cmp, eq) => {\n  if (arr.length > 1) {\n    const newArr = [];\n    let last;\n    arr.sort(cmp);\n\n    for (let i = 0; i < arr.length; ++i) {\n      if (i === 0 || !eq(arr[i], last)) {\n        newArr.push(arr[i]);\n      }\n\n      last = arr[i];\n    }\n\n    return newArr;\n  } else {\n    return arr;\n  }\n}; // Check if array `a` contains `obj`.\n\n\nVex.Contains = (a, obj) => {\n  let i = a.length;\n\n  while (i--) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}; // Get the 2D Canvas context from DOM element `canvas_sel`.\n\n\nVex.getCanvasContext = canvas_sel => {\n  if (!canvas_sel) {\n    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n  }\n\n  const canvas = document.getElementById(canvas_sel);\n\n  if (!(canvas && canvas.getContext)) {\n    throw new Vex.RERR('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n  }\n\n  return canvas.getContext('2d');\n}; // Draw a tiny dot marker on the specified canvas. A great debugging aid.\n//\n// `ctx`: Canvas context.\n// `x`, `y`: Dot coordinates.\n\n\nVex.drawDot = (ctx, x, y, color = '#55') => {\n  ctx.save();\n  ctx.setFillStyle(color); // draw a circle\n\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n}; // Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\n\n\nVex.BM = (s, f) => {\n  const start_time = new Date().getTime();\n  f();\n  const elapsed = new Date().getTime() - start_time;\n  Vex.L(s + elapsed + 'ms');\n}; // Get stack trace.\n\n\nVex.StackTrace = () => {\n  const err = new Error();\n  return err.stack;\n}; // Dump warning to console.\n\n\nVex.W = (...args) => {\n  const line = args.join(' ');\n  window.console.log('Warning: ', line, Vex.StackTrace());\n}; // Used by various classes (e.g., SVGContext) to provide a\n// unique prefix to element names (or other keys in shared namespaces).\n\n\nVex.Prefix = text => Vex.Prefix.prefix + text;\n\nVex.Prefix.prefix = 'vf-';\nexport { Vex };","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/vex.js"],"names":["Vex","L","block","args","line","Array","prototype","slice","call","join","window","console","log","MakeException","name","exception","Error","constructor","message","data","RuntimeError","code","toString","RERR","Merge","destination","source","property","Min","Math","min","Max","max","forEach","a","fn","i","length","RoundN","x","n","parseInt","MidLine","b","mid_line","SortAndUnique","arr","cmp","eq","newArr","last","sort","push","Contains","obj","getCanvasContext","canvas_sel","canvas","document","getElementById","getContext","drawDot","ctx","y","color","save","setFillStyle","beginPath","arc","PI","closePath","fill","restore","BM","s","f","start_time","Date","getTime","elapsed","StackTrace","err","stack","W","Prefix","text","prefix"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA,MAAMA,GAAG,GAAG,MAAM,CAAG,CAArB,C,CAEA;;;AACAA,GAAG,CAACC,CAAJ,GAAQ,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACvB,MAAI,CAACA,IAAL,EAAW;AACX,QAAMC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,IAA3B,EAAiCM,IAAjC,CAAsC,GAAtC,CAAb;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBV,KAAK,GAAG,IAAR,GAAeE,IAAlC;AACD,CAJD;;AAMAJ,GAAG,CAACa,aAAJ,GAAqBC,IAAD,IAAU;AAC5B,QAAMC,SAAS,GAAG,cAAcC,KAAd,CAAoB;AACpCC,IAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACzB,YAAMD,OAAN;AACA,WAAKJ,IAAL,GAAYA,IAAZ;AACA,WAAKI,OAAL,GAAeA,OAAf;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACD;;AANmC,GAAtC;AASA,SAAOJ,SAAP;AACD,CAXD,C,CAaA;;;AACA,MAAMK,YAAN,CAAmB;AACjBH,EAAAA,WAAW,CAACI,IAAD,EAAOH,OAAP,EAAgB;AACzB,SAAKG,IAAL,GAAYA,IAAZ;AACA,SAAKH,OAAL,GAAeA,OAAf;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAO,oBAAoB,KAAKD,IAAzB,GAAgC,GAAhC,GAAsC,KAAKH,OAAlD;AACD;;AARgB,C,CAWnB;;;AACAlB,GAAG,CAACoB,YAAJ,GAAmBA,YAAnB;AACApB,GAAG,CAACuB,IAAJ,GAAWvB,GAAG,CAACoB,YAAf,C,CAEA;AACA;;AACApB,GAAG,CAACwB,KAAJ,GAAY,CAACC,WAAD,EAAcC,MAAd,KAAyB;AACnC,OAAK,MAAMC,QAAX,IAAuBD,MAAvB,EAA+B;AAAE;AAC/BD,IAAAA,WAAW,CAACE,QAAD,CAAX,GAAwBD,MAAM,CAACC,QAAD,CAA9B;AACD;;AACD,SAAOF,WAAP;AACD,CALD,C,CAOA;;;AACAzB,GAAG,CAAC4B,GAAJ,GAAUC,IAAI,CAACC,GAAf;AACA9B,GAAG,CAAC+B,GAAJ,GAAUF,IAAI,CAACG,GAAf;;AACAhC,GAAG,CAACiC,OAAJ,GAAc,CAACC,CAAD,EAAIC,EAAJ,KAAW;AACvB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjCD,IAAAA,EAAE,CAACD,CAAC,CAACE,CAAD,CAAF,EAAOA,CAAP,CAAF;AACD;AACF,CAJD,C,CAMA;;;AACApC,GAAG,CAACsC,MAAJ,GAAa,CAACC,CAAD,EAAIC,CAAJ,KACVD,CAAC,GAAGC,CAAL,IAAYA,CAAC,GAAG,CAAhB,GACIC,QAAQ,CAACF,CAAC,GAAGC,CAAL,EAAQ,EAAR,CAAR,GAAsBA,CAAtB,GAA0BA,CAD9B,GAEIC,QAAQ,CAACF,CAAC,GAAGC,CAAL,EAAQ,EAAR,CAAR,GAAsBA,CAH5B,C,CAKA;;;AACAxC,GAAG,CAAC0C,OAAJ,GAAc,CAACR,CAAD,EAAIS,CAAJ,KAAU;AACtB,MAAIC,QAAQ,GAAGD,CAAC,GAAG,CAACT,CAAC,GAAGS,CAAL,IAAU,CAA7B;;AACA,MAAIC,QAAQ,GAAG,CAAX,GAAe,CAAnB,EAAsB;AACpBA,IAAAA,QAAQ,GAAG5C,GAAG,CAACsC,MAAJ,CAAWM,QAAQ,GAAG,EAAtB,EAA0B,CAA1B,IAA+B,EAA1C;AACD;;AACD,SAAOA,QAAP;AACD,CAND,C,CAQA;AACA;;;AACA5C,GAAG,CAAC6C,aAAJ,GAAoB,CAACC,GAAD,EAAMC,GAAN,EAAWC,EAAX,KAAkB;AACpC,MAAIF,GAAG,CAACT,MAAJ,GAAa,CAAjB,EAAoB;AAClB,UAAMY,MAAM,GAAG,EAAf;AACA,QAAIC,IAAJ;AACAJ,IAAAA,GAAG,CAACK,IAAJ,CAASJ,GAAT;;AAEA,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,GAAG,CAACT,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnC,UAAIA,CAAC,KAAK,CAAN,IAAW,CAACY,EAAE,CAACF,GAAG,CAACV,CAAD,CAAJ,EAASc,IAAT,CAAlB,EAAkC;AAChCD,QAAAA,MAAM,CAACG,IAAP,CAAYN,GAAG,CAACV,CAAD,CAAf;AACD;;AACDc,MAAAA,IAAI,GAAGJ,GAAG,CAACV,CAAD,CAAV;AACD;;AAED,WAAOa,MAAP;AACD,GAbD,MAaO;AACL,WAAOH,GAAP;AACD;AACF,CAjBD,C,CAmBA;;;AACA9C,GAAG,CAACqD,QAAJ,GAAe,CAACnB,CAAD,EAAIoB,GAAJ,KAAY;AACzB,MAAIlB,CAAC,GAAGF,CAAC,CAACG,MAAV;;AACA,SAAOD,CAAC,EAAR,EAAY;AACV,QAAIF,CAAC,CAACE,CAAD,CAAD,KAASkB,GAAb,EAAkB;AAChB,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CARD,C,CAUA;;;AACAtD,GAAG,CAACuD,gBAAJ,GAAuBC,UAAU,IAAI;AACnC,MAAI,CAACA,UAAL,EAAiB;AACf,UAAM,IAAIxD,GAAG,CAACuB,IAAR,CAAa,aAAb,EAA4B,8BAA8BiC,UAA1D,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,UAAxB,CAAf;;AACA,MAAI,EAAEC,MAAM,IAAIA,MAAM,CAACG,UAAnB,CAAJ,EAAoC;AAClC,UAAM,IAAI5D,GAAG,CAACuB,IAAR,CACJ,yBADI,EACuB,4CADvB,CAAN;AAGD;;AAED,SAAOkC,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAP;AACD,CAbD,C,CAeA;AACA;AACA;AACA;;;AACA5D,GAAG,CAAC6D,OAAJ,GAAc,CAACC,GAAD,EAAMvB,CAAN,EAASwB,CAAT,EAAYC,KAAK,GAAG,KAApB,KAA8B;AAC1CF,EAAAA,GAAG,CAACG,IAAJ;AACAH,EAAAA,GAAG,CAACI,YAAJ,CAAiBF,KAAjB,EAF0C,CAI1C;;AACAF,EAAAA,GAAG,CAACK,SAAJ;AACAL,EAAAA,GAAG,CAACM,GAAJ,CAAQ7B,CAAR,EAAWwB,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoBlC,IAAI,CAACwC,EAAL,GAAU,CAA9B,EAAiC,IAAjC;AACAP,EAAAA,GAAG,CAACQ,SAAJ;AACAR,EAAAA,GAAG,CAACS,IAAJ;AACAT,EAAAA,GAAG,CAACU,OAAJ;AACD,CAVD,C,CAYA;;;AACAxE,GAAG,CAACyE,EAAJ,GAAS,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjB,QAAMC,UAAU,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAnB;AACAH,EAAAA,CAAC;AACD,QAAMI,OAAO,GAAG,IAAIF,IAAJ,GAAWC,OAAX,KAAuBF,UAAvC;AACA5E,EAAAA,GAAG,CAACC,CAAJ,CAAMyE,CAAC,GAAGK,OAAJ,GAAc,IAApB;AACD,CALD,C,CAOA;;;AACA/E,GAAG,CAACgF,UAAJ,GAAiB,MAAM;AACrB,QAAMC,GAAG,GAAG,IAAIjE,KAAJ,EAAZ;AACA,SAAOiE,GAAG,CAACC,KAAX;AACD,CAHD,C,CAKA;;;AACAlF,GAAG,CAACmF,CAAJ,GAAQ,CAAC,GAAGhF,IAAJ,KAAa;AACnB,QAAMC,IAAI,GAAGD,IAAI,CAACM,IAAL,CAAU,GAAV,CAAb;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,WAAnB,EAAgCR,IAAhC,EAAsCJ,GAAG,CAACgF,UAAJ,EAAtC;AACD,CAHD,C,CAKA;AACA;;;AACAhF,GAAG,CAACoF,MAAJ,GAAaC,IAAI,IAAIrF,GAAG,CAACoF,MAAJ,CAAWE,MAAX,GAAoBD,IAAzC;;AACArF,GAAG,CAACoF,MAAJ,CAAWE,MAAX,GAAoB,KAApB;AAEA,SAAStF,GAAT","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\n/* eslint max-classes-per-file: \"off\" */\n\nconst Vex = () => { };\n\n// Default log function sends all arguments to console.\nVex.L = (block, args) => {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n};\n\nVex.MakeException = (name) => {\n  const exception = class extends Error {\n    constructor(message, data) {\n      super(message);\n      this.name = name;\n      this.message = message;\n      this.data = data;\n    }\n  };\n\n  return exception;\n};\n\n// Default runtime exception.\nclass RuntimeError {\n  constructor(code, message) {\n    this.code = code;\n    this.message = message;\n  }\n\n  toString() {\n    return '[RuntimeError] ' + this.code + ':' + this.message;\n  }\n}\n\n// Shortcut method for `RuntimeError`.\nVex.RuntimeError = RuntimeError;\nVex.RERR = Vex.RuntimeError;\n\n// Merge `destination` hash with `source` hash, overwriting like keys\n// in `source` if necessary.\nVex.Merge = (destination, source) => {\n  for (const property in source) { // eslint-disable-line guard-for-in\n    destination[property] = source[property];\n  }\n  return destination;\n};\n\n// DEPRECATED. Use `Math.*`.\nVex.Min = Math.min;\nVex.Max = Math.max;\nVex.forEach = (a, fn) => {\n  for (let i = 0; i < a.length; i++) {\n    fn(a[i], i);\n  }\n};\n\n// Round number to nearest fractional value (`.5`, `.25`, etc.)\nVex.RoundN = (x, n) =>\n  (x % n) >= (n / 2)\n    ? parseInt(x / n, 10) * n + n\n    : parseInt(x / n, 10) * n;\n\n// Locate the mid point between stave lines. Returns a fractional line if a space.\nVex.MidLine = (a, b) => {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n};\n\n// Take `arr` and return a new list consisting of the sorted, unique,\n// contents of arr. Does not modify `arr`.\nVex.SortAndUnique = (arr, cmp, eq) => {\n  if (arr.length > 1) {\n    const newArr = [];\n    let last;\n    arr.sort(cmp);\n\n    for (let i = 0; i < arr.length; ++i) {\n      if (i === 0 || !eq(arr[i], last)) {\n        newArr.push(arr[i]);\n      }\n      last = arr[i];\n    }\n\n    return newArr;\n  } else {\n    return arr;\n  }\n};\n\n// Check if array `a` contains `obj`.\nVex.Contains = (a, obj) => {\n  let i = a.length;\n  while (i--) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Get the 2D Canvas context from DOM element `canvas_sel`.\nVex.getCanvasContext = canvas_sel => {\n  if (!canvas_sel) {\n    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n  }\n\n  const canvas = document.getElementById(canvas_sel);\n  if (!(canvas && canvas.getContext)) {\n    throw new Vex.RERR(\n      'UnsupportedBrowserError', 'This browser does not support HTML5 Canvas'\n    );\n  }\n\n  return canvas.getContext('2d');\n};\n\n// Draw a tiny dot marker on the specified canvas. A great debugging aid.\n//\n// `ctx`: Canvas context.\n// `x`, `y`: Dot coordinates.\nVex.drawDot = (ctx, x, y, color = '#55') => {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n};\n\n// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\nVex.BM = (s, f) => {\n  const start_time = new Date().getTime();\n  f();\n  const elapsed = new Date().getTime() - start_time;\n  Vex.L(s + elapsed + 'ms');\n};\n\n// Get stack trace.\nVex.StackTrace = () => {\n  const err = new Error();\n  return err.stack;\n};\n\n// Dump warning to console.\nVex.W = (...args) => {\n  const line = args.join(' ');\n  window.console.log('Warning: ', line, Vex.StackTrace());\n};\n\n// Used by various classes (e.g., SVGContext) to provide a\n// unique prefix to element names (or other keys in shared namespaces).\nVex.Prefix = text => Vex.Prefix.prefix + text;\nVex.Prefix.prefix = 'vf-';\n\nexport { Vex };\n"]},"metadata":{},"sourceType":"module"}
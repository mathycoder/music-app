{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\nimport { Vex } from './vex';\n/** @constructor */\n\nexport class CanvasContext {\n  static get WIDTH() {\n    return 600;\n  }\n\n  static get HEIGHT() {\n    return 400;\n  }\n\n  static get CANVAS_BROWSER_SIZE_LIMIT() {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size\n  }\n\n  static SanitizeCanvasDims(width, height) {\n    if (Math.max(width, height) > this.CANVAS_BROWSER_SIZE_LIMIT) {\n      Vex.W('Canvas dimensions exceed browser limit. Cropping to ' + this.CANVAS_BROWSER_SIZE_LIMIT);\n\n      if (width > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        width = this.CANVAS_BROWSER_SIZE_LIMIT; // note: Math.min return 0 for undefined, NaN for null. Would change inputs.\n      }\n\n      if (height > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        height = this.CANVAS_BROWSER_SIZE_LIMIT;\n      }\n    }\n\n    return [width, height];\n  }\n\n  constructor(context) {\n    // Use a name that is unlikely to clash with a canvas context\n    // property\n    this.vexFlowCanvasContext = context;\n\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear() {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  } // Containers not implemented\n\n\n  openGroup() {}\n\n  closeGroup() {}\n\n  add() {}\n\n  setFont(family, size, weight) {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.vexFlowCanvasContext.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.vexFlowCanvasContext.shadowColor = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.vexFlowCanvasContext.shadowBlur = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(cap_type) {\n    this.vexFlowCanvasContext.lineCap = cap_type;\n    return this;\n  } // setLineDash: is the one native method in a canvas context\n  // that begins with set, therefore we don't bolster the method\n  // if it already exists (see renderer.bolsterCanvasContext).\n  // If it doesn't exist, we bolster it and assume it's looking for\n  // a ctx.lineDash method, as previous versions of VexFlow\n  // expected.\n\n\n  setLineDash(dash) {\n    this.vexFlowCanvasContext.lineDash = dash;\n    return this;\n  }\n\n  scale(x, y) {\n    return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n  }\n\n  resize(width, height) {\n    [width, height] = this.SanitizeCanvasDims(parseInt(width, 10), parseInt(height, 10));\n    return this.vexFlowCanvasContext.resize(width, height);\n  }\n\n  rect(x, y, width, height) {\n    return this.vexFlowCanvasContext.rect(x, y, width, height);\n  }\n\n  fillRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n  }\n\n  clearRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n  }\n\n  beginPath() {\n    return this.vexFlowCanvasContext.beginPath();\n  }\n\n  moveTo(x, y) {\n    return this.vexFlowCanvasContext.moveTo(x, y);\n  }\n\n  lineTo(x, y) {\n    return this.vexFlowCanvasContext.lineTo(x, y);\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n  } // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n\n\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n  } // Adapted from the source for Raphael's Element.glow\n\n\n  glow() {\n    return this.vexFlowCanvasContext.glow();\n  }\n\n  fill() {\n    return this.vexFlowCanvasContext.fill();\n  }\n\n  stroke() {\n    return this.vexFlowCanvasContext.stroke();\n  }\n\n  closePath() {\n    return this.vexFlowCanvasContext.closePath();\n  }\n\n  measureText(text) {\n    return this.vexFlowCanvasContext.measureText(text);\n  }\n\n  fillText(text, x, y) {\n    return this.vexFlowCanvasContext.fillText(text, x, y);\n  }\n\n  save() {\n    return this.vexFlowCanvasContext.save();\n  }\n\n  restore() {\n    return this.vexFlowCanvasContext.restore();\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/canvascontext.js"],"names":["Vex","CanvasContext","WIDTH","HEIGHT","CANVAS_BROWSER_SIZE_LIMIT","SanitizeCanvasDims","width","height","Math","max","W","constructor","context","vexFlowCanvasContext","canvas","clear","clearRect","openGroup","closeGroup","add","setFont","family","size","weight","font","setRawFont","setFillStyle","style","fillStyle","setBackgroundFillStyle","background_fillStyle","setStrokeStyle","strokeStyle","setShadowColor","shadowColor","setShadowBlur","blur","shadowBlur","setLineWidth","lineWidth","setLineCap","cap_type","lineCap","setLineDash","dash","lineDash","scale","x","y","parseFloat","resize","parseInt","rect","fillRect","beginPath","moveTo","lineTo","bezierCurveTo","x1","y1","x2","y2","quadraticCurveTo","arc","radius","startAngle","endAngle","antiClockwise","glow","fill","stroke","closePath","measureText","text","fillText","save","restore"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\n\nimport { Vex } from './vex';\n\n/** @constructor */\nexport class CanvasContext {\n  static get WIDTH() {\n    return 600;\n  }\n  static get HEIGHT() {\n    return 400;\n  }\n  static get CANVAS_BROWSER_SIZE_LIMIT() {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size\n  }\n\n  static SanitizeCanvasDims(width, height) {\n    if (Math.max(width, height) > this.CANVAS_BROWSER_SIZE_LIMIT) {\n      Vex.W(\n        'Canvas dimensions exceed browser limit. Cropping to ' +\n        this.CANVAS_BROWSER_SIZE_LIMIT\n      );\n      if (width > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        width = this.CANVAS_BROWSER_SIZE_LIMIT;\n        // note: Math.min return 0 for undefined, NaN for null. Would change inputs.\n      }\n      if (height > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        height = this.CANVAS_BROWSER_SIZE_LIMIT;\n      }\n    }\n    return [width, height];\n  }\n\n  constructor(context) {\n    // Use a name that is unlikely to clash with a canvas context\n    // property\n    this.vexFlowCanvasContext = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear() {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Containers not implemented\n  openGroup() {}\n  closeGroup() {}\n  add() {}\n\n  setFont(family, size, weight) {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.vexFlowCanvasContext.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.vexFlowCanvasContext.shadowColor = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.vexFlowCanvasContext.shadowBlur = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(cap_type) {\n    this.vexFlowCanvasContext.lineCap = cap_type;\n    return this;\n  }\n\n  // setLineDash: is the one native method in a canvas context\n  // that begins with set, therefore we don't bolster the method\n  // if it already exists (see renderer.bolsterCanvasContext).\n  // If it doesn't exist, we bolster it and assume it's looking for\n  // a ctx.lineDash method, as previous versions of VexFlow\n  // expected.\n  setLineDash(dash) {\n    this.vexFlowCanvasContext.lineDash = dash;\n    return this;\n  }\n\n  scale(x, y) {\n    return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n  }\n\n  resize(width, height) {\n    [width, height] = this.SanitizeCanvasDims(parseInt(width, 10), parseInt(height, 10));\n    return this.vexFlowCanvasContext.resize(width, height);\n  }\n\n  rect(x, y, width, height) {\n    return this.vexFlowCanvasContext.rect(x, y, width, height);\n  }\n\n  fillRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n  }\n\n  clearRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n  }\n\n  beginPath() {\n    return this.vexFlowCanvasContext.beginPath();\n  }\n\n  moveTo(x, y) {\n    return this.vexFlowCanvasContext.moveTo(x, y);\n  }\n\n  lineTo(x, y) {\n    return this.vexFlowCanvasContext.lineTo(x, y);\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    return this.vexFlowCanvasContext.glow();\n  }\n\n  fill() {\n    return this.vexFlowCanvasContext.fill();\n  }\n\n  stroke() {\n    return this.vexFlowCanvasContext.stroke();\n  }\n\n  closePath() {\n    return this.vexFlowCanvasContext.closePath();\n  }\n\n  measureText(text) {\n    return this.vexFlowCanvasContext.measureText(text);\n  }\n\n  fillText(text, x, y) {\n    return this.vexFlowCanvasContext.fillText(text, x, y);\n  }\n\n  save() {\n    return this.vexFlowCanvasContext.save();\n  }\n\n  restore() {\n    return this.vexFlowCanvasContext.restore();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of tunings for tablature.\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nexport class Tuning {\n  static get names() {\n    return {\n      'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',\n      'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',\n      'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',\n      'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      'standardBanjo': 'D/5,B/4,G/4,D/4,G/5'\n    };\n  }\n\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  noteToInteger(noteString) {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  setTuning(noteString) {\n    if (Tuning.names[noteString]) {\n      noteString = Tuning.names[noteString];\n    }\n\n    this.tuningString = noteString;\n    this.tuningValues = [];\n    this.numStrings = 0;\n    const keys = noteString.split(/\\s*,\\s*/);\n\n    if (keys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);\n    }\n\n    this.numStrings = keys.length;\n\n    for (let i = 0; i < this.numStrings; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  getValueForString(stringNum) {\n    const s = parseInt(stringNum, 10);\n\n    if (s < 1 || s > this.numStrings) {\n      throw new Vex.RERR('BadArguments', `String number must be between 1 and ${this.numStrings}:${stringNum}`);\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  getValueForFret(fretNum, stringNum) {\n    const stringValue = this.getValueForString(stringNum);\n    const f = parseInt(fretNum, 10);\n\n    if (f < 0) {\n      throw new Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' + fretNum);\n    }\n\n    return stringValue + f;\n  }\n\n  getNoteForFret(fretNum, stringNum) {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n    return Flow.integerToNote(value) + '/' + octave;\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/tuning.js"],"names":["Vex","Flow","Tuning","names","constructor","tuningString","setTuning","noteToInteger","noteString","keyProperties","int_value","tuningValues","numStrings","keys","split","length","RERR","i","getValueForString","stringNum","s","parseInt","getValueForFret","fretNum","stringValue","f","getNoteForFret","noteValue","octave","Math","floor","value","integerToNote"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,IAAT,QAAqB,UAArB;AAEA,OAAO,MAAMC,MAAN,CAAa;AAClB,aAAWC,KAAX,GAAmB;AACjB,WAAO;AACL,kBAAY,yBADP;AAEL,gBAAU,yBAFL;AAGL,eAAS,yBAHJ;AAIL,YAAM,+BAJD;AAKL,uBAAiB;AALZ,KAAP;AAOD;;AAEDC,EAAAA,WAAW,CAACC,YAAY,GAAG,iCAAhB,EAAmD;AAC5D;AACA,SAAKC,SAAL,CAAeD,YAAf;AACD;;AAEDE,EAAAA,aAAa,CAACC,UAAD,EAAa;AACxB,WAAOP,IAAI,CAACQ,aAAL,CAAmBD,UAAnB,EAA+BE,SAAtC;AACD;;AAEDJ,EAAAA,SAAS,CAACE,UAAD,EAAa;AACpB,QAAIN,MAAM,CAACC,KAAP,CAAaK,UAAb,CAAJ,EAA8B;AAC5BA,MAAAA,UAAU,GAAGN,MAAM,CAACC,KAAP,CAAaK,UAAb,CAAb;AACD;;AAED,SAAKH,YAAL,GAAoBG,UAApB;AACA,SAAKG,YAAL,GAAoB,EAApB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AAEA,UAAMC,IAAI,GAAGL,UAAU,CAACM,KAAX,CAAiB,SAAjB,CAAb;;AACA,QAAID,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIf,GAAG,CAACgB,IAAR,CAAa,cAAb,EAA6B,4BAA4BR,UAAzD,CAAN;AACD;;AAED,SAAKI,UAAL,GAAkBC,IAAI,CAACE,MAAvB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAzB,EAAqC,EAAEK,CAAvC,EAA0C;AACxC,WAAKN,YAAL,CAAkBM,CAAlB,IAAuB,KAAKV,aAAL,CAAmBM,IAAI,CAACI,CAAD,CAAvB,CAAvB;AACD;AACF;;AAEDC,EAAAA,iBAAiB,CAACC,SAAD,EAAY;AAC3B,UAAMC,CAAC,GAAGC,QAAQ,CAACF,SAAD,EAAY,EAAZ,CAAlB;;AACA,QAAIC,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,KAAKR,UAAtB,EAAkC;AAChC,YAAM,IAAIZ,GAAG,CAACgB,IAAR,CACJ,cADI,EACa,uCAAsC,KAAKJ,UAAW,IAAGO,SAAU,EADhF,CAAN;AAGD;;AAED,WAAO,KAAKR,YAAL,CAAkBS,CAAC,GAAG,CAAtB,CAAP;AACD;;AAEDE,EAAAA,eAAe,CAACC,OAAD,EAAUJ,SAAV,EAAqB;AAClC,UAAMK,WAAW,GAAG,KAAKN,iBAAL,CAAuBC,SAAvB,CAApB;AACA,UAAMM,CAAC,GAAGJ,QAAQ,CAACE,OAAD,EAAU,EAAV,CAAlB;;AAEA,QAAIE,CAAC,GAAG,CAAR,EAAW;AACT,YAAM,IAAIzB,GAAG,CAACgB,IAAR,CAAa,cAAb,EAA6B,sCAC/BO,OADE,CAAN;AAED;;AAED,WAAOC,WAAW,GAAGC,CAArB;AACD;;AAEDC,EAAAA,cAAc,CAACH,OAAD,EAAUJ,SAAV,EAAqB;AACjC,UAAMQ,SAAS,GAAG,KAAKL,eAAL,CAAqBC,OAArB,EAA8BJ,SAA9B,CAAlB;AAEA,UAAMS,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAS,GAAG,EAAvB,CAAf;AACA,UAAMI,KAAK,GAAGJ,SAAS,GAAG,EAA1B;AAEA,WAAO1B,IAAI,CAAC+B,aAAL,CAAmBD,KAAnB,IAA4B,GAA5B,GAAkCH,MAAzC;AACD;;AAtEiB","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of tunings for tablature.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\n\nexport class Tuning {\n  static get names() {\n    return {\n      'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',\n      'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',\n      'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',\n      'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      'standardBanjo': 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  noteToInteger(noteString) {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  setTuning(noteString) {\n    if (Tuning.names[noteString]) {\n      noteString = Tuning.names[noteString];\n    }\n\n    this.tuningString = noteString;\n    this.tuningValues = [];\n    this.numStrings = 0;\n\n    const keys = noteString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);\n    }\n\n    this.numStrings = keys.length;\n    for (let i = 0; i < this.numStrings; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  getValueForString(stringNum) {\n    const s = parseInt(stringNum, 10);\n    if (s < 1 || s > this.numStrings) {\n      throw new Vex.RERR(\n        'BadArguments', `String number must be between 1 and ${this.numStrings}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  getValueForFret(fretNum, stringNum) {\n    const stringValue = this.getValueForString(stringNum);\n    const f = parseInt(fretNum, 10);\n\n    if (f < 0) {\n      throw new Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' +\n          fretNum);\n    }\n\n    return stringValue + f;\n  }\n\n  getNoteForFret(fretNum, stringNum) {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return Flow.integerToNote(value) + '/' + octave;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Note } from './note';\nexport class GlyphNote extends Note {\n  constructor(glyph, noteStruct, options) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options\n    };\n    this.setAttribute('type', 'GlyphNote'); // Note properties\n\n    this.ignore_ticks = this.options.ignoreTicks;\n\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph) {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox() {\n    return this.glyph.getBoundingBox();\n  }\n  /*\n  addToModifierContext() {\n    return this;\n  }\n  */\n\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    this.stave.checkContext();\n    this.setRendered(); // Context is set when setStave is called on Note\n\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(this.stave.getYForLine(this.options.line) - this.stave.getYForGlyphs());\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n    this.glyph.renderToStave(x);\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/glyphnote.js"],"names":["Note","GlyphNote","constructor","glyph","noteStruct","options","ignoreTicks","line","setAttribute","ignore_ticks","setGlyph","setWidth","getMetrics","width","getBoundingBox","preFormat","setPreFormatted","draw","stave","checkContext","setRendered","getContext","setContext","context","setStave","setYShift","getYForLine","getYForGlyphs","x","isCenterAligned","getAbsoluteX","getWidth","renderToStave"],"mappings":"AAAA;AAEA,SAASA,IAAT,QAAqB,QAArB;AAEA,OAAO,MAAMC,SAAN,SAAwBD,IAAxB,CAA6B;AAClCE,EAAAA,WAAW,CAACC,KAAD,EAAQC,UAAR,EAAoBC,OAApB,EAA6B;AACtC,UAAMD,UAAN;AACA,SAAKC,OAAL,GAAe;AACbC,MAAAA,WAAW,EAAE,KADA;AAEbC,MAAAA,IAAI,EAAE,CAFO;AAGb,SAAGF;AAHU,KAAf;AAKA,SAAKG,YAAL,CAAkB,MAAlB,EAA0B,WAA1B,EAPsC,CAStC;;AACA,SAAKC,YAAL,GAAoB,KAAKJ,OAAL,CAAaC,WAAjC;;AACA,QAAIH,KAAJ,EAAW;AACT,WAAKO,QAAL,CAAcP,KAAd;AACD;AACF;;AAEDO,EAAAA,QAAQ,CAACP,KAAD,EAAQ;AACd,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKQ,QAAL,CAAc,KAAKR,KAAL,CAAWS,UAAX,GAAwBC,KAAtC;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKX,KAAL,CAAWW,cAAX,EAAP;AACD;AAED;;;;;;;AAMAC,EAAAA,SAAS,GAAG;AACV,SAAKC,eAAL,CAAqB,IAArB;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKC,KAAL,CAAWC,YAAX;AACA,SAAKC,WAAL,GAFK,CAIL;;AACA,QAAI,CAAC,KAAKjB,KAAL,CAAWkB,UAAX,EAAL,EAA8B;AAC5B,WAAKlB,KAAL,CAAWmB,UAAX,CAAsB,KAAKC,OAA3B;AACD;;AAED,SAAKpB,KAAL,CAAWqB,QAAX,CAAoB,KAAKN,KAAzB;AACA,SAAKf,KAAL,CAAWsB,SAAX,CAAqB,KAAKP,KAAL,CAAWQ,WAAX,CAAuB,KAAKrB,OAAL,CAAaE,IAApC,IAA4C,KAAKW,KAAL,CAAWS,aAAX,EAAjE;AAEA,UAAMC,CAAC,GAAG,KAAKC,eAAL,KAAyB,KAAKC,YAAL,KAAuB,KAAKC,QAAL,KAAkB,CAAlE,GAAuE,KAAKD,YAAL,EAAjF;AACA,SAAK3B,KAAL,CAAW6B,aAAX,CAAyBJ,CAAzB;AACD;;AApDiC","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Note } from './note';\n\nexport class GlyphNote extends Note {\n  constructor(glyph, noteStruct, options) {\n    super(noteStruct);\n    this.options = {\n      ignoreTicks: false,\n      line: 2,\n      ...options\n    };\n    this.setAttribute('type', 'GlyphNote');\n\n    // Note properties\n    this.ignore_ticks = this.options.ignoreTicks;\n    if (glyph) {\n      this.setGlyph(glyph);\n    }\n  }\n\n  setGlyph(glyph) {\n    this.glyph = glyph;\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getBoundingBox() {\n    return this.glyph.getBoundingBox();\n  }\n\n  /*\n  addToModifierContext() {\n    return this;\n  }\n  */\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    this.stave.checkContext();\n    this.setRendered();\n\n    // Context is set when setStave is called on Note\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(this.stave.getYForLine(this.options.line) - this.stave.getYForGlyphs());\n\n    const x = this.isCenterAligned() ? this.getAbsoluteX() - (this.getWidth() / 2) : this.getAbsoluteX();\n    this.glyph.renderToStave(x);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
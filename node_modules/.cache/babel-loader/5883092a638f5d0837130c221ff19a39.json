{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n//\n// ## Description\n//\n// This file implements various types of clefs that can be rendered on a stave.\n//\n// See `tests/clef_tests.js` for usage examples.\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph'; // To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\n\nfunction L(...args) {\n  if (Clef.DEBUG) Vex.L('Vex.Flow.Clef', args);\n}\n\nexport class Clef extends StaveModifier {\n  static get CATEGORY() {\n    return 'clefs';\n  } // Every clef name is associated with a glyph code from the font file\n  // and a default stave line number.\n\n\n  static get types() {\n    return {\n      'treble': {\n        code: 'gClef',\n        line: 3\n      },\n      'bass': {\n        code: 'fClef',\n        line: 1\n      },\n      'alto': {\n        code: 'cClef',\n        line: 2\n      },\n      'tenor': {\n        code: 'cClef',\n        line: 1\n      },\n      'percussion': {\n        code: 'restMaxima',\n        line: 2\n      },\n      'soprano': {\n        code: 'cClef',\n        line: 4\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2\n      },\n      'subbass': {\n        code: 'fClef',\n        line: 0\n      },\n      'french': {\n        code: 'gClef',\n        line: 4\n      },\n      'tab': {\n        code: '6stringTabClef'\n      }\n    };\n  } // Create a new clef. The parameter `clef` must be a key from\n  // `Clef.types`.\n\n\n  constructor(type, size, annotation) {\n    super();\n    this.setAttribute('type', 'Clef');\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  getCategory() {\n    return Clef.CATEGORY;\n  }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef = Clef.types[type];\n\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`\n    }); // If an annotation, such as 8va, is specified, add it to the Clef object.\n\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n      this.annotation = {\n        code,\n        point,\n        line,\n        x_shift\n      };\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  getWidth() {\n    if (this.type === 'tab' && !this.stave) {\n      throw new Vex.RERR('ClefError', \"Can't get width without stave.\");\n    }\n\n    return this.width;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    if (this.type !== 'tab') return this;\n    const numLines = this.stave.getOptions().num_lines;\n    const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n    const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n    this.glyph.setPoint(point);\n    this.glyph.setYShift(shiftY);\n    return this;\n  }\n\n  draw() {\n    if (!this.x) throw new Vex.RERR('ClefError', \"Can't draw clef without x.\");\n    if (!this.stave) throw new Vex.RERR('ClefError', \"Can't draw clef without stave.\");\n    this.setRendered();\n    this.glyph.setStave(this.stave);\n    this.glyph.setContext(this.stave.context);\n\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n    }\n\n    this.glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined) {\n      this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n      this.attachment.setStave(this.stave);\n      this.attachment.setContext(this.stave.context);\n      this.attachment.renderToStave(this.x);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/clef.js"],"names":["Vex","StaveModifier","Glyph","L","args","Clef","DEBUG","CATEGORY","types","code","line","constructor","type","size","annotation","setAttribute","setPosition","Position","BEGIN","setType","setWidth","musicFont","lookupMetric","getCategory","clef","undefined","point","glyph","category","x_shift","attachment","metrics","x_max","setXShift","getWidth","stave","RERR","width","setStave","numLines","getOptions","num_lines","shiftY","setPoint","setYShift","draw","x","setRendered","setContext","context","placeGlyphOnLine","renderToStave"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n//\n// ## Description\n//\n// This file implements various types of clefs that can be rendered on a stave.\n//\n// See `tests/clef_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\nfunction L(...args) { if (Clef.DEBUG) Vex.L('Vex.Flow.Clef', args); }\n\nexport class Clef extends StaveModifier {\n  static get CATEGORY() { return 'clefs'; }\n\n  // Every clef name is associated with a glyph code from the font file\n  // and a default stave line number.\n  static get types() {\n    return {\n      'treble': {\n        code: 'gClef',\n        line: 3,\n      },\n      'bass': {\n        code: 'fClef',\n        line: 1,\n      },\n      'alto': {\n        code: 'cClef',\n        line: 2,\n      },\n      'tenor': {\n        code: 'cClef',\n        line: 1,\n      },\n      'percussion': {\n        code: 'restMaxima',\n        line: 2,\n      },\n      'soprano': {\n        code: 'cClef',\n        line: 4,\n      },\n      'mezzo-soprano': {\n        code: 'cClef',\n        line: 3,\n      },\n      'baritone-c': {\n        code: 'cClef',\n        line: 0,\n      },\n      'baritone-f': {\n        code: 'fClef',\n        line: 2,\n      },\n      'subbass': {\n        code: 'fClef',\n        line: 0,\n      },\n      'french': {\n        code: 'gClef',\n        line: 4,\n      },\n      'tab': {\n        code: '6stringTabClef',\n      },\n    };\n  }\n\n  // Create a new clef. The parameter `clef` must be a key from\n  // `Clef.types`.\n  constructor(type, size, annotation) {\n    super();\n    this.setAttribute('type', 'Clef');\n\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.musicFont.lookupMetric(`clef.${this.size}.width`));\n    L('Creating clef:', type);\n  }\n\n  getCategory() { return Clef.CATEGORY; }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = this.musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n    this.glyph = new Glyph(this.clef.code, this.clef.point, {\n      category: `clef.${this.clef.code}.${this.size}`\n    });\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const code = this.musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n      const point = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n      const line = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n      const x_shift = this.musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n\n      this.annotation = { code, point, line, x_shift };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  getWidth() {\n    if (this.type === 'tab' && !this.stave) {\n      throw new Vex.RERR('ClefError', \"Can't get width without stave.\");\n    }\n\n    return this.width;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    if (this.type !== 'tab') return this;\n\n    const numLines = this.stave.getOptions().num_lines;\n    const point = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n    const shiftY = this.musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n    this.glyph.setPoint(point);\n    this.glyph.setYShift(shiftY);\n\n    return this;\n  }\n\n  draw() {\n    if (!this.x) throw new Vex.RERR('ClefError', \"Can't draw clef without x.\");\n    if (!this.stave) throw new Vex.RERR('ClefError', \"Can't draw clef without stave.\");\n    this.setRendered();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setContext(this.stave.context);\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n    }\n\n    this.glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined) {\n      this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n      this.attachment.setStave(this.stave);\n      this.attachment.setContext(this.stave.context);\n      this.attachment.renderToStave(this.x);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
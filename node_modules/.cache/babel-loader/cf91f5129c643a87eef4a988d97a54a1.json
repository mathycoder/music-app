{"ast":null,"code":"// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\nexport class Barline extends StaveModifier {\n  static get CATEGORY() {\n    return 'barlines';\n  }\n\n  static get type() {\n    return {\n      SINGLE: 1,\n      DOUBLE: 2,\n      END: 3,\n      REPEAT_BEGIN: 4,\n      REPEAT_END: 5,\n      REPEAT_BOTH: 6,\n      NONE: 7\n    };\n  }\n\n  static get typeString() {\n    return {\n      single: Barline.type.SINGLE,\n      double: Barline.type.DOUBLE,\n      end: Barline.type.END,\n      repeatBegin: Barline.type.REPEAT_BEGIN,\n      repeatEnd: Barline.type.REPEAT_END,\n      repeatBoth: Barline.type.REPEAT_BOTH,\n      none: Barline.type.NONE\n    };\n  }\n  /**\n   * @constructor\n   */\n\n\n  constructor(type) {\n    super();\n    this.setAttribute('type', 'Barline');\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n    const TYPE = Barline.type;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5\n    };\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type);\n  }\n\n  getCategory() {\n    return Barline.CATEGORY;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  setType(type) {\n    this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  } // Draw barlines\n\n\n  draw(stave) {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case Barline.type.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n\n      case Barline.type.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n\n      case Barline.type.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n\n      case Barline.type.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n\n      case Barline.type.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n\n      case Barline.type.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave, x, double_bar) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n\n    if (double_bar) {\n      stave.context.fillRect(x - 3, topY, 1, botY - topY);\n    }\n\n    stave.context.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave, x) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    stave.context.fillRect(x - 5, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave, x, begin) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    stave.context.fillRect(x + x_shift, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n    const dot_radius = 2; // Shift dots left or right\n\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = x + x_shift + dot_radius / 2; // calculate the y offset based on number of stave lines\n\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n    let dot_y = topY + y_offset + dot_radius / 2; // draw the top repeat dot\n\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill(); // draw the bottom repeat dot\n\n    dot_y += stave.getSpacingBetweenLines();\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n  }\n\n}","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/node_modules/vexflow/src/stavebarline.js"],"names":["Flow","StaveModifier","Barline","CATEGORY","type","SINGLE","DOUBLE","END","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","NONE","typeString","single","double","end","repeatBegin","repeatEnd","repeatBoth","none","constructor","setAttribute","thickness","STAVE_LINE_THICKNESS","TYPE","widths","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","setPosition","Position","BEGIN","setType","getCategory","getType","setWidth","setPadding","setLayoutMetrics","draw","stave","checkContext","setRendered","drawVerticalBar","x","drawVerticalEndBar","drawRepeatBar","getX","double_bar","topY","getTopLineTopY","botY","getBottomLineBottomY","context","fillRect","begin","x_shift","dot_radius","dot_x","y_offset","getNumLines","getSpacingBetweenLines","dot_y","beginPath","arc","Math","PI","fill"],"mappings":"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","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\n\nexport class Barline extends StaveModifier {\n  static get CATEGORY() { return 'barlines'; }\n  static get type() {\n    return {\n      SINGLE: 1,\n      DOUBLE: 2,\n      END: 3,\n      REPEAT_BEGIN: 4,\n      REPEAT_END: 5,\n      REPEAT_BOTH: 6,\n      NONE: 7,\n    };\n  }\n\n  static get typeString() {\n    return {\n      single: Barline.type.SINGLE,\n      double: Barline.type.DOUBLE,\n      end: Barline.type.END,\n      repeatBegin: Barline.type.REPEAT_BEGIN,\n      repeatEnd: Barline.type.REPEAT_END,\n      repeatBoth: Barline.type.REPEAT_BOTH,\n      none: Barline.type.NONE,\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(type) {\n    super();\n    this.setAttribute('type', 'Barline');\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n\n    const TYPE = Barline.type;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type);\n  }\n  getCategory() { return Barline.CATEGORY; }\n  getType() { return this.type; }\n  setType(type) {\n    this.type = typeof(type) === 'string'\n      ? Barline.typeString[type]\n      : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave) {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case Barline.type.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case Barline.type.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case Barline.type.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case Barline.type.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case Barline.type.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case Barline.type.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave, x, double_bar) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      stave.context.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    stave.context.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave, x) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    stave.context.fillRect(x - 5, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave, x, begin) {\n    stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    stave.context.fillRect(x + x_shift, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = (x + x_shift) + (dot_radius / 2);\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = (y_offset / 2) - (stave.getSpacingBetweenLines() / 2);\n    let dot_y = topY + y_offset + (dot_radius / 2);\n\n    // draw the top repeat dot\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
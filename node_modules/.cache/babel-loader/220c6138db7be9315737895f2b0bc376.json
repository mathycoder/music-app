{"ast":null,"code":"var _jsxFileName = \"/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport Vex from 'vexflow';\nimport { connect } from 'react-redux';\n\nconst MusicNotation = ({\n  currentNote\n}) => {\n  const [currNote, _setCurrNote] = useState('C#5/w');\n  const [vf, _setVf] = useState();\n  const vfRef = useRef();\n\n  const setVf = data => {\n    vfRef.current = data;\n\n    _setVf(data);\n  };\n\n  const currNoteRef = useRef(currNote);\n\n  const setCurrNote = data => {\n    currNoteRef.current = data;\n\n    _setCurrNote(data);\n  };\n\n  useEffect(() => {\n    setVf(new Vex.Flow.Factory({\n      renderer: {\n        elementId: 'music-canvas'\n      }\n    }));\n    let score = vfRef.current.EasyScore();\n    let system = vfRef.current.System();\n    system.addStave({\n      voices: [score.voice(score.notes(currNoteRef.current))]\n    }).addClef('treble').addTimeSignature('4/4');\n    vfRef.current.draw();\n  }, []);\n  useEffect(() => {\n    if (currentNote) {\n      // vf.current = new Vex.Flow.Factory({renderer: {elementId: 'music-canvas'}});\n      // score.current = vf.current.EasyScore();\n      // system.current = vf.current.System();\n      setCurrNote(`${currentNote}/w`); // system.current.addStave({\n      //   voices: [score.current.voice(score.current.notes(notesRef.current))]\n      // }).addClef('treble').addTimeSignature('4/4');\n\n      vf.current.draw();\n    }\n  }, [currentNote]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"music-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  };\n};\n\nexport default connect(mapStateToProps, null)(MusicNotation);","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js"],"names":["React","useRef","useEffect","useState","Vex","connect","MusicNotation","currentNote","currNote","_setCurrNote","vf","_setVf","vfRef","setVf","data","current","currNoteRef","setCurrNote","Flow","Factory","renderer","elementId","score","EasyScore","system","System","addStave","voices","voice","notes","addClef","addTimeSignature","draw","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,GAAP,MAAgB,SAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACzC,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BN,QAAQ,CAAC,OAAD,CAAzC;AACA,QAAM,CAACO,EAAD,EAAKC,MAAL,IAAeR,QAAQ,EAA7B;AACA,QAAMS,KAAK,GAAGX,MAAM,EAApB;;AACA,QAAMY,KAAK,GAAGC,IAAI,IAAI;AACpBF,IAAAA,KAAK,CAACG,OAAN,GAAgBD,IAAhB;;AACAH,IAAAA,MAAM,CAACG,IAAD,CAAN;AACD,GAHD;;AAKA,QAAME,WAAW,GAAGf,MAAM,CAACO,QAAD,CAA1B;;AACA,QAAMS,WAAW,GAAGH,IAAI,IAAI;AAC1BE,IAAAA,WAAW,CAACD,OAAZ,GAAsBD,IAAtB;;AACAL,IAAAA,YAAY,CAACK,IAAD,CAAZ;AACD,GAHD;;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,KAAK,CAAC,IAAIT,GAAG,CAACc,IAAJ,CAASC,OAAb,CAAqB;AAACC,MAAAA,QAAQ,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ;AAAX,KAArB,CAAD,CAAL;AACA,QAAIC,KAAK,GAAGV,KAAK,CAACG,OAAN,CAAcQ,SAAd,EAAZ;AACA,QAAIC,MAAM,GAAGZ,KAAK,CAACG,OAAN,CAAcU,MAAd,EAAb;AAEAD,IAAAA,MAAM,CAACE,QAAP,CAAgB;AACdC,MAAAA,MAAM,EAAE,CAACL,KAAK,CAACM,KAAN,CAAYN,KAAK,CAACO,KAAN,CAAYb,WAAW,CAACD,OAAxB,CAAZ,CAAD;AADM,KAAhB,EAEGe,OAFH,CAEW,QAFX,EAEqBC,gBAFrB,CAEsC,KAFtC;AAIAnB,IAAAA,KAAK,CAACG,OAAN,CAAciB,IAAd;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA9B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,WAAJ,EAAgB;AACd;AACA;AACA;AAEAU,MAAAA,WAAW,CAAE,GAAEV,WAAY,IAAhB,CAAX,CALc,CAMd;AACA;AACA;;AAEAG,MAAAA,EAAE,CAACK,OAAH,CAAWiB,IAAX;AACD;AACF,GAbQ,EAaN,CAACzB,WAAD,CAbM,CAAT;AAeA,sBACE;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CA7CD;;AA+CA,MAAM0B,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACL3B,IAAAA,WAAW,EAAE2B,KAAK,CAAC3B;AADd,GAAP;AAGD,CAJD;;AAMA,eAAeF,OAAO,CAAC4B,eAAD,EAAkB,IAAlB,CAAP,CAA+B3B,aAA/B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport Vex from 'vexflow'\nimport { connect } from 'react-redux'\n\nconst MusicNotation = ({ currentNote }) => {\n  const [currNote, _setCurrNote] = useState('C#5/w')\n  const [vf, _setVf] = useState()\n  const vfRef = useRef()\n  const setVf = data => {\n    vfRef.current = data;\n    _setVf(data);\n  };\n\n  const currNoteRef = useRef(currNote)\n  const setCurrNote = data => {\n    currNoteRef.current = data;\n    _setCurrNote(data);\n  };\n\n  useEffect(() => {\n    setVf(new Vex.Flow.Factory({renderer: {elementId: 'music-canvas'}}))\n    let score = vfRef.current.EasyScore();\n    let system = vfRef.current.System();\n\n    system.addStave({\n      voices: [score.voice(score.notes(currNoteRef.current))]\n    }).addClef('treble').addTimeSignature('4/4');\n\n    vfRef.current.draw();\n  }, [])\n\n  useEffect(() => {\n    if (currentNote){\n      // vf.current = new Vex.Flow.Factory({renderer: {elementId: 'music-canvas'}});\n      // score.current = vf.current.EasyScore();\n      // system.current = vf.current.System();\n\n      setCurrNote(`${currentNote}/w`)\n      // system.current.addStave({\n      //   voices: [score.current.voice(score.current.notes(notesRef.current))]\n      // }).addClef('treble').addTimeSignature('4/4');\n\n      vf.current.draw();\n    }\n  }, [currentNote])\n\n  return (\n    <div id=\"music-canvas\"></div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  }\n}\n\nexport default connect(mapStateToProps, null)(MusicNotation)\n"]},"metadata":{},"sourceType":"module"}
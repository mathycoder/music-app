{"ast":null,"code":"var _jsxFileName = \"/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport Vex from 'vexflow';\nimport { connect } from 'react-redux';\n\nconst MusicNotation = ({\n  currentNote\n}) => {\n  const [VF, setVF] = useState(Vex.Flow);\n  const [renderer, _setRenderer] = useState(null);\n  const rendererRef = useRef(renderer);\n\n  const setRenderer = data => {\n    rendererRef.current = data;\n\n    _setRenderer(data);\n  };\n\n  const contextRef = useRef(null);\n  useEffect(() => {\n    const div = document.getElementById(\"music-canvas\");\n    setRenderer(new VF.Renderer(div, VF.Renderer.Backends.SVG));\n    contextRef.current = rendererRef.current.getContext();\n    rendererRef.current.resize(600, 250); // Create a stave at position 10, 40 of width 400 on the canvas.\n\n    var stave = new VF.Stave(10, 0, 500); // Add a clef and time signature.\n\n    stave.addClef(\"treble\").addTimeSignature(\"4/4\"); // Connect it to the rendering context and draw!\n\n    stave.setContext(contextRef.current).draw();\n  }, []);\n\n  const drawTriangle = () => {\n    contextRef.current.beginPath() // start recording our pen's moves\n    .moveTo(0, 0) // pickup the pen and set it down at X=0, Y=0. NOTE: Y=0 is the top of the screen.\n    .lineTo(50, 0) // now add a line to the right from (0, 0) to (50, 0) to our path\n    .lineTo(25, 50) // add a line to the left and down from (50, 0) to (25, 50)\n    .closePath() // now add a line back to wherever the path started, in this case (0, 0), closing the triangle.\n    .fill({\n      fill: 'yellow'\n    }); // now fill our triangle in yellow.\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"music-canvas\",\n    style: styles.canvasStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"hi\"));\n};\n\nconst styles = {\n  canvasStyle: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  };\n};\n\nexport default connect(mapStateToProps, null)(MusicNotation);","map":{"version":3,"sources":["/Users/adamsarli/Coding/music-app/src/components/MusicNotation.js"],"names":["React","useRef","useEffect","useState","Vex","connect","MusicNotation","currentNote","VF","setVF","Flow","renderer","_setRenderer","rendererRef","setRenderer","data","current","contextRef","div","document","getElementById","Renderer","Backends","SVG","getContext","resize","stave","Stave","addClef","addTimeSignature","setContext","draw","drawTriangle","beginPath","moveTo","lineTo","closePath","fill","styles","canvasStyle","flex","backgroundColor","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,GAAP,MAAgB,SAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACzC,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcN,QAAQ,CAACC,GAAG,CAACM,IAAL,CAA5B;AACA,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BT,QAAQ,CAAC,IAAD,CAAzC;AAEA,QAAMU,WAAW,GAAGZ,MAAM,CAACU,QAAD,CAA1B;;AACA,QAAMG,WAAW,GAAGC,IAAI,IAAI;AAC1BF,IAAAA,WAAW,CAACG,OAAZ,GAAsBD,IAAtB;;AACAH,IAAAA,YAAY,CAACG,IAAD,CAAZ;AACD,GAHD;;AAKA,QAAME,UAAU,GAAGhB,MAAM,CAAC,IAAD,CAAzB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAZ;AACAN,IAAAA,WAAW,CAAC,IAAIN,EAAE,CAACa,QAAP,CAAgBH,GAAhB,EAAqBV,EAAE,CAACa,QAAH,CAAYC,QAAZ,CAAqBC,GAA1C,CAAD,CAAX;AACAN,IAAAA,UAAU,CAACD,OAAX,GAAqBH,WAAW,CAACG,OAAZ,CAAoBQ,UAApB,EAArB;AACAX,IAAAA,WAAW,CAACG,OAAZ,CAAoBS,MAApB,CAA2B,GAA3B,EAA+B,GAA/B,EAJc,CAKd;;AACA,QAAIC,KAAK,GAAG,IAAIlB,EAAE,CAACmB,KAAP,CAAa,EAAb,EAAiB,CAAjB,EAAoB,GAApB,CAAZ,CANc,CAQd;;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwBC,gBAAxB,CAAyC,KAAzC,EATc,CAWd;;AACAH,IAAAA,KAAK,CAACI,UAAN,CAAiBb,UAAU,CAACD,OAA5B,EAAqCe,IAArC;AACD,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMC,YAAY,GAAG,MAAM;AACzBf,IAAAA,UAAU,CAACD,OAAX,CAAmBiB,SAAnB,GAA+B;AAA/B,KACGC,MADH,CACU,CADV,EACa,CADb,EACgB;AADhB,KAEGC,MAFH,CAEU,EAFV,EAEc,CAFd,EAEiB;AAFjB,KAGGA,MAHH,CAGU,EAHV,EAGc,EAHd,EAGkB;AAHlB,KAIGC,SAJH,GAIe;AAJf,KAKGC,IALH,CAKQ;AAAEA,MAAAA,IAAI,EAAE;AAAR,KALR,EADyB,CAMI;AAC9B,GAPD;;AAWA,sBACE,uDACE;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,KAAK,EAAEC,MAAM,CAACC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;AAMD,CA5CD;;AA8CA,MAAMD,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,CADK;AAEXC,IAAAA,eAAe,EAAE;AAFN;AADA,CAAf;;AAOA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLpC,IAAAA,WAAW,EAAEoC,KAAK,CAACpC;AADd,GAAP;AAGD,CAJD;;AAMA,eAAeF,OAAO,CAACqC,eAAD,EAAkB,IAAlB,CAAP,CAA+BpC,aAA/B,CAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport Vex from 'vexflow'\nimport { connect } from 'react-redux'\n\nconst MusicNotation = ({ currentNote }) => {\n  const [VF, setVF] = useState(Vex.Flow)\n  const [renderer, _setRenderer] = useState(null)\n\n  const rendererRef = useRef(renderer)\n  const setRenderer = data => {\n    rendererRef.current = data\n    _setRenderer(data)\n  }\n\n  const contextRef = useRef(null)\n\n  useEffect(() => {\n    const div = document.getElementById(\"music-canvas\")\n    setRenderer(new VF.Renderer(div, VF.Renderer.Backends.SVG))\n    contextRef.current = rendererRef.current.getContext()\n    rendererRef.current.resize(600,250)\n    // Create a stave at position 10, 40 of width 400 on the canvas.\n    var stave = new VF.Stave(10, 0, 500);\n\n    // Add a clef and time signature.\n    stave.addClef(\"treble\").addTimeSignature(\"4/4\");\n\n    // Connect it to the rendering context and draw!\n    stave.setContext(contextRef.current).draw();\n  }, [])\n\n  const drawTriangle = () => {\n    contextRef.current.beginPath() // start recording our pen's moves\n      .moveTo(0, 0) // pickup the pen and set it down at X=0, Y=0. NOTE: Y=0 is the top of the screen.\n      .lineTo(50, 0) // now add a line to the right from (0, 0) to (50, 0) to our path\n      .lineTo(25, 50) // add a line to the left and down from (50, 0) to (25, 50)\n      .closePath() // now add a line back to wherever the path started, in this case (0, 0), closing the triangle.\n      .fill({ fill: 'yellow' }); // now fill our triangle in yellow.\n  }\n\n\n\n  return (\n    <>\n      <div id=\"music-canvas\" style={styles.canvasStyle}></div>\n      <div>hi</div>\n    </>\n  )\n}\n\nconst styles = {\n  canvasStyle: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentNote: state.currentNote\n  }\n}\n\nexport default connect(mapStateToProps, null)(MusicNotation)\n"]},"metadata":{},"sourceType":"module"}